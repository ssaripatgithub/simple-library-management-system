# ======================================================================================================================
# IMPORTS
# ======================================================================================================================
import tkinter as tk
from tkinter import messagebox as msg
from tkinter import ttk
from passlib.hash import sha256_crypt
import os
import base64
import datetime
import sqlite3
import webbrowser
import pkg_resources.py2_warn

# ======================================================================================================================
# FONT
# ======================================================================================================================
GOTHIC = []
GOTHICBOLD = []

for i in range(50):
    GOTHIC.append(('century gothic', i))
    GOTHICBOLD.append(('century gothic bold', i))


# ======================================================================================================================
# FONT
# ======================================================================================================================


# ======================================================================================================================
# DATABASE
# ======================================================================================================================

def runQuery(sql, data=None, receive=False):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    try:
        if data:
            cursor.execute(sql, data)
        else:
            cursor.execute(sql)
        if receive:
            return cursor.fetchall()
    except sqlite3.OperationalError:
        print('Error: '+sql)
        conn.rollback()
        return False
    else:
        conn.commit()
    finally:
        conn.close()
    return True


def create_color_table():
    runQuery('DROP TABLE IF EXISTS settings')
    runQuery('CREATE TABLE settings (ID INTEGER NOT NULL, color TEXT NOT NULL)')
    runQuery('INSERT INTO settings (ID, color) VALUES (:ID, :color)',
             {'ID': 1, 'color': 'blue'})


def create_student_table():
    runQuery('DROP TABLE IF EXISTS students')
    runQuery("""CREATE TABLE students (
                                ID TEXT NOT NULL,
                                name TEXT NOT NULL,
                                grade TEXT NOT NULL,
                                address TEXT NOT NULL,
                                contact TEXT NOT NULL,
                                bookpass INTEGER NOT NULL)""")


def create_book_table():
    runQuery('DROP TABLE IF EXISTS books')
    runQuery("""CREATE TABLE books (
                                ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                                class TEXT NOT NULL,
                                title TEXT NOT NULL,
                                author TEXT NOT NULL,
                                edition TEXT NOT NULL,
                                year TEXT NOT NULL,
                                copies INTEGER NOT NULL,
                                copies_left INTEGER NOT NULL)
                                """)


def create_issue_table():
    runQuery('DROP TABLE IF EXISTS issues')
    runQuery("""CREATE TABLE issues (
                                ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                                student_ID TEXT NOT NULL,
                                book_ID TEXT NOT NULL,
                                date_issued TEXT NOT NULL,
                                due_date TEXT NOT NULL,
                                extend INTEGER NOT NULL)
                                """)


def create_history_table():
    runQuery('DROP TABLE IF EXISTS history')
    runQuery("""CREATE TABLE history (
                                ID INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                                student_ID TEXT NOT NULL,
                                book_ID TEXT NOT NULL,
                                date_issued TEXT NOT NULL,
                                due_date TEXT NOT NULL,
                                extend INTEGER NOT NULL)
                                """)


# ======================================================================================================================
# END DATABASE
# ======================================================================================================================


# ======================================================================================================================
# BASE 64 IMAGES
# ======================================================================================================================
SEARCHENTRYB64 = b'iVBORw0KGgoAAAANSUhEUgAAAQMAAAAdCAYAAACuegmUAAAACXBIWXMAAAsSAAALEgHS3X78AAAErUlEQVR4nO2dW28aRxTHz16oF2wudhLbgA2kqoKNWilVoihSVVd97ku/UdtvkI/g9770tar6FEVJG6fuQ1Mncd3UxgSnDdTGbFz2NtUMGMPu2LgR0HX0/6ExMGaWM0LnzJkzZ2YVxhjVarU7rVarZFnWOwQAGBqaplm2bZNt22HWrdVisbiqbG5ufplKpT53XXeGMeaFQDAALjyMMd22bUdVVZX3RVXVUOpWq9XSiWhNVdVv+IsvGGPbhmFwuRdDIB8AFx7HccjzhP5XDMPIapoW2i45jpN1XXeBGwPuyuSTyeT/LxUAbwmWZfGpAbmu63DDMDU11dcxTdeDHWWyvksrB6NIrqQEK7mRajab26ZpNiUSAQBGjURXiZ1b8ftbK0qwHY8F+lGZe+ZVVfzqAAAOPAMAxkAnftDF/55OGc1J4tqT73Nyz0DSpwHrAzAGAIwYruR+RWde0GX3KzCPOfz2+x+0Uy7T69dH3frc4iItL12jWCzWaSdRcokRUZSzpwkwBgCEEG4I7t57QLZj03KxSJcvXxLKX63u0fZOmb797nu68eF1yuWGtwAIYwDAGPB8w77/PQlv4aTu7r374vnTT1YoEom0/88Yzc/P0dzcLO2Ud+nR+s8UT8QplUwEOyC5vkcyz0CVvAIAhIKdckVMC27dvNE1BH5yiwvCMDx5+mxoIsMYADAO+KjfU47jCL2lnVPA6FWtJhQ9FjNEoNFfeIyAl+K192hv7yUxXucrwjPwFZ3UQOkFxgCAkHF0dESxWHSgUMlEe3pw0GgMpQOIGQAwBvwJRbKlxWNYJz7gdb2FfpTOSgEPMnKMCSNwPUWymuB5juTbdMkrAMBIkC4tSpMN2wqciMep0TjsfEaSj9CpelGtkq7rpEf0gMmQ5Sx4anB/hNJzeUwTAAgZiwtZ2nv5J9Vq9VMFs22Hnj/fpncL+aEJD2MAwBiQBQxPK/H4FF0t5Ojho/W2QTiJLYrCDcHaT+tkOw5dLRTOf23JoxdMEwAIIaXlJSHU/R8e0vzcrJg6RGNRMX0o71YoFo1SIZ+jxxsbIu8gmYhTNDo46HgWMAYAjIFgzCAY4POP1EtLRcpm0rRbqdKrep2oThTRdSotF2khm6Fa/W/aePKUavW68BZu37pJiURctFUk+yJVT3amwsl3whgAEGK4cpc6Cn5CW9EvzUyL50I+T5XKC3rw4xp9/NHtN/YQEDMAYMRwp8DzWF+RPiTJQ7Kko97ywfsl4R1kMmmKRg16trkl6l3PDRRZ+17gGQAwclhgZ6Fk06J0OVC2g7mXTHpe7Gn45dcNUZtJp4WxkeYZSHIW1J7pBIwBABcc7hXMzl6hxuEhzUxPv3FnYAwAGAOe5x+Vz3dYsjw5yV+piLMMp1OprnfhSc44YJKgYkTDrkUAgA94BgCMmHbST/9IzVhwHD7vsWeBKqn7IDkJecCBq8IY8D3Tpmm2G4T4fHcALgr8ePRjLMv6p9lsGmEVXVEUYQf4n69M0/xM07QrnUrZ1iYAwH9DtyyL65JqmuZfBwcHob1b2cTExOPJycmvxb0Wt7a27hDR9RDIBcBbBb/XYqPRoP39/VDfa3FlZWX1Xw71nHccZoPoAAAAAElFTkSuQmCC'
SEARCHB64 = b'iVBORw0KGgoAAAANSUhEUgAAAC8AAAAfCAYAAAB3XZQBAAAACXBIWXMAAAsSAAALEgHS3X78AAADz0lEQVRYhdVYXXPbRBQ9q6wcyeDEtd2YaZ3Y9UfcBtwxbT6AYYbhjb/AE33kb/BP6B9hPIV0SjsFl7Rx3dDEcdoQh9BIDriRLe0yUhK3arSOjcwkOZ77IO/d3bNn9969EuGcQ9P0VKfT/nZvb28f5wOldDpdojZxAF9TKt9SFCUOfvbJdzqdXKPRsMjurlYC8IWiKE4DHRk5dXInobZeWw+Hw5rUbrcrhmFomq79LBFyeoxI/xaJRJKGYTC6b+zrkiS1GWNNSZK8xyWDnyXOvccSciesb9/R0QB2dnYM2m637SCdCAQCAZEz4/8hEAR9iGB3GROQ93APjMpotVoGHZxVb/y589cheYL3gkEEg8FhT9GFizxjlreXQC3+lrqVp8/wfHUVnY6J8fExtFqv7ayAWCyKa/k8Lsaix/q4poBIR/GuD0X5H0p37G3E1XweyakEZFkGAXH+e7T0BD8u3sXNj4tITk0OY7ouXORFqohg+y89XnZIfv7Zp47ib8bhUFUFn8zfRKX6DA9/LSMWjSAYVAWjiQJWnAEHSwnvwD4az1fXUPjowy5xL1zLTyMWjTqLGCZc5LngZzHL0za3/oAsUyQmL4OBu8zizGXpdBL1jRcwOfM0WJanEeZtvpW3g3NsTKz424hGI0NVHcezjSjX9s42XNTPw3dQCDn5VT6oqmjqzb58t7a2IdPhXivvKC+6Fb1XH5+IofzIRL2+gcnEJXej5Ca68eIl4h/EYQmUJJb37opuZPhV3g7W6VwaT5araDb3hH7l8m/Q9Samp3N+pjuGvvI8595q2f7ZzBUnZd756R5y2StIXL7k5HfOTTQa26jV6s7CpqYSMIx9KIp3CSWOCbHyQzmE1wszCIVCqK3XsfL7mqstErmAhYVZvHq1i8XFe1BVFfH4RczMXPU9b1+1De+jzE+mJh2zVTZNE+ASQmOhbpDSEYpKpYpcNoPlylMnzV4vFN7MLXX8kRfVQHyAqzsUev+w08Eb2dFpUBTV2Z212jpuFIv4pVzGirKCbCZzQH6Aev4IvgJ2UMzPzTo9KtUq4hMTeLm56Ws8t/KC48HY4GuU+PFjQCVgfraIpccVNLa3kc2kAG46bZZg23ulyqG/jJwEOwZuFAv+BjmEi7xleQcsE0RsL1VEJQMXlRqCzf3fyoPTwj9/vwalcpgSIMUPLglF15vfnQfynOMrSSKcgpCU/cQsawHAwhngdiLsk6eq6iI5upYfPLh/Dj70ufBlN2DHx8O3KaXfnA1evWGa5m1d18pd8pTS7+3PgGeUrwuU0tLc3Lz2L18y0xaO4/MuAAAAAElFTkSuQmCC'
DELETEB64 = b'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'
LINEB64 = b'iVBORw0KGgoAAAANSUhEUgAAAngAAAACCAYAAADLsaG0AAAACXBIWXMAAAsSAAALEgHS3X78AAAAQElEQVRYhe3RMQ2AMBAAwCdBQBGEJBK8MEKCqGqgazv9jI4mdxZuuZ9372NcAQDA9LZSjvVrrUbEqRMAYH6ZWX80Lw3CRhH6uwAAAABJRU5ErkJggg=='
ADMINB64 = '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'
CHECKBOXB64 = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAPCAYAAADtc08vAAAACXBIWXMAAAsSAAALEgHS3X78AAAAVklEQVQokWOMiIw2YGBgmMBABli+bIkDCwMDgwAUF5BoxH4QwQLlfFi+bMkBUnRHRsWAaSZynI4MRg0YNYAqBsCSskBkVIwDuQZ8gOIGEvUeZGBgYAAAq84OokPa7HsAAAAASUVORK5CYII='
ACTIVECHECKBOXB64 = b'iVBORw0KGgoAAAANSUhEUgAAABAAAAAPCAYAAADtc08vAAAACXBIWXMAAAsSAAALEgHS3X78AAABQElEQVQokWP8//8/Q2RUTAMDkeCN4D8BkfdMHxgYGB4sX7ZkARNUWz0x2i9o/TbYY/Mj/6rabxcGBoYEkBgLTHL5siV4XcG4PCgBZtFl9d/WLH8Yb4LYTPg0oWmejyx2XvuXOkicCUmRAePyoAnEaEYCDmAD3vP9A1EHGBgY8hmXBy0gRrP0C+aX/yPXJbCAbGa1YgSJ8UPl4hmXB8EMxKqZ+xvjTtvT7BywMNjwm/U/upp4PM5e6LuXswPGARkQwPqbEYdaTM0gZyMLMP2PXHfB6Rg7iP2RVM0wFzAIfgJTDgwMDBh+gYKj2DQzIKcDkEsYGBgisRhy93/kOhtczkJJSP8j161EMwSkWQWfv2CZCaThIEzwjvwfsZvKf2S993GcxaFPgIGB4cPyZUscYHnBEVlW5SELGBMAHxgYGBgAlTFwqcXprLcAAAAASUVORK5CYII='
DETAILSB64 = b'iVBORw0KGgoAAAANSUhEUgAAAFAAAAAeCAYAAAC7Q5mxAAAACXBIWXMAAAsSAAALEgHS3X78AAAFUklEQVRoge1aXUxcRRT+5u7eZhdQd5NGdtdEYEmMQJPKAsZ2oQ1QGsXGpPxYoy99MC028cEXjU9iJCH60KoJTzYRU2Kk1L/a+mAxqQFeCqUvAg+WBbRla6K7i4HuXeDeMTPcuwV2oTPZJRLhSyZ37uyZM3POfOfMzM0SSikYYrG5dl3XT87NxQqwi4eh1u/3X2cyJBqN/QTgKUIIVRTFRggxCCF7bIqyuOvG9Jj5feYfl8t1T1XVL+2U0v0AHqeU3icKyVHtKu9kt9m238y3CfLy8v5UFOWJpaWlWfvC/YU/CCHMgfOGYeT4PF7hWRJCs24RpUrWdRLFyKo+p9OZr2maNjc3N61omjYfj8eRSCTiAH7J6kj/U+Tm5mB+fl5fXFx02TMx0aDZZyAkdBJChOQMQ4KBAioVG4FBjSVKaSz78bLDkMJAw9DFPSDIACrDKoizRVQvSTVzM62CYiu27zIwQ6QsjQxbRCGnk2Js7Ff0XvwKNdWH0NBwVKjXuY/P8mfb6Tdw+YfvuY6202fg8/lYXEmMLxZVFjLaRNKhs7MDbFe3UFxcjNLSfaisrMr2UGvgdDoQj2tbOkY6pDJQNAdssLut7z05OclLXIsjWF3zcKWUJnd3AxQ63Zg9q8d6/VTbqvaVX1jfZWpAldmEBfO6dVpIs4lIjZa22evz4ZRp0NDgAPr7r2FwYACBQAAOh5O3/9x/DUNDg7zO2oLV1QgGq6FpcfT19Sb7RiMRtLS+jPHxMd4nGo3C6/WhtKyMv7NFqT/SgI8+7OR93n7n3ZT5dPd8jsnQJK/XBA/haP3GaUHK/q0I4fVgBrKQZs4aHxtDoKISl/oucodYYE5jzmCoqKhI0REKhXgfC+HwLC8iYItgOY9hNnw3q/alYaDMQTbNajFqUwq66jjk8Xj4MxKJIPL3X9x5brcbzc0t8Hq9CIfD6Om5wI09GKxBc+sJfN3Xy+uMXVevXOb9mfNfPPYSr/dc+AJToUke7jpjjTltVrf2LBbC+ebVNHigBkfqVpi3rG9so3AIm9hyBoJ/KovyJ0v0zFkMLBTPn/8sRZaxcT3CsytsYw60wOpTq5i1EYr8frQ2ncDNWyP4tOssd2Jpyb6s2ZbRMYZukuCtXDIxMY6hoSFeLygo5E5kYMxramqCy+XmDg6H76GkpASUKMnDPNOv68vweD08ZG+O3MALjcf4b6Mjw9YkzIROH7wn6yvvJU+X8XLp2170fdOLN8/44Ha5N5i54OXAfG4JAxnLOjo+WNNWXh7gTmMoKirC1NQUurq61sg0NjbimUAl1qO8vAK3RkeTRQYT4+P48eqVNcyORiObOFAOKTcRtvqiRWf5Z11ZD4fDgdq6Ojzf2MiPs6y88upreO7AwaSkJbO/PABqPDj3cnIZQH6+F8ePt8Bj5jPG2traelOIgBrEZI5ZN69ZTA/T4Xa7kmPV1dWjsPhJGMpS2qKThFCxJkl+u32bfZo+TAiZUVV1+rFHHzksugRULt8KKhW/XRIiJqsQifu9IO7cuRtLJBY/SQ1hiVsXFb4iSXha6tYnNr6R7rSQIaxg2/2YkCFSGShBFsPIvv8VuiQuLHhm0yVoLXsO3GVghkhhoK6LJ1xDcBeRWVUqcReloh90JWgichdemI/DZrPtgelAj9meSyl1aFpCeDCZ78zCkoIbg5RamT1MwCi2yIQoit1ud9gJkE9Xeu41dH1vQoKBOxmqaneoql1L/rVjePhGO4D3drpjJPB+VdWz7atzYHdubm7M4XCe2/ZT/4+hafG3FhYWvgNPOauCPhQKFQI4uTPdIoVuv98/DQD/AnkEhtFoSHfvAAAAAElFTkSuQmCC'
STUDENTB64 = b''
SEARCHMEDIUM = b'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'
SEARCH2 = b'iVBORw0KGgoAAAANSUhEUgAAACYAAAAaCAYAAADbhS54AAAACXBIWXMAAAsSAAALEgHS3X78AAAENklEQVRIic1X628bRRD/3d7G8TmtI+E4dR984BEQahUeIRUC8Q0J/msUQCBVVJQUvhBAcdK0KI4jxVYubuzbRTO3uzd39kVRQYJJRveam/vNbx67jqy1Fv8/2dH7+/uYzWbIsuxKdFEUgWIgpXN5n9QYA7pLR+uex0oFu+vE32w2+djpdKAbjQa/RBdKOJIfrkoVnLEWSlwHCGRXOKoFRP4ooPF4zNfD4RA6SRJm68aNFcTxEow1uZ/gMH/RRorvqcjkwBwDZGcjzWc2cvccMgNTBGA8aBfUAgK97fHxMTSxlKfCIlImvGCLE4eSXXJkSsVQ7kuET0WKbYyIPv+IFewVPuCDckAIA5ETx3FgUC+iNstm4TzWumCBHcYwGYEQqRH2Mj0QzFgVhTxwrObqmtOlQi7HGO4VQZefnacpBoMTpOkFumtr6HbXEEWFjSx4ZWVzRbBQoZlIiTXPGANjB8Yw/dxRLhVe5Ln/0HQ6xe7TX9E/OMTaWgcrrRb2+31MpzN8vPUB7tzuOXsZlREXUf4vOt1/u8SY9QYmw3Wm2jfffc/Hr778Aq1WK6Tr+Yu/8OPjn0rg6sQDkkHLkaWsa2lqeSOQByWwQQ36/QNML6f4/LNPkTQTWFPY3u7dwtaHmwyO/Yg/RFlJS99wAOW15nzTA/qA4gqHrEsjozKW0/fuOxvQWpcceun1emglexgMhpzm4AeVGjOL5yNct6qAFDlbxoH0Wo7K4uxshFarGWoyZ1ioMeh0XsPg5CQvMqcaKmhso+swJg1cNKL7ZPGTJK1krj5Kq4DJkKYperfWK00kR0oUli3JlgSYM1ZBe5Wstm/i8NlRrQV15nB4yqzVia2kfxF7Cn5+OcZMxaiswMbG2zh89hwHh4chfSbLWF9OXuLJ7lMGRUtdaChrMVNx0CxSYUTMNZsDtnDyl6MpP0uaTby/+QA/7/7CzLx+7y7fTy8u8NveH1jSmgct1WK7fbPwE1UHd/2izs/Pzs7s6ekp2u1VxFpx50mROw75ZHKRYu/3P5FeTDAajRnEvbt3WL/e+ZZT2koSfPJwG0tLurS7yNnKu9QPWZLLy0s+DofDHV3k2PAamBuJZUqVx4WX5eVlPLj/XojfC6VmvdvlPR7JD48e4eH2FhpLjQowUwJGBMwVP9ihHK5G1I/QytK1SMnPW2++gdF4zAzPpjMcHb1ARpPdqaxjmvbkj45zxZ+Pmvl18lWFhu/21kcMipqAGKxKtdirwYpUup2pY6+QxUDLTSEv3LY6jrG5eT/cndu614wLL9o7zhlT7hPypZp9e2nfX4e4eBBLn8hTKsX/bgjA/NSuG6y1qRX23kJVriXeugKR6yNtpwKwyWTCbUpdtOjHyD+R8iZzsXimCOD5+TnbrKysQI9GIwZGv1D+jcJ/FfG/ulZXV/n19fV1rrGd/wTNVQI8+RtjXsFsAgE5SQAAAABJRU5ErkJggg=='
CONFIRMSMALL = b'iVBORw0KGgoAAAANSUhEUgAAAFEAAAAgCAYAAABq8ZRSAAAACXBIWXMAAAsSAAALEgHS3X78AAAJ40lEQVRoge1afYxVRxX/zX3v7Xu77AePr7DLRwCDyAINH4vlY6EVY1tj/UiMWkgxTUQLqdVoa6i0JVaj/UeDaWOAtIkETJompViMjYXW0mW3JqQUwd2SKLuVoiAo+xbpvrfLe3fGzJmPO/fuvY8tEBMr5+Vk586dOXfmN2fOOXNmmRBCAED5yhUYKlfKEJyqITRL8uASs2VhWyBUb95ejVhIFnfKQX1Uapjct8LpE18fGi1jdg5MJI/YYwzpTFr38cC5Gmc2m2Vpd8CXL1+m8vvvX4ZfqQQTYWZQRjxLHKwYNYhJE0/qmfwm1EoE7Thz5cYvNHOrPQ2oAVNw21YCWJPJUDmfz8PzApWyIBaLRRQKBSrnclnU19erj3ieA5KwQ0jSvdGCmKQlyT1HCSISQEzoYlsLQDA24qXQGlepVHCx/yKV0+k0GhsbbbPwDr1J10RWEweLg0ilU1SeMGEi0rrsMc+xG+4iBU++XgvZzNM2zWwJJoTt74PbMheOhrPADkIEWs+YH9TzjNUcwSoRhWFWp4SrciLlGCD3G3pHMS9iz6PE4HNfz0NpoKTz58+jrq6OytlsNgBxeHjYNqqpqdH2QCETa5JF4HgMFrKKi/Cg5HZgngHZ2S4icEimWrb1vJSdthEsjbhnV4U53zPGi/adautF6o00Z6GkYiDiEGUfY+dMf4lBytg+ATQ2qC185swZ+H6wwBZE420MGsY7w1l1IYLdzzynvR/v+cyc7YI4L0Oa4QewCb/ifMeAkAKHI4Oz0HtjqeWYpMZY6FxNdkiIcL2auoDvV4JBy69KTbWABjtKRBQlZBPN2ruNpGYZFpqhQScWHEn03eO7cKzwbkjGaFhU4WpkxxTHIpnVMjDa3sT6R2PlioWJ9WKGYDWROS2k5ljNlNvZ2BBr76QPNl1lZDdyxXeffgNP/+Vl7P7rIfz5009jbGZMjEYkee7khakGZDCm2J7JbxjAfR8pbUqMSWKeH5gc2g3OtxzTVO2r10wSwK8f3UHdL5WL+NQbP8TB27bGAmmoVCph//5fo6enm2ry+XFY2rYUq1bddk3D6C/0Y/uOp0ju0rZb0d1zAps2Pohx+XE3fL4OiOEYyV3xoOyuJrf9XAO9570OC6ChE5dOE5AHVksg60bIlRPduXM7BbGPPPIo6mprcbizAwcOvkKyV7WvHuV0Al3p7j5Ocjfd/0309p2yw49TZKF/VorehSlPOCc3nmgTQ5po3kk7YYSSQMZCDY5fOo0nT76IZxdtQr5mDLin6iVYD5/YHTs9Ka8hlbUhA5GWu/83L6E0VMI3vrwR2docfMGxYmU7xo7No3XePHoO5CRTxt1vxhxxjlXL27F6xSr9HDU9gjybDMUqTIVRnOkIQToaG3GJcHSRDGLgiUI20fHcp4v/wl2dP8a/y0U83L0bzyy8nzynBPDOrp9QfZQWNE3HK+2PjQRWy+3r7SWwZMzlfmtua6sdU1dXJ1579SCVZ836CD7z2c+R5sq6rs7DaG5pwbmzZ9HS3ILP3/0FHHjtALXdteeXaFuyFIe7OrBxwybseFZpvKQ71tyB5/c+T33OnjtLdYuXfBwDhX709Z2iduvXr9ftWaI9DryzVnWK9bjjlbhveaBcwj1Htlmg9pzpwIZjO/HHgSoANk7H71Z8H42pbEiW4VJxEENDJeSyznsyEQEbAL/4pa/g0a0/IK3es3sXHRCME1i0eAk2P7QF/YUCjrx1BCuXK8371gPfoXmQhum4sWXyFHz7gYfkBqXnyc3NePzxrWhubsHbR49gXut8bN78GEqlIXR2doFzBaCMDd34cCSIKqAjpu2swww3XLir80f406X3QgJ+9bcO3P3mk7EANqZr8Vzbg2hI5RJDDxnY53I5sl+mTsZrLh89+hZNdM6cOTS+RYuWYKBQwMmeHmti5s5tRTabQ35snkyD1Q1Xe3RRgiWCYAQzZ86kYvPkFnqeM+djyKQz1EDmE1So44dCr3gQIWwcJWgyPrEvVHJK8qYZd44ASlKhPBgL4MsrtmB63YTYPi7JSZw8+Q6GhoZC9bLuv0EVXobPy8jl9NFSlMGESg2axRXEaqdAhzjGRn6gBMS6qe1YO7X9qu0kgL9dthnz66fQIiSxWZzb16xBLleLvS/uRXFoiE5wf+jqwr69L9DfRQsX4x/nzuFkzzsQnOHY20fJ6Sxc2GaPdrIP98p0yKWfPq1wr2LLPlPAyLjWZ8PgrHxDlijWsbiRuZoqs/W/WLCB/j73985Eodtv+RoWNEzX5+PkwNnIbWoai3vWrcOh13+PbT/7KdVJkG7/xCdx67KVdkj79r1APGPGLKxde6/SDuMMuTI96jF8snLPwnAcp7GVntYqM31fmhQejgjUsS/IAbhb2ma2e3v7bOXESROCPJqDgScCVV7csQXvFi+MgOWr01bjqQX32edKNQwTyBPxZ15ETgpR4klJwyr96CjOZfKBwRPhBIR86XkmCSKQSqnQ51TvKcyePZvKDQ0NTmZbBOGmPAKZEEd6NBtk6jqZvHx1+RbccmgzBv1hO6B7p7RjW+v6kAfjInnSiRPjVY59VUAUVYwTT5TJKMukIhEeGpeMHblJrjBmI4Goc7GfpX5S3cm5BCGOzA8ahlRnUmmGpvQYdLY/gZynjPH8hmn4+bz7IARTrEQhxTnSXBB7lHnUTFqjrKLMqqjMCldaSOkuDyKG5Q6UQZBkmcwh9tLEQlon2V3mKiWiMjTxQezpH4Nn38uytLG8IlQbptg4EE7GSP+ciCJKobUzjaR9sT8HUPteqFWbWpPHmyufwIr8R/H6sq06QhJWq5V5cmTBjUX1d3jkvalzwizhyLB3EyJoq8akGUJ70vBkg7jXkcuF9bKSoyCpsEaP2fHIMu/oauN1Xw9My43HS23fu14x/9MU2EQuwtegzpVpcGLVaaGInRMxqTBDdCowtsRJ3o68cFBy/OBhlLeAkirOCJ1rNCcpK5wxe6Fr2VCCS9ep/imtneoVg6io+uipxYIorwSHB9Wpo1wO4ifX9TNmIBUjsj6jofB9RtJ94dWpemo2LvsUbZGciXfJTXzIKwVzpZzJZOKvTOXFy8DAAJUvXPinvYhJpZJ2/OiuMJP7JNFIzbj6165nQZjTi4ckcGdHyn9uMCBOnDTJhjtwQawfU4/x48dT+eLFiyj096uPsKRhfThADLePeF4nqM6k0mhsaqJy9PLeBttXhodR1v/1UCoV6bIaiCYxAwvJQj7J/XhUc5O2VPw0kuGotlAf3LRE5bpmK+4fZ9KpFHK1taqcTllNrKmpYTcv728ABRdVjJHBBCHdYNXYp1hKNwqt1IdLE105QSI/OK1JNfWsHQyPxW7nm3TNRGfn61nG/3sCgP8AOFF1dh5RTEMAAAAASUVORK5CYII='
CONFIRMLARGE = b'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'
REMOVE = b'iVBORw0KGgoAAAANSUhEUgAAABIAAAARCAYAAADQWvz5AAAACXBIWXMAAAsSAAALEgHS3X78AAAA/ElEQVQ4jZ2UwQ2CQBBFv8S7hjtHzlDC2oEdqB1YCiVQAiVQAp65kHAnWgFmyMw6LCsr/gOBzeftMv+H3TiOIA1JegSQ46Mm7tsnHA1JatRKF/dtRzcTiCE1gEyZHgCMhg1JWgK4KM+LPU3EC6UDAT/XvIkPQjrwAbDnhaP7CQ6s8UA0zILWlHlOu5B82mKoG0RzsqArD/cfiLEgTsZshNnEIPGLOKFOBhjQKe7bWiyR4y1+hExeqcYM9KUna5r1LGJIsREiyqSQcqI8+Mo6bDEjnyidYJohkPQkWA0B3aWhLoR6EujZjS76f0RzOitDJWUTcUK0qYg2qQDgDdc1XmU5hDKKAAAAAElFTkSuQmCC'
STUDENTSMALL = b'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'
RETURNBOOK = b'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'
EXTENDBOOK = b'iVBORw0KGgoAAAANSUhEUgAAAFUAAAAfCAYAAACWNoFQAAAACXBIWXMAAAsSAAALEgHS3X78AAAEuElEQVRoge1aX0wcRRj/zbKE3SMhXAzh7l6A8+nAxILWBA6jhNZUxDShUt9r0Whi1AdD+mKoxkR90SfTIg8ifdDSEBMwPiiYWq4YK6U+wItleQEuPNA7qNwu3O2OmTkOjn9lprCUyv2Sye7OfPPtfN/+5ps/O4RSigzi8YWORCKhWZZpIQcpBIPBjow8icXixQCOrT7/lkol55aXl0sJIQDNOVYEjJiL9xcbANwJhUJx5tT3AXzJ6ubl5UFVVaQdSudUVS099BYdApimiemZaZSWcnc1qMlUcoGALCBdmPJ49Cd0TQcU5f/pULL/KpU8BSUlJZZlWYvJZNKjmqY5pyhKnBU6jqPbdgEURRFrH3EvPlAq1gZZEOLsu878fBWpVL41Pz9vJ5NJqCsrKwkAZaww3fXFlTnUxaAroZtINNpxJJwqqJYogKdQ+9s0zRcAJNyhwxGHutl8NpI5ji3mFQmGUElWE4gzSkY32WrygzRLyK4jx1QXsC1TZVklAnmdbsVrmYHq4aYKOaa6gG0DDBVkiehIGp2dRWfnpQ15rWdfR2XVUzvW6b36PQzDQHv7hV31y3C66/LX/Pp22zu7ysrMKrIhE7X3jBMnX0K4/vmDfOUjwQ6jv2DckfySPF5n6Y5EhjH46y94rfUsNE3HlZ5u1DzzLLxeLybGx7lM5+VLaHvzLdwe/YvLx2IxLhuur0c4XA/LMvHF55/BHwjwHsHQeOLk2sdjedd6f+D1mF4WJ3VNE2qv1Jw2CwfKVOZAlhiYI5lTpoxJnscc5fcH0Nz8Ki9nzmDdnzk0Gp3FwEB/2lnhekxMjONa71XunMqqqjX9H3V8vPYOFlpYeU9PNwL+AN597wMYxiSufNcN3R9w1c4dmCoWpUSXfJSm5RobG1FXF17Pd2w0Nb2Crq5vOJPOn2/jeRvqgmB8fILfZ38UBub00GpcLq8IwnYclPp8/HkpsYSZmWlYpoljNTW8rKy8AsGKJ2FaJlL27jY+FjF1O0SjUei6zrvm1JQBv9+/o+yH7Rc4o7PBuv9hw5YpFc2aq+6WWMwRTciK15mUSCQwODiI6upq1NbWIRKJ4N69eV6WntdS2HYKZeV8awLDN37nz8M3rmOg/0csLf0L215lNpPnad2QUKgSxV4vxkZHeRkLNcbUJC8TsxFSKYMDZerQ0BBPDC0tZzA2dpvfM4cyjIzcRF9fH86de2NDvYqKIF5uasbISAQjNyPQNA21dWF+tawH/6RoOdOKn3/qx6efXOTy3mKva/ZlQP65e/dFtuOP1V0qXdegFRQIVaYu7E2uKxdflxAiLqsQwX0NeVyfnJxiu1QNuRWVC9ja/an4EoW6uY6WWSZR8XY4LmxSb0aOqS5gK1OJOKkcx71votCkuLDEfNKW6AL7Nk+lDl2fpuwCR2Kkkm0glVgiUpnNcgkePOwyNdf99wG27WDpfuJp9oufQSWE+LI2kNlBij9M07zz+Jr4SOCjFKcIUcz8fMXDur8v0wrHttnJlNMATh8tn+wdLAIVFnqYnsSGs1S3bv2ZO+izBxw//hwP7psHqotFRUWnFCXPt58vOwqIx2PfZswkm3/IGYbxVdaBtRwEEQwG2XIfAPAfT3lm6Bdz+T8AAAAASUVORK5CYII='
ADMINSMALL = b'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'
EDITPROFILE = b'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'
APPLY = b'iVBORw0KGgoAAAANSUhEUgAAAFYAAAAjCAYAAAAOuf2FAAAACXBIWXMAAAsSAAALEgHS3X78AAAFvklEQVRoge1a3W9TZRx+3u2MtiPEdV5I68W2ciHtSOjaYTYGkQW8EBzG4D8AyRAJGr02SDRRIzcSCXdeQPRCPiQxxgszUWGrJKxnI3FtL4SOqjg/LtomsHO2tuc1v3c9Z916Ns4pOzhcn+TX0/frd877nOf83o9zGOccOnK5/I+KoswqyvQ61FELzgYCgbPUTsrl8m0AXi47ea6pSfpL01xPMcYAXifXDgqFwt1MJvP3hg0bplk2m3sTwMfUXpIkYQQGZBobG9sekz6tCtzJ3Mm43W40Nze3SYViIc/A8nRhiqIUm5s9T3rcHoCx/y+pzBm3ra2tbYVC4c709HRGmpmZ+Ycx9gQVaJqGYrGIhoYGa9fHnIsVnFu7hlrAmOaIX0lqJP6a8vn805KqqvfmCyTLpBI07mAQtulbjAkWQQKy59xaNU+zG+n05KcATjgnizUOaXH3afqlaSVrrNhQie7bKhjsqcqe76puP8i7zfpAXbEOoU6sQzANBXYeKzuw59fJ1YndWYH9+ZndYFMThoevYWjoW3R3b8PAwEuOny+RmMD5C1/A7/fjyKtHHT+fGUyJ5RbVYnXaEo/fEMeJxAT2Dey3dmU2n5rK2qVyW/ot8uprbLI727I5SONRxNhkIoFsNiv+q4oCOR53+pSrAktMtyzeUgt3MpGcEMdQZ6cgOZn4GZFIZEGdK98NIRYbQSTaLchPJhMiPxAIYN+L++H1ekWa8i9dvACfzy/8UTsCpft27BR5Zjj50YfC7+DhI/D5/UaND06+D0VV8NrgUfh9ftO2qGVB4bRiqTPpdBpujwcDZYIoPTX1h2n9MTlukEqgup9/dg6qqiyoR+11UvX0pYvnkU7fNvUbjXaLY6Xv4dg1QeqW0JZlSa0VVcTOKdaaca20rMXjo4LcaCQCl2udodTExMTCduWYSMQfOPAKjh9/B8feeEsokcLIyEgMHEyYjt17nsfxE+8J6whsErlXhoZQ0jRoelzlEOlngkGRpDBE6WKJY1QeFXld4W6RXs40ziybDkcVqyskEokaR9pWS6WSpvWJ+FAoZJAcKSttcpESicjtfTuNNIULlJW7WN0oh4qOQECUjY/JkMfjyOayIj/QsWnF+lsJx6ZbU1NTwginT3+yoExVVSSTSYPER4GuSBST6TTGZdk4247enY6duToUVCwSHmQU1JcyWV5+9Cc16231UCDLY0gk5vLv/v4bYrFhkd/e0YFSqWjsYZCCR4avirz79+/hm6+/Evk+nw9ul7ti7sXnpm2cIxgMocXrFaom87Z4EdzcabGvsGw6HFMsKZIe+2PHXhdHVKy8zpw5g1QqhVwui5YWr9GG0pcvf7nAD5HRu72vyv8P318RVon+3XuWvSYi9/pPMfE/0tX98J1cBiaDlyaUYcVoIm5m8pgsHndSWpPLZdTRyotJyickUymR1m90uCuCzeWBhrA5GMLBg4NwrXODa/Mr0Y0bfejv323Ua+8I4NChw2hv2wSuMUM5YsDT5q29fS6eUvzu7euB1lCwZCU2Y9l0OKJYIohsKbywd6+wxSBlG/kPeIPQ09snTAdj8/WDwU4E366e094cl8vlwaqylUY1sdz6/gdfsc0Mbhz5vNyWrAWzFa/J0rUS9ARNTt4WN6+np7emSb8drJltw+vXY4LccDhqxHwnwX65dWsXjQUov/PyeNxwu1yWTll08KY3cItvMcqw9c7L5ktQO74zk7++W3/n5SCqN2E0jlLJmloql3BWYOfOc5sxkNvxbVNOq24TZq2hMFug+B2GqWLBM/S1zFonqRbMzhS2SlJTGFAhMcbC+hSHHj9VnWlTFbX+zVaNYAwt69evF4qdYkCO3JRKJdoamn0cO7RawBhTJUn6c8H3saOjN+ofbj48rm7b9uyuxTG2v7W19RRjDVsfxx791ygWi+fy+dwpugy2+F1/Op2mgvAa5GUlMPdFN4B/AZSxlI7bVRoKAAAAAElFTkSuQmCC'
VIEWHISTORY = b'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'
SETUPICO = b''
LMSICO = b''
LOGINICO = b''
MANAGESTUDENTS = b'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'
MANAGEBOOKS = b'iVBORw0KGgoAAAANSUhEUgAAACwAAAAtCAYAAADV2ImkAAAACXBIWXMAAAsSAAALEgHS3X78AAAEXklEQVRYhe1ZS4sUVxT+TlU/bLudTIMkQ2YRkVmIGCEQsogayCyyiwuzzTI/QMjWrLPxf4gL/QdZiGuFgJDIhBjUUQiSzPQYp2e6u47U496699Z9VYOQBi8MXY9b93znu+fxVQ0xM1ZpdEJYT9OWnDPG2a8JWP9wPAy6WNAQSwYxFpv/YjQe4vVvPWCGvd3p43vPpr8fm1ODgL/Hndv1wriW/2yfPeMGyhKu535zDm9OcP7mFNjZwMMbc/QTugvgu9aAmfhqjZc8QJog7djZfn/3FIApPr6S4iHmubWr5pNRgEmZw8XqikEHmy4WfU6IZyj1YwsCnkMJIyohz7IjZ3iyDSjrh/lOpUhBRA4H3CMIeEoHumVi/DefWLDYjuxsEhJ0qIdecgJpGII2itl0aiPF9o/XAXw+3him4426Cpz56bJiqrQ+WRsWQNhGjXK9v5jhs+NdXPjoA3n79s4U8ydzXHo8wmiR4UQyLByIHfEz/ydj5QCXAbR5cZvOfXMzPxxsrWO8tS4n7GsJU57so45NRjP11YR8ygN8+8mePL/06Unc+OUv9I8JX/7ZRYf76FIvOu9ExK9LK9WvtWSp4M37bCZbeXaArrbEWr80+XqQGU7HQe6IR4izyiqXTcCeT142pbMWB22DUdlqUdc60pAEnNVsuYqkg83mdHYTp+BsI7/Kslb0BJVh+zJxbHLTIQdeOHYtCDg3TtlCYVipsFEawWBSMucDIUKPc70SBRZ6DNeA1SRwaxfLdqvNJAIDtyNXAVzFMOVMC6+dCwXY9FUSG9plGCbBMKsx3AR3eDBz6IT6aq+fIukkkRnFtiXCgIuQyJQq4cjuNwez4IJJSuh1KIjXDId2jYMtVcLi+mDUVFamY2lK9bVQM6gQc0xZ0QAXDyzq+HU0jsGoq8elyY64x576q6BlZSdbMUxVWaMKuATiaRzQttTR+XzMmY1j2dZMZuNwyQnDgPZaFM0aQ8Rfyxiu67Ds7TajEWy2ynrWiI4aK6qH8yEbRxbM8lhN4QtL9oSXb6wmwySSriprqsd2593x2vigEpRteWtuCVhXa2zNeFi3Ha20hQ60dE6W7lbyUtMS2dJKTQJtkfa8lPhhXUu8c6Um+hzbti8CsGzNwpLo8b7tdDUWE2gwhsWUViEBo9O5DUaxGRkVdY9rGRLgukpwAdyRCKYfPqBRtbV2vl1rzqdX4od8r/lepaaUQoRJUyvoUkmXiHe6LKs1SUipmUB92sK1UKAjWgGL6kBCOTliWK/DbB5K1E3B5MJcgV2qcQgdrH5IsRiwHPo7nxdx+Wm7DcuiSuzVdVh0n+YKOpuWLbc0jzXS3wMnR/Pid/SG0KU+EiSFKRqU1w9fyRVf2AAX4mcxeXmPssVd4mwu35zNxGAFcbWV0gGuq4qasMNsimu0g1eHC/l369e/ce5JF1/8cRo9Olk6SIz0q+c4+ofw4Ofizfzlo/37P9gAr9w/Ft9/gX/XY7UAA3gLKaROu+0pE0kAAAAASUVORK5CYII='
SETTINGS = b'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'
LOGOUT = b'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'
BOOKISSUE = b'iVBORw0KGgoAAAANSUhEUgAAACUAAAApCAYAAACyXOB4AAAACXBIWXMAAAsSAAALEgHS3X78AAACIElEQVRYhe2Yz0sUYRjHvzM7Gu7mIZQUrxoRhNSh6FTnDuJ/IHjqpgdPKnQIuhXUJY9e6hqyCkKHaJFS14NiWyD+QNYftWnkDs7O7M7M+8S7GdK6s/vO7ts6yHzgPc3LOx/e58sz7zsKEeHJq6lrWsvVu9BiXVCoRYGiAED0+g00CCKQyXLZfSro77TEYir2bEpfg6orpe9v7+9ulNQJUT4GVQBXoOKM0HnCpSJBEsKJVODQZAl1xhQ87C6/3HLGxUqGCa8lT+qygsHepvIPV+FLKpDlu9iZ4uW5/zonZa0w6KJc7Ex9PyZMrtpln/Hy+UGelOEt5Zcw6KKEHV2UUEqUUEqUmltCX4+G9ujpfYP3KS9udaj/tIvDHGF6w/GcX7PU5hHD8J1LaI5Uvwjd7ogUB8e0CSPv8xXn11y+r4cML5L+PitZizAwYyF1ULmR1pWpmU0H8XXvMpSS/OYiY1DVeXUH/XmygLkdMbH5PbHTQt1SRMDTTwUcWZV3IJ1lSKQbJMXJ2cDslvduGTZhLJGHLfhNltan3qRsbGfPvvXjrotHsxbSevUsSZfSC8B4Io+McSoWX7cx+iHvS0iqFGdHJwxMW/j8g+HLAcPLpdpOotIOeX8xHeDx3J/mKJqh/y7F+Wn6K1cpAT0lEPzdfxoA36lfYKy+/ZaM+uDeTcNp0iaCIkREx8VMmdvxIXLdhXM3cpz5Nq31bfE/eqAA8BtPAN2CzKnAAQAAAABJRU5ErkJggg=='
BOOKRETURN = b'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'
LMSABOUTICON = b'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'


class ImageData():
    def __init__(self, color=None):
        color = runQuery('SELECT color FROM settings WHERE ID=1', receive=True)
        try:
            color = color[0][0]
        except:
            color = 'blue'
        if color == 'blue':
            self.color_blue()
        elif color == 'red':
            self.color_red()
        elif color == 'dark':
            self.color_dark()
        else:
            self.color_blue()

    def color_blue(self):
        self.C_ENTRY = 'iVBORw0KGgoAAAANSUhEUgAAAUQAAAA1CAYAAAA545IWAAAACXBIWXMAAAsSAAALEgHS3X78AAAB3ElEQVR4nO3asW3bQBSA4Wd1LAjb4ADWCM4GGSEbWNkg2YDawCPYG3iEjKARvAABGixYMqD8aEi2oDrRfV8lQCx01OHHHY9X0zTFOd0w3kfEzdmLAP59fVNXu3O/8mQQu2GcA9hGxI+IuPNHAxfiLSJe5r41dfX6eUhfgtgN4yYiHiPi2gwALti2qav2cHhHQeyG8SkiHswAoBDPTV1tlqGulg+5MhRDoCQP3TB+rBL3K8RuGNcRsbNNBgr1bT5wWVaIrRgCBduvEpcVYi+IQOFuV/meoRgCpbtfeekaYO/7yn0AeCeIAEkQAZIgAiRBBEiCCJAEESAJIkASRIAkiABJEAGSIAIkQQRIggiQBBEgCSJAEkSAJIgASRABkiACJEEESIIIkAQRIAkiQBJEgCSIAEkQAZIgAiRBBEiCCJAEESAJIkASRIAkiABpDmLvZgDEn6tpmqIbxjmK1+4HULDbZcv8ZBYABXtu6qpfgvgYEW9mA1CouYHvhypNXb1GxC8zASjQtqmrXRyeMjd1NW+bt2YDUJB5q9wuwz167Sa/+Gn7DBTgd1NXm8Nh7k+ZP+uG8Sa30PPFd2YGcCHmxd5LRLT5qPDIySAe6oZxHRFrswH4z/XLs8KTIuIvFc5knXMUCFUAAAAASUVORK5CYII='
        self.C_BUTTON = 'iVBORw0KGgoAAAANSUhEUgAAAUQAAAA0CAYAAADyv0GzAAAACXBIWXMAAAsSAAALEgHS3X78AAABP0lEQVR4nO3YsU3DQBiG4Y9MQAsVDGABE7BCRmAK0tJ6DCYANoANgCxA5TqZIMjhyxL4eaSrXP3n06vTnR0Oh5xcbrYPSW67AP6z93lN4/B+mvEYxMvN9rwfb/x+YGE+kqyncditOrcYAkt1n+Rpnv3s4vF7neTFUQAW7nrlvRDg6GplHwD+CCJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJACSJAzUH8sRkA2c1BfE2ytxfAgn1N4/C5msZhl+TBSQAWan9q4PENcRqH+ZZ4l+TNiQAWYg7hc5Lb+XaYJL91ZykmI+SpRwAAAABJRU5ErkJggg=='
        self.C_LOCK = 'iVBORw0KGgoAAAANSUhEUgAAABwAAAAjCAYAAACHIWrsAAAACXBIWXMAAAsSAAALEgHS3X78AAAB+UlEQVRIib2XMUsDMRTH/9oOJwj2G9itbnZwcLihBT9A3AQX9QtY/AQdBEc7SHURurvc7tJCduvoZDu6KTgE2lIJvivxTHp58eofDtJc8n4vee/y0rX5fA5fCamqAPSzSVM+AYySOBr52vACCqkEgDaAXceQgX6fxFH/z0AhVQfAea5X3zpN4qgXDBRStQBcZ7qfAUxpOyuWVR8mcZSwgRSv1wxIZOMlpKoD6BngDx3nJI7ebXbXncsDWkZ7DKBhS44kjoaaSyCtLQAnLqPLgMJot10eE1Q70jG6eEDapm3D4NJEIJljXNnsXGHVaA88YOkqx+lvIVWDA6wb7aEPkJR7ACyLYSpn7HKAddsAHyBHlTxHWWdpESp6hbkqmwOEVHpLGq79D5BOuL75DS+2VEh1DOCenCgVBJzRuXuRxFF3AaRv5jG74gKlwQe6fKUxvGPCZvT4qkSMRdLUGJMnAPa0x9T2VQ2BWdrVFYKqe5c7mQucZqpCj7m1bGDZrIlUC1kZzQWOLX1vqwTajNucKASo43dl6b+ld4UD4aiNo1UBJ5nyY8q75HCAGwBuLP2X9M5L3LNzX0g1pGt/CtvhGOACS3QjewicH1wdgqtKGsOnUAMMvZjAs38AHi2AdCY26f+B9zflIW1L22wS4/etzXVjDtWPP6kAvgCEk6BKvAkjFgAAAABJRU5ErkJggg=='
        self.C_PERSON = 'iVBORw0KGgoAAAANSUhEUgAAAB0AAAAiCAYAAACjv9J3AAAACXBIWXMAAAsSAAALEgHS3X78AAABlUlEQVRIicWXzXGDMBCFXzw5cEs6CB0kBWgmdGB1EHeQlOASSAVxCSrBBwoIHcQdmJtuZBYvHsDoH5J35edDK723y13btvCVrPQOQAEgHzxyBHBQIvvxfY8XVFZa0osBPFhu+wSwVyI7J0N5dV/OL7uopkq4wBsHUAYASc9cEausUABlALDXVla6iIJyWZ8ioKSPKCiAl0ggafsfUKpUbrrm2tMUPcZAnX6zSYnsOwZ6TGDWtos2KPmtiYRavWqEcqrE+PTkgvrEoHJZYKCGY9C4n/A5vUpkksPcpZMPEL5dBpcVU7RRSslJt6FDUyqROTM3GLqk1gwHo+5DbuZou4k3JbIgT/ucXsl7WTgmh5qtcnA1cSOUYWVEe2v4udIEn4XKStMXvwXCpqKV7+YsdANdCNhrNixGUFlpKsv7QsAhOB+W+moZNv/SQPDhGwXH0KfeiRKh0bDWQROHMF/tpyuVKwNJr/3c1EN9W1equsVtXIPxwir6lf4l9Fpe46i4guhfp4MmDdUxotZG/kwZN4MkK53/AuFhkw7QzrsNAAAAAElFTkSuQmCC'
        self.C_INFOSMALL = 'iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAACXBIWXMAAAsSAAALEgHS3X78AAADDklEQVRIibVVX0hTYRQ/9965O+eaS3TTQFeaIsJgsDeDzCZZWkFBK8uthwyC8F9vFfayCHqS0IpIsDSWT6EkZRkUJWGpLzkwlrqlhTlipru6ud3dxblxxyx27yb2g/vy3e+c3/edc36/j4hGoyAFkqQIta6wTKPVlynVWdkQjUaZ5Z/e5UWPc9nrdknFi5IoM3V5xipbi8lssep2FOTRNA0EQfD/MC4QCMLC/MzX8WFH96fXjo711SVf0iQEQRKG/dbmQ2ev2rNztCohcSJgjoXvc77BrmuXXKP9DyVJqDRafuDczd6Kw1aLTCaTLGU8QqEQDPV13h7pu97IcZFY4g1ZCJIkqs+391YetVlIkkyJACGXy6H2TPNF4CIsALQI6xsyGSqtzfuO1G+KQABFUVBd19RUZKo5GTu8UC5scmPHuy85Wl2GWJK9JQoIhDkYc4dEyebc0z/utlYUh4MMEzuyscrWmp2jFSVA6LNlkJ8l3av8nUW5peXHG0AoF+rAZLbUS00R4tF7Bp5MrEnuw1wm8ykbCI1HoaEOpAJLdDIwFtDgD3LwfDIgSVRQbDCmq7Xb+ZugklFoUnAtspCbSUGehpLci1AqlYRaq9/Fk6BVJFOqVIE6U6g0WX8an4yBbQJ81ihwPAma3f/giURYCPh9Pp7k16LHiWa31WAYhlvxumd4khWv27UwP+PZahLP1MSHIOPzx8Q4Nux4IFWyzHQScD5kJAHbFOKDwnEcjL963A3x3jX5xtGBdi0WSMsAXjgD8NYVhDRKnGTW5XRPf3zas4FknVnC96AV7ToRvH4OPi+E+c+3yiXct7a2xg3eu3yBDQfX4W8Xdo329wz1dXaybET0lGLAQw7ct7d9mxp5KWz759FCH9tz4kr7wdONTTRNp6RQvMFAl71t4tmdG/HrCd/4IlONpbbBfgvdVMoNsMnYAyxR/A0kSRBpCpWqtPxYg8lcZ8vfbTBmZCgJ4UlmWZbXAY4pThE2WehBSiTxSFdrNWqtvhC9CK0ClbzinZ0JMkt+qdikSTYNAPgN9btUmW3FI0gAAAAASUVORK5CYII='
        self.C_EYE = 'iVBORw0KGgoAAAANSUhEUgAAABkAAAAZCAYAAADE6YVjAAAACXBIWXMAAAsSAAALEgHS3X78AAABxElEQVRIie2VPUvDUBSGn7Qi8QMEFXQpCBUc1VWzim5m8AeIrs7qD3BQJ4eO6qqDQtwcHFNXdRQUxIJU8ANBbRAkcsy9mqS39QOd9IVLm9zT89xzzpvUCsOQ31bm1wn/kK+q4aN41w+6gQGg27B9CJx4jn1fL4fRXSrxmFpdnzh4EdjyHPvwQ4jrB63ADDAaDxpuh/GukI7G6LryDAd3sHFh8ficyHcEFDzHPjFCXD/oBRbSJ5/OhQy1R9+PVVME1tkIpQosn1aBREueY+8mIKo9q0BLPLKvFWbzIecVKJxZXD+9703lwtcK929grWSZuvQG0u6aTwNEI51RlZsXSYBovWRx9cRrlc1ZE4M51R0yrh+Ic/pNUfrHxzW8U7yJKsg1mfcBR1dS13711Jz93Hsvo5ywbdrULZLZmDTYFn2KAQx6AN5n4jl2QdkvIf82asdMT5gANWWjwYvD9q4wuQtl5TIpC0uaFSAfjxQHSUKRDFqq08AaFpYKFj3H9vWNqife9YNJYCLuNkkqTtPtEVDxFnbKVdYtxiuoCYlVpV8r+aqApC6ls9L/9JNeF2IA9qqlJ1PWK33qb0F+Qv9/v38RArwAnPet+d3gEFoAAAAASUVORK5CYII='
        self.C_PLUS = b'iVBORw0KGgoAAAANSUhEUgAAADAAAAAvCAYAAAClgknJAAAACXBIWXMAAAsSAAALEgHS3X78AAACt0lEQVRoge2av2/TQBTHv7XYGJKpEl4I3a2GlYUM/AFF/AGYiZFUSHjNekOldmRLdoZ0hqFdYE3xHsUqOgmWwtCFDkHPPAcndnznn/FJfKRIjfvkfL939t29d7e3XC5RB7bn9wDQB1I4F7X8CIDSBljogD/099OM8ADAAgAZuqjCWGEDtue7AFyFYBW/AEwBnErhzBoxYHv+CMAQQKeE8DQuAYzy9oq2Advzj6ilADysSPA2JtRAUjg/dYKVBmzP77Lwl5VJVEOP1pFOb2QaYPF0k8MGxcc5lsI5zQrYasD2/D6Lr/pZz8tECsfNZYBbftEC8RFnUjjDtH8kDJR5bJ4c3FfGXN/c4frmd95bE6+kcMabF9MMjIu+sFI4ypiTTz9w8vF7kdsTjzfnCyv+hYfKJkebvCR6YGWAH51EQMs45Ik0aaCm2bUOhtzY/wzwhdS3vIV04lqjHnANaf2IVAMm0eEBBxav53e1VCjDXwOciJhIaGDvwbuvyomLZtgPrw8a8/hlfosX7+c6oY+sKG81lB4Z6BtsYGAZNnwmsHLGt47/BnYNGbgyWP+CDGiVL1rK4h6nj5nVNUoDKZNS8fbZvjKGJqnP89vMmG/6KeeMDChLepTD6qSBOgZIfImUMs4VFb8s7gETCXVbXMI7N9BAmP5a8S8GEUTVidCAFM6Ua/emsErs4xPZyBDxQbzAtTLAFy93JkufteLD5lKi7ZWJc37cV6wZ4BfjeCfS1ARpxYdt1enC9dGaoA2PQdo+WupqlOvxk7aLR9ZyuiUmMsVDlQ+wibNapKkJVOKhk9Dwzshzbo2moKVNX2fvOM82a5cnuzc1mgh4i3WqERtSZKO7x0aqHKUC3uTOvSYrc9Sgy+OyW7C2Gh0zGJc5M1HJaRU2QwWy6MDHtmofCaXdz1nRsxFrAPgDxioLOfQ7LhEAAAAASUVORK5CYII='
        self.C_BOOKS = [
            b'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',
            b'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',
            b'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',
            b'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'
        ]
        self.C_GENERAL = b'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'
        self.C_PHILOSOPHY = b'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'
        self.C_RELIGION = b'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'
        self.C_SOCIAL = b''
        self.C_LANGUAGE = b'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'
        self.C_SCIENCE = b'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'
        self.C_TECHNOLOGY = b'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'
        self.C_ART = b'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'
        self.C_LITERATURE = b'iVBORw0KGgoAAAANSUhEUgAAAGQAAAB9CAYAAABUO8YHAAAACXBIWXMAAAsSAAALEgHS3X78AAAM80lEQVR4nO2da2wcVxXHz4z37cfuxt44fsWOnYTETtIQUNtAApEaRCAJFUUoEFoCqNCI8GhICUEVAj4AoRIPqYAQjSBVU9p+IE1ERAtCwqFJE1oU0jZ2ozzcJI4fydreXa/34R3vDDrXe+3Z96w9M3vXOz9pZO/s7p275z/3nHPPnZ3lJEmCfOw+2rtpPCwd8IWl+yei4PQGJXveNxlAk5vzW0wQdTu48zUO7hd//lLnmXxWySnIZ4/0Pn5jRPzhgE9yGeadP8s83HDLIv7xF7/S+VK2xjIK8sizva19XvH8e15pCdOfsETpbOIv/vNbXe/P1Ps0QT73x95db90SjwUikqncDaclnmousq6FX/3cns6b8sMkCYJivNEXfyEqALeAPjuzZBKFp/+gm3p3UPyTIYZ+YHJ0eUi8KD/gjCBDAemEkT3pDyZMO37X8zI9MBEE09reAXF9+ZiBLXoHxQfRQwEVZNAnHS13oxQTDBO+kPRr7AKPylwZFjvK1hqMcP2utAN7wocmpb3lbgwWwGkGhg4+HION5W4MVojGpO18VIDmcjcEK+DgQJdVW+6GYAm+dLpaHhiCMIYhCGMYgjCGIQhjGIIwhiEIYxiCMIYhCGNotm7+5AN22LDcnfX51/uiSY97BidhPCJCv0+Aft+ULlaqsfOwpsFK/u9qtECNvSLve8YjcfhvXxD+Nyhq0idNBFm/OA4726KwtD37AuTGHM8hvUMxIs6lwRicux6B1/si8+pTi9sE27oqoavRCmsardDZYJlzW5fe8sMXTwIMh9Rf7dZEkH3rhXk3jQbD7eOdlQBbp0fa33tD8GpPCF7pCZHRlA80/q4PVBMhmt3qftTv3TsJ+/9lU7VN0EKQbW1T0OHSZjijOLj9eKcIz5wJwDNn/BmF+VC7HQ58zJ13FM6Hezwi8QQX7+Z3c4WguiCfWam9/6+x8XBgq5uc/Yde6IOhsWl3xpnM8N1PtU6PKh3Y0yWwIUgdNwqbTOfS9jfXuaHDlX5B3lRMgKDfP/PYYrMBXzH7Qaw2a9JjpaAb+vaqIRgfHSPvqHK74b7Ozrl8JBDjcZiMTiY9jkVnEw/3Ys/M/2YQQEqMkq/WdYM3MJHW3pmpjTAyh5WNOQvyoOlU2v7ats9nfL0gCODzjuRtF0VBcUxmM9lslZV5xargZzN3sym3qHhiTEajxNCx6CSI4rQIaPx8yAUxcVMgJP7f0RaFsZ50W1yOr9RPkGzY6pbP6/1omEgoPLsjISKKY690gKO6GiprqgtqLxScgGgoRNqdEgQF7yoMe8NagJ4TqrWnqiAme/Z5x3xAQwb9AbKhMA1trYpau9N/O1lgDcDPzJvtIArzS8spulxQjW6nqWMZWG3JaSK6DzE+nSXFyP9xiIbDIMQETc5mOTjqsD+WhEu0JPpmRndpMSe9Np+olpomiI5eU6dfqrSSBxIbMsQBuUB45suh7gsFCo0H5y0QGhyPYXM4yN9CkojUvmkJs185QINhvMCtdkn9TKYmisrnOCgCiTvV1WlnPavoIkhq2otgBkXhK/g0d5YKGlSe6SgBhVSK3H2mpryQkmVpiS6CZEx7s6TBxJ3wFcS34xmOQql1dsvTXnSFoCA+UBaUIIVADRQKBmc7mUh7cVRVVlcp9v807Q2PByESDiuabxSbkvjamjztnWAs7VUb3dLetlUrM57Z1GBo9KlYjMyg0cWl+nC1QXeIKS51jbRvmTIqPUeWbmlvNrKllLS2FA4GiWjzFQiNju4O3V6haexc6mxzhem0Fw1HjYcBGeNKIfMRrdJek8UGgqDNCNZFEMxsxobvzDymWdRMJywWErhzpb9oUGftooKOqzTtTa300qqBHHmWxfHajRhdBMH8PjW4yrOoVGjV10JKGzawOxyqnOGTiSovxipMe+NxUbErLNu0F2RlE7mINPWtcrkUxwDq5qLYlpH2phzIbAZzylleyBlKU1/8a69UlvZ6BweNtDcTeEYvXZl7rQTPZpru4oY+XcvUF/skXwiDLJVevWHGZaEhcJO7IzUrvnSBi1Z9WYXpmXpqxZcGZaVgqR1jTiHllmJTtGovyNJdUOgurIlio1KUZkbUXYKsYpDKwq/2ZoEGf3Qt0/7dUZAIuaAz/qlErFJ6gQOUc9pLzlBBSMuOcLaN4hQy66ZpLy2/lAIlc5MyNCw1rtJqr5H2ZgGzmvau1Vmfp0bDy3VwiRbdidaGxD5Rt0gvcGAh+2JihFBDpBoEsyqcZavhcqjLUzMmaQHTLotmVVhUpKt/hUwWjbQ3C6nVXjSUHLpAlKvai89Xu5wA4FR8XL0yIzUpSrU3n/uhqS8Kp9aFDjjTxxl/anzKFduKAZMuK1PqiyLhjL3K5SwoBgRGx8im9ZWQaqGbIHSNQ04hEzM0KBoWz3DFFzncup1z3YVFdEt78SKHXNAL1TD1ReOrUe3FrxvIoWsqtFzDIsy4LGuGuQCt9tK0d65uB9t0eTxMV3kpJVPthUQyUIgouHaPVeJC1+KLSUnd373QM9zT1FAy8w/Kgr6TQ6mJAcatNdjDEIQxDEEYQ7OgHpkIwYXu18j/9PIdSNSx5MHZlviaGZZKsBCI9apizBPoZUaI7653Zj+WW6Kpi2VObb7cCloJIkSCMHLHm/HrZ+QDhuVffc7QKbOZCOPy1JECodtTp1rfcCmZXDgXCoHfOzJzVUshTASC4Gls1OSSUk0E8Y0W9l3AVKYSa/C4vdd7mTzraWwAT1MjSWULGUHegSHweb0w4Q8oXtfPhxCbhDHvXaitb1ClPTmqCxIYHSEdVhvv4BDZ4M1pcbCeheJkYujGLfAODE6/XiOwxDMR8EOVU90fsFNVkMmJUdJJraHiTJfnrTPrKziyTp84pVtlN+gbA7tD3dVHVQUZu3YWxMmQmk2m4RuNwtV3fYpe277CBXX1duAcTZr0BUuXY/0TIKn4s12qChLr71azuYwMvjMK5/92U9FrKz/ZCos4vAHMm5r1R+1LMUpuHtK0VPnNZzz17Fd3Uyk5QWqcFli1Jv9tj5atcELd4tL70bmSnKlv3tpMDJ4NfG7r9rZid3NOzCmG4I25Tk7t0L2zG/iL0MLfBqu1ArY/1AEDt4LQdzUAI3emPXldvQPaVziT3FpEssM/4g/o3te53LwM5iPICUF/QS7w98Ahyy/Bzk3fmwoNny+mHBH2wIV46fxEY0m5rFtiCxyOfQdGpfwrgDgyno7tLSkxoNRWDCEhyhPRn8KminPkRpzv468kPd8vNsOZ+EayhaXSy7JK9ie6qdEXGsZ6CGMYgjCGIQhjGIIwhiEIYxiCMIYhCGMYgjCGIQhjGIIwhiEIYxiCMIYhCGMYgjCGIQhjGIIwhiEIY6i+Yti6yAznDrZA46G+pP2Dh9vh4PEReOqh5K8WvHYtAr/p9sNLjyZfOH1zTICNT/WT98k59sY4aUeO086T9297emBm776PuuDJTySvvf/klTH4yAo7OR4eV943PNbSRaa0fuCx8Jibl9uz9lFNdF3CRSOgUPjhUBj6YfAxPrfrSOar1am41PAP31tDjETZubYK1jVZk/b/9rSfbChMa61pRkQUJF8faT+wTTweFS9XH9WipFxWICLCX98OEWHk7NvihLcHJuHh+5RfZqoEbBM3HDl6UVKCoDvcua6SCEPBUYHgmYvP42hTC2wLR8mtMX1+3x1YuuoEP7w8Xsj9s3w/uiG5u8JRcew/QSIS7v/GFldSfJhPP7BNjDvYFxwlufqoFswIkss/436MORi05aODnsG4yQM4PkZXM9d+/PtqBNY1W+Gx5++kPWfEkIQhcBT84QvJvweCowHPYAz6dMNRki+WuGQxiMYjf2T2zkE4CiGRqelNycQQNJI/Is6MBBwduMndF3ldd4DEFYwnmcCzf98WFxlFCLaHggdSfij/4HEvEXbnWn1+m52imcuS+9rUeUMmlPhnNNKr32yCm6NTsHnFtBiphsT3oYHRmDh6UkFhMQ3GdiCRST32/N2012G7uB/T3puJoK5HDOE++LN3fAM+Sf+xaZDGuhb+tFE6YQxDEMbgnQ7uRrkbgSV4mwkMQRih2sad4Kts3IvlbghWsJnhZU6SJFj9o0tCICKV7Jd3FgLLPNzw2SfWNJCg3lrHnS13gxSb+hruKNAsy1PN7bGZQSpngxQTTzUXOf61ru8DFeS5PZ031y/lf16uBik2qxv5L9MukBhC2fKrnmtXhsWO8jRLcdjQyp849fWuT9ODJwkChii6snIJf717f1fST6CmzdTxBfjCBWkBhsCRkSoGZCud4Avv7+APO+2cfmuXZQIG8A+vqNgvd1Ny0lyWnEee7W0dj0g/uDEi7fYGpdK71xFDNLk5f6OL+8vJvV2P5upVTkHk7D7auykak7aHY7Dwbp+gIQ4LnKu0cr/HTDbvYQDg/3b1/D7CQW3lAAAAAElFTkSuQmCC'
        self.C_HISTORY = b'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'
        self.C_HOME = b'iVBORw0KGgoAAAANSUhEUgAAADEAAAAwCAYAAAC4wJK5AAAACXBIWXMAAAsSAAALEgHS3X78AAACh0lEQVRoge2YTVLjMBCFH9Tshy3ekAuogBOQG4xvQDjBJBu8BJZaEU6QcAPmBCQngMEXmNloTU4QSqm2K3HspNWSQVX4q0oWtv6e1N1qN5bLZeu/4+u3fptzHNi/tkiy/AjADMApgEej1aCNqVoTkWT5GYApCSiYA0iNVu+VtrNqf6NVnzvXYYD1bkECZhUBlgv7nN5Xn1d/bIKLSLLcmswLgJ8NTU4bhIgJKiLJ8lsAE0ZTK/CFBHvzI8Qg5MBjAJeOXSchTsRbRCUCSfjtuwYvc6JdfPUQEASxiCTL+3QCJ18pAFIR5JDPOyLQp+IsIsnyMTMCFfwHMAKwcJxnyG3LvrHJge0N/MthLX8B9O0NTf7z5Gh+rFSFJUIYgR4BDNdTDOE45UY0NdgrYi2FcLH/B6NVrTkI7xQrZGC0eq17uVNEkuUpmZCLgCuj1XRfI7rdbxzGXVDyuJUsNoqgCOTiwI2TNEFz2FPx2qRaEUmWT0Me9y6E5rrh8BsiyF6f4JYK73U8hpAezevi8H9o495LEcKBgn2teYTwdCVCeKR3RqtbwXp3IjDlxcHx9VuPkrjgEUgK3db3zO6jQ6PVPzIjLudtCiC4AWJutBoXudOQcpy9SCJQS6xCOooEkCJLGsniuAyKiFhmsbTDo0gXPKdcrMCmNaULbKTi1r6oQ0E0oiiUjyisbkTFuu+JlPzjikRFg12P0eqserFuFQqoQY+zcKrc1d3u86KCR5+xz4zhxPdOKxXAz6YTEQudiFjoRMSCb0HZJo5HNc/FX3kSvETEktF2PhELnYhY+J4hlmqoLrDSeluAWxub22eFJMS6FIFduHCsPJZ0PhELHHNaLxx8Fc2ZAYAPFXWTVE0wR/EAAAAASUVORK5CYII='
        self.C_BOOKHOLDER = b'iVBORw0KGgoAAAANSUhEUgAAAnkAAABACAYAAABm42HtAAAACXBIWXMAAAsSAAALEgHS3X78AAADbUlEQVR4nO3dTWtcZRiA4edkPpLUgWoo2KJFBBeC2E11U9farrowG7FiRfAf+F9ExZWim9KdG0EXFopiRSi1q4KIXUiqEjUfM53MOTIfNHUlYsH3PHNdJHBOJhOek9ncvG/OpGqaJgAAyKXbhqu5+uNo9eufRm9EVMejPtiJg+Ef0R8ciYiHN46uFTDhQhPXLp7qfVrELADAUmtF5L3yyS8fV1X18vS43v896u3b0T3xzOyxp052/u/x7mkihhdP9dYLGQcAWGIrbbj0qqrOFzDGP6oiClpWBACWWSsiry0rjgAApWhL5AEA8C+IPACAhEQeAEBCIg8AICGRBwCQkMgDAEhI5AEAJCTyAAASEnkAAAmJPACAhEQeAEBCIg8AICGRBwCQkMgDAEhI5AEAJCTyAAASEnkAAAmJPACAhEQeAEBCIg8AICGRBwCQkMgDAEhI5AEAJCTyAAASEnkAAAmJPACAhEQeAEBCIg8AICGRBwCQkMgDAEhI5AEAJCTyAAASEnkAAAmJPACAhETeA1Q3TZprAQDaTeQ9QH/u3k1zLQBAu3XbMH2991tM7tyKmIwjOr2IponxD19FNJO4FS8UMOFcPR5HxCMljAIALLlWRN408EaffRAvnn40Xto8G1ujtTj9WBXrvSoivitgwojt/Yg3Lw0i4okCpgEAll0rIm+6glf/ejsuXHg1NjYG8fzgoej1egUMdmi8PSplFACAlkTewvpaP7rdTqyurUa/34+qqoqYa+qbG9OtWjdeAABlaNeNF9XsIzqdTlGBN3X5egFDAAAstCvymvla2WQyiaawtyvZfLas6AQAllurtmv3R6NYPzgSw+Eo6kldwESHnjs5mS81AgAUoC2R9/PKscePf/Th53F281xs3T247+7aMuzuT8cYFDMPALDcWhF5Z54+9tbVeP29KxEnvvwibkY9/LZaifMRcbT35JnZPm5TN7P3z5tt6NbNYjt38bXp+X3Hs+9vFueLz7+f14sfNT+eP/XweP54c+94/vzpQl59pYBfFwBAVKX9bRsAAP+df2sGAJCQyAMASEjkAQAkJPIAABISeQAACYk8AICERB4AQEIiDwAgIZEHAJCQyAMASEjkAQAk1H3n3fff3tnZfc2LCwCQQ7/f+767tXXnUkRc85oCAOSwtxfbfwHW5s154Yb/YgAAAABJRU5ErkJggg=='
        self.C_TITLE_ICON = b'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'
        self.C_BOOKFRAME = b'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'
        self.C_INFO = b'iVBORw0KGgoAAAANSUhEUgAAAC0AAAAtCAYAAAA6GuKaAAAACXBIWXMAAAsSAAALEgHS3X78AAAEVklEQVRYhdWZy08TURTGD1BTzC0OcWKbtMFiI/WxqY/ELbjtwrLTlcG/QPddgCbda9wrutKNcTZ1Z2ChCzYiihofFUuoGbSGAUanehHz1Tt12k7pYwYYv2SYdJje+c3pueeee07X5uYmOVUqne0nohPi6LcZboGIZpVMctbxw4ioY+hUOjtIRFeIaIQxlujvl8jn85Ek7au6zzBKVCqVaH1dJ11fx2eFiB7iUDLJlR2BTqWzI0Q0IUnScCgUJFmWyefrafn7eIGvX4tUKBTwAncwlpJJLmwLdCqdxU9/PRQKDkejB8nv97fzHFsVi98ol8sB/oaAb8nyLUGn0tkJxtj4kSNDxBhzDFurpaUC5fOLi5zzi0omOeUIWkywyUgknIrFDrkOaxXcZn7+Nem6fknJJCe3urchtACeiseHEvDdnRDnG2V3UdXlG0omeaXRI7u9AgxhQsfjQxQKBS/DJRvdZwsNl9hpYKsALsvyeCqdHbP7fx003hA+vFvApgAeCARuiqhVpSpo3IAosd2TrhX9dZXDAfzqW0IjDiOsOVVwXw/593Q5HgfhNRo9mKh1kwo0VjosHE7jMIDPn2F04QxzBTwcDiM9uGa9ZrX0BFY6pzp7tJf8vi460NdDp6POV024SSQSHrBauwyN5EeW5WE3luaHz77Tl7UNml/6SU/fG47HI2FtkZyVZVp6TJb3u/KA0q9Nujej06MXP1wZj4S1ZVlOiMyyAj2KbM0tAdxtCaOOll8CfyRJSrSTXtoJExD+jLMp7cdvuvtk3RV85OvI3RHhuhE1AgH3MjdMQvPY60L0qIzr9yOKnCLhHoNuTMDl1Q26P6NXXVv5/tvxuFYxxgbIhHbT0tstTMZGCZMnJYz7f0Fj40xbpKaelGEY/6CxY/g/oEs4zQJ6Vtf15t/wgDjnhB07oBdMs3tduq4/B2I3SlWatrrmdWBN03AqlxfKPm0YxmNs4b0sTVuthkZGiVKVl6Wqaj10ofDZsy4C10DdzyyblaHxwTCMW6q63PHA2FoN7PfVXbNmfZ1KcFU2uNbF5Xo+v9ixtYN9f/eGtdeQrjoRrKyqy9PWGl9VWQw1j1js0HgkEnZsHbc0N/cS4CetBfm6EgKql16JJKimapp2tbaDUAUN3+acn0P1creXdqzSudzH50omWVfTq0uY8FYot759+27HAGsF4Lm5l6tie1Un2ywP9eFisbgr4CYw53y4UWegWVF9TJKk28ePH2urr9KpEClevXpjAjfshDVtX6TS2dHe3t678fjhPkmStg04n1+kT5/ySIhGmvVeWu25oEgyiVpfLBZz1eqw7ocPH+EWV+0mnZ3aasnBXVAMDIWCA4jlTnbx6GyJkDaNClc7bbmOmp+iGDjGGCv3ElFIaVZtRQiFVXEUi9/WDMN4gHWhky6uozazcJtREZoG0bk1N59WISJwzmFRAE4pmSQ6th3Lld64zcuY8XXFrX54RUT0B56w88XATBwvAAAAAElFTkSuQmCC'
        self.C_BOOKRETURNICON = b'iVBORw0KGgoAAAANSUhEUgAAAEgAAABTCAYAAAA8/EEfAAAACXBIWXMAAAsSAAALEgHS3X78AAADUUlEQVR4nO3cz28MYRzH8c/z7MysFaqECuJHigTtSdKENOEmcXDkQOIkIuVE+AucxD/gipujA4nExQXtiStR6kfQaC21ndmZ+cozO7s17dZXImjM533ZfWY3M/O8MrszcxkjImCL57lPjt6cPPz4TXgVMNsBVAF8Turvfcx8fGFWrOu3K9eHAHrdd3ds7i0DZ10EN++fWH7WulGOsyfHca1CEi1Pw68DEke1Nk6J6jEGI266tjXn7MhhXcqBOkcOm5clyM8jkBKBlAikRCAlAikRSIlASgRSIpASgZQIpEQgJQIpEUiJQEoEUiKQEoGUCKREICUCKRFIiUBKBFIikBKBlAikRCAlAikRSIlASgRSIpASgZQIpEQgJQIpEUiJQEoEUiKQEoGUCKREICUCKRFIiUBKBFIikBKBlAikRCAlAikRSIlASgRSIpASgZQIpESgRWrGafYBgbrkcCanv2UfZE+gQhoj+fgc0piCpAlQqcIENUAAma2j+XIMSMLsq88wvISm8gfLH12WASXTr5HOTM5tLAkhjRaINKb/r4n/Qs4mmXbz3tQCkpkppO+eIRq7g/WrPIycP44n9V48eCk4sM3i0E6DNTWTr/nRUp7bb/dp1mLk9uriESRxA9HYXUjjC06eO4aB/nXYG/g4NezBOBdj/uQ+LanETwu70/oPEoE06tnbwcFt8DwLz/dRDQIEfgXWVkoDNNMMC2Nv/hdqywJY68H3LPzAQ+AH8Hx3JJXjKHr7qlkYLzzNG8BY96uyqNgKKl55cFyjr4tz7X4dJIL2X4+15cFxPRwvjnmhuKDio1u7AxkDMa0zXZqW61mv+7dqPzF39Zy2YFJ3hR3HKNMDcYc2F8cLzmKNMERQDRDHHqLI4RjEcfwXd/HftqEnKRw3baDQ1Hqq7lro6ZNx7Nu3BxXrTneCqBmV6kIxze7ia51xG+hFMHR4VzR6B9dv3MOKtX14+nWxW43/u6lZWwDKHri98cytKxBc/JWZ+/3D+X2K5C/5/1O+DPkymb8se5V8uHDZ3PrSufXl65YftzFve9JZT3F70mVZe3udfftxH/JlnfVBJj5cO7gl+7FdOLL7sgFuuQdN5w4TAlySJvrcqxuX4vCZawJGTgPAdxVNLFtwk7qWAAAAAElFTkSuQmCC'
        self.C_STUDENTFRAME = b'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'
        self.C_STUDENTHOLDER = b'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'
        self.C_DATEHOLDER = b'iVBORw0KGgoAAAANSUhEUgAAAksAAABICAYAAADmtrGFAAAACXBIWXMAAAsSAAALEgHS3X78AAADWElEQVR4nO3dwW3bSBSA4ZdU4BJUgjqIOlh1sCohZwIERRDg2SWoBG8HKkHbgUvwVqBg5BEhK9KLj2vx+wAiCAIlEcHDjzfD8bfj8Rif1Q/jKiKWEfEUEatPfxAA4P9hHxGv5deubV4/8z/6Yyz1w7iIiJ8RsYmIt4t/5FB/DwDwFSzqtaxDn9IxzxGx69rmbtOksdQP47aG0kv5y7q2OXgUAIBH0A/junbOaTDUtc3Lra91M5b6YXyqE6RiI5IAgEdVo2lXhkNd22yuv+ZvsXQRSodbHwAAeDRZ/3wXSgDA3NU9S6cX2fph3F3eju9X96ZscnoTSgDA3FwE07ouzZ1MsVSPBVjXCwBgrsF02sNUV9w+TJa29Y03xwEAALPVtc2+HpFU3pR7j6V+GJf1zIFnjwYAwGmIdNqWdJ4srevrcqZKAMDs1enSaZvSOZZW9eBJAADelTaaYulHXZsDAOBdaaPltMH7sz9MDgBgJkobPV2fswQAwAWxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAIkplvphfHKjAAAmpzY6x9K/EbF0bwAAJqWN9udY2kfE2r0BAJiUNjqIJQCAK/0wLiJiMU2WurZ5ifc/2LhZAACxjYiXrm3eLt+G29YLAGC26lTp73MXTbHUtc0uIt76YXz2eAAAM1ZW3PqubV7jxjlLZd/SxnIcADBH/TCW4VEZIk2rbR9iqRbUKiKeBRMAMCc1lJa1hSbfjsfjb7ehH8ZlfUOufGhbNjd5WgCAR1T3KO3qIZSr6+65GUvx8YOLGkw7TwgA8CjqTy/5Wa+7A6K7sXTWD+O67gZf1A1PZeJUlusOJk4AwFdxcXbSeantr4j4p0bS4d7X+GMsndWluVW9Son98HQAAF/If2XYU4c+ZfizP7/xdldE/AIoCNhtMbK7qgAAAABJRU5ErkJggg=='
        self.C_BOOKRETURNLINE = b'iVBORw0KGgoAAAANSUhEUgAAAU8AAAACCAYAAADYfF70AAAACXBIWXMAAAsSAAALEgHS3X78AAAAJklEQVRIie3UwQ0AIAgEsGNzNXFumIF/O0TrvN8BYONWtzsBVpIMyx8GB64cRTUAAAAASUVORK5CYII='
        self.C_SETTINGSHOLDER = b'iVBORw0KGgoAAAANSUhEUgAAAksAAABvCAYAAAD8H4QLAAAACXBIWXMAAAsSAAALEgHS3X78AAAEOElEQVR4nO3c0W0qRxSA4eMoBbgEOohLcAehgzgVxM8rrdarlfaZEkgHdBDSAbcDSnAHRMOdJWDDiR/uvYrh+yRkLIzwLvvwa2Z27na7XXxUP4zziHioj/sPvxEA4P9hGxGbiFh3bbP5yH/0n7HUD+MsIl4iYl4/YF0/ZOtLBwA+mceImNWfxTIiFl3bvF46jIux1A/jfY2kPyLiz/K8axuBBABchTpj9lxnzJ66tlmdO66zsdQP40Mtrdf6ZpEEAFylGk2le1Zd2zy9PcZ3sVRDaX3pDQAA16bOqO2XGr3tn5NYqn9Y1iMtu7Z5cSUAALfiUjD99Ob4V3V1uFACAG5KXeRdFn7P69Tc3iGWjrYFeHZpAAC3qAZTGVVa1pGmk5GlRQml7NY5AIBrV++K20wDSPtY6odxv9dA1zZLVwAAwH77pP26pWlkaV7XKwEA3LyubcpC7/0uAVMsPYolAIATJZjmUyz9UufmAAD4qrTR7LDA28JuAIATp7EEAMB7YgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASP3/Pk9MP42NE/OULAAC+pa5t7n7UCf2usdS1zToiftjBAAB8a6bhAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASh1jqh3HmRAEAHDxGxGaKpb8j4sG5AQA4KG20nWJpFRFz5wYAYD/jdl9HllbHsfRbfQEA4NaVQaRt1zZfR5bKkzoV93zrZwYAICJeImIRb+6GK6HU9cNo7RIAcLP6YSyh9Nq1zTKOY6lrm015PSKWpuMAgFtUB426iHiaDv9kn6WubfYlFRFrwQQA3JIaSuuI+L0OIu2d25RyuitOMAEAN6EfxnkNpedp+m1yt9vtzp6DfhiXNZzevQkA4BrUgaGXOu12tnkuxlL8W1mL+mv5ueza5tXVAQB8ZnXK7ak+phGl7blDSmNp0g/jUx1l+jUivpR9B8r2364SAOATua+7ck93/pd9JhfH65PO+VAsHeuHsexmOasPAIDPpIwilW0BPjboExH/ADby4Ow6Oc3YAAAAAElFTkSuQmCC'
        self.C_BOOKRETURNHOLDER = b'iVBORw0KGgoAAAANSUhEUgAAAkoAAAEtCAYAAAD3Ok/mAAAACXBIWXMAAAsSAAALEgHS3X78AAAHo0lEQVR4nO3dwW1bVxqA0WvHmG08FYxLUANBNB14OlAJWhMgaIIA19rNMkoHTgd00oCmgnEJWman4MqPshL7s7OVeQ5AQBCEJ/GKiw//vXx8dnd3NwAA+NSLv7Mm293+bIzxeoxxPsaYX39vLQGAJ+jdGONmjHG9Wa9uvvbnf3GitN3tZxhdjTFejTHeLo+bzXr13isDAHhKtrv9q2Xgc74MgKY3m/Xqup7GZ0Npu9u/XKJoXuzySxcAAHiKtrv9xQylMcbtDKfPDYI+CaVlm+2whNKMpFv/fQDgW7Xd7efu2cUSS4fHT/NPofQokuYY6sorAgA4Bct06acxxr8fx9JDKC3bbfNQ05VIAgBOzRJLs4HOjttwzx+twfVyUFskAQAnZzmTfXzcuw+l5d1t58v+HADASdqsV5fz3f7LdOlhonS5bLk5uA0AnLo3y2N89+y7f8x7Cvx3jPGf8x9/+P3UVwYAOG3nP/5w8+7X3y7f/frb4fmy5faLaRIAwIN5m6SLYygdrAsAwIPZRmfPl48n+epnnQAAnJCbYygBAPDIch+l74USAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEB4McZ4Oca42O725xYJAOAjEyUAgDAnSrdjjOvNenWwSAAAH2x3+42JEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAeDHGeDnGuNju9ucWCQDgIxMlAIAwJ0q3Y4zrzXp1sEgAAB9sd/uNiRIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQBBKAABBKAEABKEEABCEEgBAEEoAAEEoAQAEoQQAEIQSAEAQSgAAQSgBAAShBAAQhBIAQDiG0isLBADwwXa3Px9j/G+G0mGMcWZdAAAezDa6OYbSa+sCAPBgttHh2d3d3RwvvR9jXGzWq4P1AQBO2Xa3n0eS/j/G+OfxjNL1GOONVwUAwH0T/bxZr26PoXQ1D3Rvd/tLawMAnKrlEPfr4wDpPpRmMc2tt/nN7W7vYDcAcHK2u/3LMcbb2UOb9WoeS/p4H6XlfNKcLB3EEgBwSpZImi30drNeXR2f+p9uOLlZr94sJSWWAICTsDTPjKSbzXp18fg537/r7a+2u/38oZ/ml3PKtGzNAQB8U5bz2XNQdL1Zrz45q/3ZUBof6+pqueHS1XKB914eAMBTtrz9fx7YnmE0h0GXdYukDKWj5fT3xXLBebH3y3gKAOApOV8+tu1fY4xfliHQ2y/9/V8Npb9E09nyC5xfAgCemps59PnbN9geY/wB5VfzkkWhzvcAAAAASUVORK5CYII='
        self.C_BOOKICON = b'iVBORw0KGgoAAAANSUhEUgAAAHYAAAB2CAYAAAAdp2cRAAAACXBIWXMAAAsSAAALEgHS3X78AAAEQUlEQVR4nO3Zz2scZQDG8eednZl0i4lN0IrE1FAUwRYKhUIloAeh4M1LPSh4kh6CJw/+B569Cb3WY48eIpR68aClgUp7Eoqkbm1Bgk031U1mZ+aVd34k2zbJ0n1nYXnyfGCZ5U13Zna+vDPTWWOthfAJ1JSTwpJSWFIKS0phSSksKYUlFTb1tea/ebAQhvZbwFwAMA2DjhvPn2wcNcnjn3Bk5kPTnu0CWKw/89bCscN+/PdzHxaXrn92dGXUFXiHdUGLFYX4DTBzO3+wKMZtsons8cOLAQK02rNzB6xKdr1hDS4DODHqMdGpmJT3jC1Pv47RbGyQQXnGG1UD19jimioTpombp2lFnTy6xpJSWFIKS0phSSksKYUlpbCkFJaUwpJSWFIKS0phSSksKYUlpbCkFJaUwpJSWFIKS0phSSksKYUlpbCkFJaUwpJSWFIKS0phSSksKYUlpbCkFJaUwpJSWFIKS0phSSksKYUlpbCkFJaUwpJSWFIKS0phSSksKYUlpbCkFJaUwpJSWFIKS0phSSksKYUlpbCkFJaUwpJSWFIKS0phSSksKYUlpbCkFJaUwpJSWFIKS0phSSksKYUlpbCkFJaUwpJSWFIKO6H6ae61Ywo7gVzU9Y3/vHYsbOxrZdvI1tdge49g8wxoTRXDJm4DFrBbXfTvrRb/rnYXS41tno61Xt/IP2wVqt+5Bbigz4zbXr3c8N7UYeGaZhvueM2P/I29w7pZWsgz5A/vIlldwWsvh1j+6tNi+Hb3GH6+Z/H+YoALbxvMtc3Ap2/4bp7KP1vllXH5h1nvGatrLCnvGeuuqbVk9UfY3iY+//ITnDr5ajF6No7wxVII4yaqMQev7JCzkd+d8CD/sAPXVdvrFsvTpxcRhuXJIIwiTMUx4qiFIGg1sMu8/u1vN/bdmrsrHtA+EiMIylVHYYAoDhFHMcLIzVzN2v08+LPf2LrGEhYGMNXV25gAraCFVqiow9y8Xx8fvxsnjC0sdv8fVl9ag0BRh/l1rbl16a6Y1PhmrIzA/xRcG1/Y6npqTXlWznOr0/EQ771ZHp8/1v0Dj+dU7J4N5+XLBc3zFFmawno+TWF3bqF8NWEsM7a3vY14Ki7ep2mIJHFRDdI0PeztDvT6TP1MwH++NRF2s1pOm/ZM8ZDizu01nD//bjHYCvrFFE76iZ48DZHv/Abb9l6X7opJNTFjr1fLj+NzHyG5uYIr31/DS68cLwbvPDno1x0Z9Girnmf+M9b43tDML199xy1thl8AzL7IZ6OTS9WDDLv7K1X9phrHwLjda7x4b6uhvcefWn89/ty2sHtzt+fy2XU8vy92n/F6mzv7v8++PLV+2M7flz848SLHc5D3qfiv7y7+7l4mzM4Y4CqAbvWnjntZ4Gvbx3G3rMZkuA6MveRznLxnrEwm3TyRUlhSCktKYUkpLCmFJaWwpBSWEYD/AeaLQChyLRzNAAAAAElFTkSuQmCC'

    def color_red(self):
        self.C_ENTRY = 'iVBORw0KGgoAAAANSUhEUgAAAUQAAAA1CAYAAAA545IWAAAACXBIWXMAAAsSAAALEgHS3X78AAAB3ElEQVR4nO3asW3bQBSA4Wd1LAjb4ADWCM4GGSEbWNkg2YDawCPYG3iEjKARvAABGixYMqD8aEi2oDrRfV8lQCx01OHHHY9X0zTFOd0w3kfEzdmLAP59fVNXu3O/8mQQu2GcA9hGxI+IuPNHAxfiLSJe5r41dfX6eUhfgtgN4yYiHiPi2gwALti2qav2cHhHQeyG8SkiHswAoBDPTV1tlqGulg+5MhRDoCQP3TB+rBL3K8RuGNcRsbNNBgr1bT5wWVaIrRgCBduvEpcVYi+IQOFuV/meoRgCpbtfeekaYO/7yn0AeCeIAEkQAZIgAiRBBEiCCJAEESAJIkASRIAkiABJEAGSIAIkQQRIggiQBBEgCSJAEkSAJIgASRABkiACJEEESIIIkAQRIAkiQBJEgCSIAEkQAZIgAiRBBEiCCJAEESAJIkASRIAkiABpDmLvZgDEn6tpmqIbxjmK1+4HULDbZcv8ZBYABXtu6qpfgvgYEW9mA1CouYHvhypNXb1GxC8zASjQtqmrXRyeMjd1NW+bt2YDUJB5q9wuwz167Sa/+Gn7DBTgd1NXm8Nh7k+ZP+uG8Sa30PPFd2YGcCHmxd5LRLT5qPDIySAe6oZxHRFrswH4z/XLs8KTIuIvFc5knXMUCFUAAAAASUVORK5CYII='
        self.C_BUTTON = b'iVBORw0KGgoAAAANSUhEUgAAAUMAAAA3CAYAAACW9yhkAAAACXBIWXMAAAsSAAALEgHS3X78AAABQ0lEQVR4nO3WsU0cARCF4XfXgIk3ogmQ7AhX4qMDSqAESrjrxNEGG+EOTGBiXMFZy7iL930dzGj0aw7X6zXv3+5vkrwk+RGADm9Jzsu6Pe/THv58vbtN8prkiwMACl2WdTvtMTz7CIFy349CCJDT0Q4AciuGQL2dGAL1IoYAQwyBehFDgCGGQL2IIcAQQ6BexBBgiCFQL2IIMMQQqBcxBBhiCNSLGAIMMQTqRQwBhhgC9SKGAEMMgXoRQ4AhhkC9iCHAEEOgXsQQYIghUC9iCDDEEKgXMQQYYgjUixgCDDEE6kUMAYYYAvUihgBDDIF6EUOAIYZAvYghwBBDoF7EEGCIIVAvYggwxBCoFzEEGGII1IsYAnz6vcfwYhdAufMew6ckv9o3AdS6LOv287is20eSh/8f4l/3AJR4S/K4rNspSf4BCKgf/SY6gHoAAAAASUVORK5CYII='
        self.C_LOCK = b'iVBORw0KGgoAAAANSUhEUgAAABsAAAAjCAYAAABl/XGVAAAACXBIWXMAAAsSAAALEgHS3X78AAABzklEQVRIib1X0VECMRB9MP4HK4AO1ArQDuhAxnxnBjvADsB8ZzwqEDs4KhA78DogFeAEA3PmNrlc7s73l2OTt7vZvF0Gx+MRddBcjgDMAcwATEvmGkAOIGNKbOvOqSXTXBqCDACrOWtnnGFKHJLINJcmmrc6j8tbAEx8hMMA0W1DItjoven0kgFYEd/WAK6t9wMAdwC+HJupzUgFZBptVJ8uEVNiQdia4tkDGJc+F0yJSWxk7qHmLpaUob0f97exdTiK7N5Zb0NVxpTIrENlzGrJNJcTJyUIXXoJeY3DZGSVXAP4jiDbO+uoNFaMmBLuQTGoiABFNko4GEQaK7givmUxGwmY6B9CBlFC3BUukdnHuaCqqAUO9tlkl8jsA8wjlD0VG6bE/Exm8n3TcxZfBoenV0oH+0AxTCz1ZwAfDfeMQy3Ghx1TYmXHBFcPg0ghO1WWFeZG7zGFrKyTjWSsMRlTIkVd0sgc9BrZ2lnnxAzSGdmf9u8ZCboh84wG3nGhFZnmkhJpcmxrTWYU3I7jpy6huTQpfIzdTDXPEExXeNdcNtz2i7al35gs+oJbohjayWn3D2TZOY2moooeiUynXl4GHuffZVcwop2fZhAAP5fCmOoHkODcAAAAAElFTkSuQmCC'
        self.C_PERSON = b'iVBORw0KGgoAAAANSUhEUgAAABwAAAAiCAYAAABMfblJAAAACXBIWXMAAAsSAAALEgHS3X78AAABmElEQVRIib2W31GDQBDGv2R8v3QgViB2QAnpQEeeGdOBSQdRnpkhFagdpANDBSYdhApwVvccYri9Oy7wzeQpd/zYPx+7k6Zp4KI6zSMACwAxgIiv7AG8008V2d7lOU7AOs3XAJ4sx1aqyJZBwDrNZwC2AG6tb/WrjSqyB+nA1PKApQeMdF+nuRilMcI6zalWnx6wtm5MNZUiXPSEkYxplYBJANB4VwJeBwDjPsBBJAEPAcCd6Q8JuB0bWAYA195AVWQU4UcP2Iv0XbU1Dfmp8oBV/HUySgSqIjuyp1wi3dBZvmOUz3hKOOKk5dEDN1fJJbDKGXgpjW78K9eDPBv1tNcTn/xGNdvZaqdlG8AR123uMBcr9m4pwTuBHA2Np2eXt/5/nYxvWjfOgDx4S89J36WqyyYnQIZRe6tAmNYZ9K9LOY3lBWHgLJ34s20L34XJGdperH5Syt34NQBMixopotTqCK0LbKCUXso0cD4wEHqTmxwfXwn2NgKQdDeVNqwBlEwD909fxQScjQiMCDiE94yi8bQajQbgG3BriHihcd4tAAAAAElFTkSuQmCC'
        self.C_INFOSMALL = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAZCAYAAAArK+5dAAAACXBIWXMAAAsSAAALEgHS3X78AAACgklEQVRIibVWXWjTUBQ+uc1PWzfbri12mehgWpk4VwQzFlEq4s+TKA7RtwkiiPgg7NFHH/cs0yd928uw4JMypP5F6VNFcTomTOdSW9dlW01omqSRG2wss23Caj+4EG7O/b57Tk7OOYRpmtAKIs+dQ97wWYLyHfJ4w12AaNJQcmtgaJKh5B8CQIoVMmvNKJoKiDw3Tobik1QwHkbeUEMbs6qBUfoG2urcTLUsTbBCZtFRQOS5fk9X3ywTGxkgqG0tvauHtvJerfzMXmKFTKqpgMhzCTK4R2B6R32umetgKHmo5N7eiKVn7/4jIPJckAzFF5jYSHgr5DVgkfLXp+drnqDaC49/x6N2yf/wAB1NTONQ2wIizyWp6HDS6TB9ZNBaTqAiQwzyhiZtAbJ71x2s7ATv5WNAn0y48oTqGbyAvSCWRw8HGZaXyMCA4yEU2Q6molrLCTiFlc/Tt0gASHr8MccD/mungRzabT1v3LzvaE8gCkdmDIco4Sbf9bklIPyMtdwC+SIHEBnc2+/GvlpYd01swzQCyKXploEMWfzROXpCRaYmf+oUfbVSWsAhyhqlpY4IGHLuJWKFTFaXxeJ/J1fyYOrKPesj69L8hKnJLQ/QJw7+fXZRLrTVj+/w5e1qWjhzscD0HY22f3e7oh5nhUzaTlN9Y/GUvv6lbXJcItTlV1OYHOrLNXZHFYUr7YhY5N+fP+59kb5e22vUMsfpGDdFhfa5rwk4JcsSqLnXM7FnT8bq9xs2fasvd+9MUT37h53KOE6OSvFDUZfmr27ux00F6oQSyBu6jXzRJKID9nRhar/A1BTVkHNv8OjCCpkHzTgc56LNggAQxD9nq1nIBgD8BqLjEmqGBY2DAAAAAElFTkSuQmCC'
        self.C_EYE = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAOCAYAAAA1+Nx+AAAACXBIWXMAAAsSAAALEgHS3X78AAAB1UlEQVQ4jY1UPUsDQRB9uQNRUFZiJSlioVaKYiHpYiNYWKilVeBaD+M/SG0VuXpRm7R+gCDYeGmEFIKIjVoYRATB4KFgFJOV2bs9vM0e+GCa/Xhv583OZIQQSEPgeGMAVgDMAhiLIg/Aj66cUzDunqdx9AgEjjcckZYBzKh1kRuRIS89vcr4gyaAPQBVxt23VIHA8Yi4Gr0yxEAfOs4ixPho8mVPLVg1XxcKAJQYdw97BALHKwHYTbAQ+cYyRC6LzP2zDJnN+Ggo2P6GvX2ATOtdd2afcbcUCxjJAXSX5mRYjVtYtXpyrziF7moBmesmbH6mXyXsMO6W7a3HESocpdSvn+isF2UWtncC/HSSFjVfIKbzMhPr9NIkUPg6bvhW9DOY6QSyg6Et7W/jNj7DdVV8AxZI4CFtVxJnB1O342x6a6DwYDHuksCW8eLdM0R2SFqhgwovC936iDPR4DPu7lEGYNylr3mkn1DeUi2oqOjvkyHmJ+TvItgHFybyq6iXevqAhDb/nuzOT6K7VgjJ9QfU6vKH6S8nctVwpk5eAFABUFRryiZllexk/0b3nrq5QrYkbE6bRZEQ9QfNoXhkGKxQ8yju3n8JGARJiOYU1Sx1uCUA4BdJ6sBvgwMsGAAAAABJRU5ErkJggg=='
        self.C_PLUS = b'iVBORw0KGgoAAAANSUhEUgAAADAAAAAvCAYAAAClgknJAAAACXBIWXMAAAsSAAALEgHS3X78AAAC1ElEQVRoge2aTW7TQBTH/7UisUJFYudNwwmoirCEN4Qb5AYtQkhILMgNSG9QpEosEJJ7AsIN4o0XlijtDcyCCYsuqFgVgVI986ZynYlnPP6ILfGTrCbpePz+M28+3htvLZdL1I3wvZGiysSN4qTuZ1UWIHxvF8AYABlNn7c1t5wDOAMwBzBzo/hnledbCRC+NwRwwNdOFQMAfAYQuFE8s7m5lADhe/cAHAHYt3mYhm8AJmWFGAsQvjcBMDVwkaqE1LOm40UrgFudWuVpw4ZnueTeCHQFCwXwAJ3V4Oe2nLhRfGAlgI2ft+AyOgpFOKofO2Q8sS98b60rrfQA+3xiY/zdFy+1ZX5/PcXV6ZeyVROHbhRP8z+qBMxtB6wbxdoyvz5+SC9LnrlRPM/eesuFeKpsc7YpS8AesiqA/7HSRR1jJ29jtgeOOjJodbzhrUxKKoBbv4ntQVPc9ILsgUmPjCfGcixIAYWrXQfZ5i08HPanTW0VqvBPgPzQQ9Kob+v7k8eBbgDf2XuE+8fvW5NIq/XF61cmRR9QDwwNCnaVocNxbF8ZOT1ZvNai3E73if8CNo3Diaa+kpCASpmxDZMMOPYtDGL+LIRRFFVXSPn3x8KoWSg6G3CesrjCxaI2AWR8hZAyS+r6DqfyLuuosWXSFKSchawSqxsmyArQpvA6Rihzp6kATlWEfWt95BayrmckJGE26XsjoEe9sDatAo6Nuzwjvctn5gbZLzQwhO+RiE82tdMipcN0kVJwrnJzZXpd+B4VfGv7pAYgr9hVndoUnQ9oY+UWjR+5UazcMazdTvOhwkmjpukpNB66eIBFPG/f7hTy+WGR8TA9peQTG3Kph3VaWIDyMENF2XPiKedRm0oEhHw6qd0hS0qf1HNSdVKzEDJ8mp/jTaj0roTwvTGnJscWYsjHyS3pfQnrl0Bqe1uFxwldlOmTVxbZuvT3rOpLHikArgHlgxLlW4QmSgAAAABJRU5ErkJggg=='
        self.C_BOOKS = [
            b'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',
            b'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',
            b'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',
            b'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'
        ]
        self.C_GENERAL = b'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'
        self.C_PHILOSOPHY = b'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'
        self.C_RELIGION = b'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'
        self.C_SOCIAL = b''
        self.C_LANGUAGE = b'iVBORw0KGgoAAAANSUhEUgAAAGQAAAB+CAYAAADSr7SpAAAACXBIWXMAAAsSAAALEgHS3X78AAAQ/0lEQVR4nO1dCXQV1Rn+s+8LSyBEEZRFD1AIIBEBJXCsG5RNVLS4VK2t1QP0uB+1wqm21KVFRVs3lroBagGLisoSMERBC0FZYgBlfQQiZN9fkp7vf3Mn8+a9Sd4y772bZL5z5sx7M3PvzP2/+y93mwlrbm4mT2Ebk5VKRJkeJ7AA5Gfk7Sj1VBJtEmIbk9WXiOYRUTYRDbNE7BN2E1EOES3KyNtxuLUMDAlRtGEREd0mS6k6CJajghtpjVtCbGOyphHRMiJK6ezSCxDKiGhaRt6OHH324foDtjFZtxPRaouMgAKy3azI2glOhCgXLO1QRZcbS/WkqCZLcd75lmYEHTBfmcLZazXE8hmhQYoiewYTYhuThZB2fOeSg1QYr3Cgasi8zi4RCcAchJ24dBTaGyWdXRqSoEu40gK3IAcyw62+KamQHdnRShQ1oD9Fj8ikyPR0/h2WlEhR/fu1mqZ+127e1+3Kp8aTReo+FGj3hIQnJlLs5eN4ix6eSeGJCV7nET18mNMeaCw6xcTUbs3lLVhot4SAgPhrr6bYy8YGJP+I9J4Uf81VvDVVVlHtl7lUtfIDajhwMCD3E2h3hICEpDtvZ4EFC9A6QQ7MW8Wby1h7AoF2Qwj8Qerjj7TpDwINmLVui/9BtV9uo7IXFpvua1x6e2UENCJt2eshJ0MLmMq0ZW+wxpoJqTUEDrvby4ukIkILmLLUxx7mqK70qYXm5GnWw5mNiF7pUpOhBXxL98WLuAL5CykJQcFQwPZAhgB8S9eFT/mdj5SEQDOCGUWZBZCCwMMfSEdIytz72pVm6AHzhTaSr5CKEPiNhBuuc3tu099m0GcLrqSifVtNudfu95/i/Ao3vOl12q9eu5fT/rRtpdvzqFS++hOpCEF42xEAcxs3ybdwWBpCoB1Q946CxBtm+lQSadohntrdmpKT9O1bj9CZH3fy/4FX3Ennj73R6ZrykwfYFIlrul0wgs4deS2lD7q81bzdpUvuNYBNE/aX3v2yx+WBlqB3wdu+L2kIiRnu2bCM3ubjf1yXXqqwIUwQpgWOYatxQ54AE/3vh6mhtlI9JtL5CjQYvSVEGpPlqRNETZ348H94AxGkCE5g77oX+Bdq91VPfs4btIgU8qAF7oB0IAP5Xz5nOacbdv3jFBXre2MPYzLeQhpCtGMRraH3yEksJGzdLhjOV9prHLWataDkJJ+DMAWgFRA06cjTotxWyP9AniAaWnf+OPca5QlgsrxFu+hc1CIyrqXGRsUmOZ0TtR8C1dfseEXIDTWVpAc0Q5iq5IyBTmcFOcGCNISIYVR/ILQAWqL1BUB1yUneR8W5miChcaTRFIEaJZ0v8GUwSxpCmipda663gN9AjQYZaPgJ7F23SNUeXOMO4jj8jCABjdCfcl0bf4i24GOMAgQBe5H3YyXSRFkYgTNjOHbw5LlqWIzWtBbwD0KL9MA5pAFxW180XhIDstFSB2mDJ8/jcNoI9Tu9H1WURkPMmkiAmo4arNUEkADhtVajoVn6dPjdlhYYAZMkfDFZmLk4n4ie9OmuJgPd14GatBBsVCxZzmPvXmKBVFEWZnV0BGCWiq9lkYoQ+JGqVR9K8CT+ofTphT4HKdK1Q6DmjadPS/AkvqH608/88ofSEZI87z6K6NGDyIv187Kg4eAhvyc7SBP2ovsdTl0dLQwLc5CCfTsAyDhzr//LbKTQEPT0Yo6Ty9BtWBg119WH6rE8BswUyDCjcRtyDcEoYdIdxg2xprJSsh8+SjFZFwf1uTwBoqmKJctMjQ5DRgi62zFDQ9/uQCHrd+WrM8/FVE1oEa6XZTYK+t5Knl5o+lTSkBCCbmn4CyFc2F90M4AAo0nMOH7qulkhmWytRYebbA2BJtw4kwskSPDG9lZ/sp435IPN03EUfwE/UfPx+oARIRB0QtC/U3zbXX7nI4hBdIbx+LjLxplKjjCdYsGOGQ7bE4SEEDMBGw6nKhwrfA3GskEUhlAjB/Rvc1UVOgKRD54NXebQ3EAvzDFCh1tjWKcEBEYAUaFaP+gJ2t0Qrr+QmQzqjITIDosQyWARIhksQiSDRYhksAiRDFK0Q6K48ZbIDTrsxRRMT95TQrpJdqINgsYdGnmyh7l6BJ0QNMzQmobQ+UUxJnR3aPNQfytd+ugCsR84yESh9Q2igtUN4guCQggEzx2BIzKDvn4Q3SYgSUsaNKrmy1yn7n1ZEDBCYHqwrAsriWRbUSsISplzL3f9ox8MHZUywPSJcjBJGK9ob8vTeC7VKkcnZQhN2gLTNAQagRkj7XWdIEwbhpITbpjJxPgw69Cc5zAjE4xH9PhwRYdYtCmI6fnhCp8W3Ph9f38zwDh317/+2ac3uckM+D28gQijm8GEz4TARKUtf6NDLWV2Bzh+f1+X4Q0i7u99TrYvr4rt/vorPoew3695luy1VRSf2pPCI6NNKUhN6SmqKDrE+cYkdnV7HlPutPez11ZS6fH9TmlEPkRh6qoqbrgmJVHd9h2mPGsr2OITIXh1hH76ztnDu7kw2u1E/hd0Iv9zSk7vrxbudEEeHdi4hEqO7qGMYb80XOWKxTZHt6+m9CHZHq2ELdzwBhV8+gpF8mLQljUeeA6k/+q1P/DqqPDIKOpy3hA+BzK+Wf4gVZ05RudkOhb3HPl6Ne1Z+xw12uuox8DRaj7RgwdxiGw/ctQbUXmLLV5HWagt7t5HgoIZAYWNS3W0RX7ator3/Sfcqh7TA0IkZYFnVGwCHcx5i/9jdVNl8WFqrK+lxLTzaMjUB5lwoOx4Ae/rKs/S1hdvpSZ7PdVVnKWUjIE0+reLqaG6gs9fMG6Wy/1ik3vw3q5Zl9jU4DpjMvWxR+j0zlkBDYu9JsTIyfUbfwvvD3/1ATXW1/Dvrn2HUp9LZlByusO0OUzEPgqPiKTzRk0xvEdNqaP13KX3EK7xh7a85XJNxDkX8XX6c7bdX6i/47qkU5c+Qx33rqui2JQ0/i0IFvcpLvyaNi6cTsm9+lGPC8cYPhcCFzR2A7mOxWtCjJx439HTHWZq13qKjImjoTMepa59nfupbN9v4n1q70FspyFsd1pSWXyE99EJqbwfdduzvIfpSUpv8VsgGOeK9m6hY9+uY02EQCNjHREfKgLu4fAJRJHR8bzXkyhW7EZExzvl7w6YbiQNIa3F5fs+folO7c+lkbP/ogpCj+M7P+UjlcVHKe/Ve1hTxt23VCUFAkY6YX7SBl7iOF5fQ/vWLaJB185xEhiuBelHt6/h/8WF21UTBiD/C6/6PSWm9VGuT1BJBEBUwWf/op4XjaXMGx2dFfCFrSHQE/O8CnuNXn+BQhbtzaGIqBgWkDsySBEAUF9VShFRsdTUaKeDm5er5zc/P4t+zF2h/t+1Yj5r3f5PXmJ/QOHuH7fk2F5HvtVlvIeWpA0czfnv/2QxR1FA6bF9lPvKXfyMcaktr70oP3XIJc9gvzBAwCsNMXJmhRuXED6d1G/8bMO0tu83qr8RXcG8aAMBRF9wxDA/ST3O52Ow+3vWPku1ZcVcy7VRj4Aj1K1U8+2f3RIs5K9cQKcKtlF5UYvAw8IiaOd7f2K/IVBTUsQVwZ3DDza8IsRoNl90fDLvD2xcyjVP2HBiE/AdR0pFex1vgkNI+otpD6qmQQQACFuBc0dco5osh5Cv5DzgVyBI7Trz/tm3sAmb8MAqaqitcvJHIErcI0rzPDCD8DdAryET6OeD37APQShuy/+chs18jH2X0TohM9440Rq8duqYdKx37H0vncltjtryYtq1cr5LmpikrtRQXc6/MzUvhQFQg7EQv+rMcb4O0dfppO5k+24DCwaaVHaigIWIWq2t2SAEKGfhf+fIb99WNl0wi8QEjKY+o2ewrwDSB49XCWlsqFMdenR8Cj/DyT05VF9VRiVH9rgtP8ZRAgmvCcEMcD0h8Bnj//gO10ghGAHUWpgUCARtAuFfYMcRFuN6tC8QQY28+Wk+Jxw3hAQMmjSHNyOHC608tMW5HQRyB0y8Q23wRcUlU0NNOd8XJIHY0z/k8Tn8Hzr9ITr89WomuffFk91Gf+iiR/kDCZ/GQ9BSN3pZpRHs/MadKpeCwrSglupDZDhzo4ajO7SYp8Q2Q1eRP9ohINPT+5x99IlAf7rCt/EQvITe2+FYaIa76MtIeN6QQYrGeQPk7809/F3u7Cl87u3FIkf07XQG2E/YgvZRF597e5vr66l2wyYK794tJAM5wUR4chLFXTGR4iddQ82VlTwxAuUPAHzr7RVgUrbmsqbEjL6EwqLN6UqXAo2NLg1R8Xml+OlTKSwmmhqLipggE+EfIQLokq5e81GH0JZmu53CQIRBrwCAioe5ZTyjJqMXa0zT2bNm3N4cQkijLXB+GMxpb8Q0VVVzjQ+PjvZK03k4YtoUihkxnHsy/Bwv2RKw92VBvdFVjwlyMn/pQMzLMlrYKaa5CiC61EL/vmFMg0IU6mMQsCAoLzAL5cxFdwAJmBgn4cxF8+ZltQb0gaHWkG5ub7AIQv+TNbfXAKiR1Sedux9ADogS5kH4HxzzxNyhxjdXOIRszX43Aai52IL5RU1ZYS3YkQwWIZLBIkQyWIRIBosQyWARIhksQiSDRYhksAiRDBYhksEiRDKY1peV+tD9ZLfZqPLt99yejxk1kuImZFPpM887He/y5yep/J+vUaPN+VtPPd9/l36ee796PH7qZEqY+iuKurDlo13Va9dRxdvv8jXIP/HXN9GZeQ+o5xNn30SRGRku98TxpooKTq8H8k++527OT6BmUw5Vf7SO6r75Hx/J2LbZJd2p6292KYMvCJqGgAwIFUOeWmB0setTrrMdtYAAISQIxjZ2Am/Fd/yOr+j+wvOtpnUHEJs0+2aXMyAhbcmrLNiiq6fwfbBHTzIqjvbZxXOIzQwyKFiEoCAgo+GHQhaGHk3lFVxgo7QgBARotQ95oeajZnoDPAcpL7aJm+g8cg0tL3liAecLDQKwx38QY5bQW0NQCEFthHmAaYJAoBVaVL7jEDQErwcIRFqzhIFngZkDufFTJqvHQQ6EDy0MJQJOCIQPEmo257ANhmBFLdWi7Jm/s/D1tRbp4ZvMAPKGZtRu2sIkw0QJX4HjDQWFHt8FfkS76U2xrwj4AJUQfrdFz6nH8PB654/aCScOn1Bf8IPTcThmLZAeTl9AON02n2WKQzvT13/kdAwVBX4i6qKBLmlwHyFsPAtMFyk+JBAIKCEoPMwQIh8RoYhCgih9lAPtgVmDk0eNBarW/pevh9DhN8R1QiBaM4cZhvr7C18ATYDAIVBxTBCLeyJ/BA7IT1tZhI9Ceq2JCxQCarIgdAhPSwYAG+4uyiGltmMTfkaQhOgHAhPAeThh4WNgbiBgcQ3CV9y/7lvHvRES4zpBhsgbx8SznH18PqfXR1QgCceMQnozYaqGoDBCICgsajmEqQdsOK7T+wsBFFzb3sB/CBLCz5jd0gaAMBF9CSEjQkK+4hrcG5UBeaGG69sjAHwbzCmuhQYiPxCgNYnI48zcB1QNJTdtEbPaIVJ9WNKCZB+WtGD1ZUkHixDJYBEiGUBIaPsKLGiRA0IC+5UrCx4jI29HTnhG3g6ssF9uiS3kYA6EDwnNO1EtaMEcMCFQFSJaa4knZFircOAUZd2OXvDOJQcpUKbInqESovgSvxd/WvAKICNbkb0zIQopiLh+Y2lKUMCaochcRVizmy/728ZkYWkp3pvXp6NJQRLgpZLT9GSQUUtduRCkLLC0xVSUKTLNdEcGGWmIFrYxWXg16DRlg49JaSeFlwVlSm8ILM4arb9whzYJ0UMhKNOrRJ0X+W0R4AQi+j9vl7XnnvWs6AAAAABJRU5ErkJggg=='
        self.C_SCIENCE = b'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'
        self.C_TECHNOLOGY = b'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'
        self.C_ART = b'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'
        self.C_LITERATURE = b'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'
        self.C_HISTORY = b'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'
        self.C_HOME = b'iVBORw0KGgoAAAANSUhEUgAAADIAAAAxCAYAAACYq/ofAAAACXBIWXMAAAsSAAALEgHS3X78AAAC5UlEQVRoge1ZPWxTMRD+GrEgkIoYvZCBnS61hIVERjayMvE6IBWmdGAFKiYkhrCxNZlgo2xsBAl5sISUTqztgOcisQdduBe5zfux/d5rn8T7Rsfvzt/d+e582VgsFmgSVskbAB4IbT42qad3ASR+AvhglXzRpK7GPGKV7AP4AeCms/xeaPM0Y1+SIWIitDn21Xel0mlzYJXcAqABXD23Y9cquQngmdDmlNeIyMsMSTMA3kRqDy2rJFn3ewaJFI/okBx2taFWIlbJVwAOAFwr2XqHrM2eqwW1EbFKTnJCJA+bHD736tBf+Y5wiMzYyqEgMq8rs6jqEQ6NWBK1ItojVskBgEO26qUjyiOcmb62hQRiiFglx5yZmsbtEPnelZ0vNWWmhxEE3gJ4EuHBHaHNxGejl0eczBRK4jcf5jkASgxHgd8fcG0qRalHnMwUak0iMRDazB1ZsV6dAhg5bc0aColYJYesOJTEEZPIVMzF83GdMnNDyyo5AvApgsTnIoUEoQ1lvZ1AuVSr5nltTaZHIi1GeCe0GflujqxFFLJDoc3MXTxDhGOYBN8PEJzCO8O4YAuTzltV9K2IsMBJRLuRaaEQVOjXphym/4hUyEwnTGLusbcQTGYcEdJ0J5ONX3e3k8hKXZhFYsF1I+Q5QNinrDWM0Eku3aqbBEFoQ0TeBHxCBh33+OEfUnFXcdkgvniKPkmjosdWHfKl9UFwZmoIaZJZRsWyIPLYZRBApg1I3CSzquy86F3MLgFTRyXVkEP3CGdaFC4we87St7aw4Hu5x3d0LbzXnrpCm3Haz9DHVsncrrKkxV5OCrkNGXic9bisM6Cz5f2W+WYPyEpF+T6dFA486wJ5PzqRNDrEvkh0RNqGjkjb0BFpG6pO4/cLfvP+t6kOVCLCb4dWoLsjbUNHpG34r9Nvwm8MX/ju7Tvvm37ooWKIxMyEfUAj09B51grdHWkbfELr/ADiOoA/DfMgHQQ/PQD+AjxCDJmXfXG+AAAAAElFTkSuQmCC'
        self.C_BOOKHOLDER = b'iVBORw0KGgoAAAANSUhEUgAAAnkAAABACAYAAABm42HtAAAACXBIWXMAAAsSAAALEgHS3X78AAADlElEQVR4nO3cT2scdRjA8We2m2z+SFOL1qKCtWIQFY+iB29evCjt0ZMvoSdPvgRBQVovCvoChEItgnjQu9WDB3vxpKlabQzRNtmdzPwkbf4sPRmodObJ53PYzM4OvzybzeHLsDNVKSW6bnzlymj8/XdvVVWcbNp2vd5qVudmZ45FxLHR8cUuTf/t7Jk3L3dgDgDgkOtF5K289OJn1SDObm/fmkzi+vo/ceqh47dfW3r6kfs93rTNxU8vzXdnHADgsBr04X1Xg3i9A2P8F3PdHxEAOAx6EXkRMezADAAAvdGXyAMA4ABEHgBAQiIPACAhkQcAkJDIAwBISOQBACQk8gAAEhJ5AAAJiTwAgIREHgBAQiIPACAhkQcAkJDIAwBISOQBACQk8gAAEhJ5AAAJiTwAgIREHgBAQiIPACAhkQcAkJDIAwBISOQBACQk8gAAEhJ5AAAJiTwAgIREHgBAQiIPACAhkQcAkJDIAwBISOQBACQk8gAAEhJ5AAAJiTwAgIREHgBAQiIPACAhkXcPbW1M0rwXAKDfhn2YvpQSN25uxma9FVWUaNoSP/1+IzbqOp7vwHy7SolY6sYoAMAh14vI+3tcx4+b41idG8Uzy6ej+uXXaF54NqrRbPxx9IEOTBhRTeqovvw6HuvALAAAvYi8yVYbFzc24uw752LmySdiYWEhhoMjEVUHhtsxuXkr6s+/6sQsAAC9iLxtTUQ8+OjJmJmdicX5+RjNjaKqulN5ayu/Rd2BOQAAoncXXpQSgxjEkZlhpwJv2/gLZ/EAgO5wde290q3mBAAOuX5FXjWINtpo6q0oUTow0L7Ra692ZRQAgN58J2/rSMRwdeVazJ0+FTc3NmI8nnTq7Fm9dLQDUwAA3NGP++RFXD6zsPDGn+9+GA8vPxXrK3duodKOZuPEzi1Uys7D7hm+svcwtW/v+c7PUqZ/x9Qx5a41p1fZX2dv7/bzSR3DUjb/n78AAMDBVNOh01XXL1xY/Pn8+featl2um+abpm0vNU3zdt00J557/OTt6io78bW9VXbDbGd/W/Yjr8TUsWU/5spda8Rda+29vrs9FZB7x7TtxZevXn3f/yAAcL/1IvIAADgYV9cCACQk8gAAEhJ5AAAJiTwAgIREHgBAQiIPACAhkQcAkJDIAwBISOQBACQk8gAAEhJ5AAAJDT/6+JNX/lpb+8CHCwCQx3Dl2rUfIuKczxQAIImI+Bfz9v9eD0jRuQAAAABJRU5ErkJggg=='
        self.C_TITLE_ICON = b'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'
        self.C_BOOKFRAME = b'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'
        self.C_INFO = b'iVBORw0KGgoAAAANSUhEUgAAACwAAAAtCAYAAADV2ImkAAAACXBIWXMAAAsSAAALEgHS3X78AAAEkElEQVRYhdWZT4wadRTH3/xj6C4sFLeiY+kaSUw3Me4a7ZhMNYvGeGw3Xjw1i1681h48auPRg90arxrUu9leq4n0IEY0ka4m28ZsgmU7K2VD3YVFhmEY850CoTDsUmZg8ZtMQn7DvPnweL/3+/3eY0zTJLelKnKsaTIjpdL/uGneEbCqyItEFGtei6w3NMewQs/3jEp+F/BElCSiNSmVzowNWFXkIBHFiegi54/M8f4IsWKIWO/xA58z9X0yKn+TsZ8no7yVMw3tSyJKSKl0dmTAqiJfZjjP+0JofoYPzZOdNweR2dDJKN2hWmGdTL18lYguDxo6AwEjJhlO/FoInY44AbVTfXeTavlf90yjtiKl0muOgeFV1hv6yHsyRoww7Rpop+BxTf2RjFLuKymVjg8NrCpygg9EV0RJGQlot/TiLarlf7mJSdwvRPoCA1aUlBU+EB0LbEsIEU1N9YVm7R4CrCd8ZuywEN4pSsoC0p/d/R5gVZHjCAMhdHosgHYCtCd8ZklV5NXu2w+FhKrIT7Pe0O/euTd9bmaCYVXdSmIivial0smWiW4PJ8QnlYmAhUTpLCGdNhcrS21g5Fo+EF06bMU6TNypEzTz+XvkOTvvGBiOE2afj2BV7QHGauM5seDoBezsDE1/8BYxxzx07N03SHjhGUf2IMwlRvBdannZAm551+nC0NjZI/23Teuzkduh+u27joEt6GDUT0TL+Mw3x+J80J0U9u8X35O5UyLtuwyZFc0Vm8gatcJNhEXCyhLbr76yO/Xs2zOuWB+Rqn9dxzb1OI89LR+IOoZF/HJPPUbs44H2mJG9R/U/VVd+ATf9BICXERIx1htybBBZQTwnPzRm3L5L5U++dWwbYqfCZB0SiCjoNJVB1Ws/034XnFuTDmo61QKOsYLPNcOjUnMxC1ppbVT7XLfFCL4F293apIoVpu23lxMNPQEMAwvlAgBnjUr+f4JMGQuYjNoEsBysRvU+7mcBnGxo9ycY9YEaWpFaHs7US7kJQDpYqBjBuSxOpo1q8RpKSZMslLdQk2tlibVJ9rJRypFpaNa63wbWixulo8XqL724gXvWCdoCRliYevlTFDGGlff8y9bxqFPYvWHciZByjUr+RqvKyXfYWq0V1i9x/lP+YU7N9VtbxEyJxEVm22M4MmHckXcLKAJRu97WXZe4KITmr3jCLzl6iVtq1tquSqm07akZobGqFzduGBMwAbFQ6Dvrf+A03zlut5dY1rZ/yjVXliORVX7dTpVNQ7vQXRDsAbYmoKGdq965vncU0IDFgbNRLV6w64XY7tbwRdOoLY0bugP2nX7V+MMK2osMJ37jCb/43KhLr0hf2lYSrYOlg7pMg7QMUCJKcP7Ieas453KhEF5F6sJkR/o6rKs0cBdJVeRlhhM/c7MxYzVkCuslUy9/iAw1yDPD9OniDCd+zPlORtCj4/yRR3oecwKg9d1N/P1XsGA9Srd06E4oPI4UyHDi66wYjKAyQ6ynp8Fo6uUHTcVqkRqVPCB/aHZDE8O815VeMyr3RISr1WPuFiZR1knL1hIR/Qe7DBycd9yveQAAAABJRU5ErkJggg=='
        self.C_BOOKISSUE = b'iVBORw0KGgoAAAANSUhEUgAAAEgAAABUCAYAAAAh+XGnAAAACXBIWXMAAAsSAAALEgHS3X78AAADQ0lEQVR4nO2cy2vUQBzHvzOZZO2D2lbFHrTgqz4XBBUfePMgHkQFPQh69E8QxHsv/heCR28e1D+gCEJV8FXF6kFEREVat93NZpKRSXfrprX+6EG3kO8nsNnfTJKZfMi8LqOccyArY+LJyUr89Mk5pbADQARgtmlTZdP0rQmC3ZEJLIBB/4TKcF9ZVM4qqHvhhcvv1KejR8ahcbMz91uthi8zc9i8vg8b+/sX09fv2tyNynaLj323741qp3C+TG+9Crb6S3WraZEV0L5roZyV0Wu1YmsFChKgIAEKEqAgAQoSoCABChKgIAEKEqAgAQoSoCABChKgIAEKEqAgAQoSoCABChKgIAEKEqAgAQoSoCABChKgIAEKEqAgAQoSoCABChKgIAEKEqAgAQoSoCABChKgIAEKEqAgAQoSoCABChKgIAEKEqAgAQoSoCABChKgIAEKEqAgAQoSoCABChKgIAEKEqAgAQoSoCABClqBLEnzDAr6A15O/etsnmH8Jm8zjSYaTQubZXmiVg5KKTSSFNNfviO2FqlzqK6p1/i3tPe+M/NJmovIWilpliFxDhVjMN+0yFrSysbPOF4Q1LQpppME9+t16E0bcPbaFQw+n4KaeIzs+GG4UyehhgZhALwugSRVm0PvjXG0N080qQMeNhqoOYczVy5iYGwnzP69MFcvoVdroGTbLNooKsTGN7bZVjMaGduOwAQIoxBRJUJkQmgdAKpLte0C8YxDvaNY01mFsFJBECgYYxAGBpUoRGBM3mGXhfj9j8KbFod556D9oTWC0ECXTI4nefGqEC+bBznfntxChi6ZHE/6aLIQc6K4lCXfxDJByn8+CsjgFudGZSI4dugvgpRG5o8sy6fbmbVwJRvnw+q+QlwYxZK4gSgKkVqLZqDhYoXApkCZ+qLhoULoBcUDWlf8XOjzm2lsO3gAidZ587I6Kd9EMWkWYj+Ofzjd07PnQb2OiTt3MbyuB0Mvp2AnHsO2lhoYGuxahf83+VKjo0z1rFq9lWbZ9bzfcS5frPqzj/0KPk9v/a9uGVn4oNzvnqndj7dTfsdLrsvD1jWtn3a0LO58xtL7Fsv4w32FeOG+zvJXU+/MuY8npqZGfwGMazUtzRw6DwAAAABJRU5ErkJggg=='
        self.C_BOOKRETURNICON = b'iVBORw0KGgoAAAANSUhEUgAAADoAAABDCAYAAADNlhYhAAAACXBIWXMAAAsSAAALEgHS3X78AAACsklEQVRoge2bvU8UQRiHfzM7e4tAQI2KXxCjQWwgFmDAysLCxMSP0sLEEmNtYuwsbIw9tfFPwAJjbWOCxEQTNMTmAkSw4OTgbud25jUzd4scECVgcs44T3K5eXd2N++z87FT7DAiwv+AMI7p9HSSzry/yRjOASCZKZkp9UVE0UBBROactuRwh4uP4wcDm4xv35mzLboweukpOB7ntd/LZXwrraGnuwNHOjvtse7+nlYmvB+KHS8m+7i5ATHcctViF/SaU6woYzj/jye7b3jjBsJhh13B/8I9nCCI+kYQ9Y0g6htB1DeCqG8EUd8Ior4RRH0jiPpGEPWNIOobQdQ3gqhvBFHfCKK+EUR9I4j6RhD1jSDqG0HUN4KobwRR3wiivuG1KCmNdGXdlu0Hyea7+lJVoiozZFqDMwJjDNWawufFZUilMNjqrPdIvgnEiq7XlJXSRPZXUxqJEFiXmY1dZjVNf4mmNYXXlQo+SYkr9+9h4NBB8PlF8N5TEP1nkcQCXx2TpVqG+MEj5M1kRU2rzUhpD5wZuYikqwuFsWEURAzOI4C1MuW9kVVTlDdduW3TgIgFhBCII4GkECMSwo5X16iulpsy3jbrMjBwzhHFAtxRSYNaWm6Kd369UL2COyppoOJCU7yzKAM0yOkZl/WebIq3iRo1rTW0ed1kGQhuykbHjjbF+WSUJYyJlAhrKyW0FQrQpCFrWb37OtiD1Za4LsrY3I329gtTlQo+vnqD0SSBfPsO2dgw6PpV4EBbS5LdF1Ji80ZQu63yw9DQM6X1Q9NlzRJQma5r/omglLLHBk8ft0vFvCOb4ZtH9XK9kNfn45s2lmGNusZ1+fCnxhL0t+dulLElhz/no4mKl2dn+2yLnhgffzI/MWFWvyON616CsSkGXANwF2h6OO5AtMSA5wDwE4BdFi603zdBAAAAAElFTkSuQmCC'
        self.C_STUDENTFRAME = b'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'
        self.C_STUDENTHOLDER = b'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'
        self.C_DATEHOLDER = b'iVBORw0KGgoAAAANSUhEUgAAAksAAABICAYAAADmtrGFAAAACXBIWXMAAAsSAAALEgHS3X78AAADWElEQVR4nO3dwW3bSBSA4ZdU4BJUgjqIOlh1sCohZwIERRDg2SWoBG8HKkHbgUvwVqBg5BEhK9KLj2vx+wAiCAIlEcHDjzfD8bfj8Rif1Q/jKiKWEfEUEatPfxAA4P9hHxGv5deubV4/8z/6Yyz1w7iIiJ8RsYmIt4t/5FB/DwDwFSzqtaxDn9IxzxGx69rmbtOksdQP47aG0kv5y7q2OXgUAIBH0A/junbOaTDUtc3Lra91M5b6YXyqE6RiI5IAgEdVo2lXhkNd22yuv+ZvsXQRSodbHwAAeDRZ/3wXSgDA3NU9S6cX2fph3F3eju9X96ZscnoTSgDA3FwE07ouzZ1MsVSPBVjXCwBgrsF02sNUV9w+TJa29Y03xwEAALPVtc2+HpFU3pR7j6V+GJf1zIFnjwYAwGmIdNqWdJ4srevrcqZKAMDs1enSaZvSOZZW9eBJAADelTaaYulHXZsDAOBdaaPltMH7sz9MDgBgJkobPV2fswQAwAWxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAAmxBACQEEsAAIkplvphfHKjAAAmpzY6x9K/EbF0bwAAJqWN9udY2kfE2r0BAJiUNjqIJQCAK/0wLiJiMU2WurZ5ifc/2LhZAACxjYiXrm3eLt+G29YLAGC26lTp73MXTbHUtc0uIt76YXz2eAAAM1ZW3PqubV7jxjlLZd/SxnIcADBH/TCW4VEZIk2rbR9iqRbUKiKeBRMAMCc1lJa1hSbfjsfjb7ehH8ZlfUOufGhbNjd5WgCAR1T3KO3qIZSr6+65GUvx8YOLGkw7TwgA8CjqTy/5Wa+7A6K7sXTWD+O67gZf1A1PZeJUlusOJk4AwFdxcXbSeantr4j4p0bS4d7X+GMsndWluVW9Son98HQAAF/If2XYU4c+ZfizP7/xdldE/AIoCNhtMbK7qgAAAABJRU5ErkJggg=='
        self.C_BOOKRETURNLINE = b'iVBORw0KGgoAAAANSUhEUgAAAU8AAAACCAYAAADYfF70AAAACXBIWXMAAAsSAAALEgHS3X78AAAAJklEQVRIie3UwQ0AIAgEsGNzNXFumIF/O0TrvN8BYONWtzsBVpIMyx8GB64cRTUAAAAASUVORK5CYII='
        self.C_SETTINGSHOLDER = b'iVBORw0KGgoAAAANSUhEUgAAAksAAABvCAYAAAD8H4QLAAAACXBIWXMAAAsSAAALEgHS3X78AAAEOElEQVR4nO3c0W0qRxSA4eMoBbgEOohLcAehgzgVxM8rrdarlfaZEkgHdBDSAbcDSnAHRMOdJWDDiR/uvYrh+yRkLIzwLvvwa2Z27na7XXxUP4zziHioj/sPvxEA4P9hGxGbiFh3bbP5yH/0n7HUD+MsIl4iYl4/YF0/ZOtLBwA+mceImNWfxTIiFl3bvF46jIux1A/jfY2kPyLiz/K8axuBBABchTpj9lxnzJ66tlmdO66zsdQP40Mtrdf6ZpEEAFylGk2le1Zd2zy9PcZ3sVRDaX3pDQAA16bOqO2XGr3tn5NYqn9Y1iMtu7Z5cSUAALfiUjD99Ob4V3V1uFACAG5KXeRdFn7P69Tc3iGWjrYFeHZpAAC3qAZTGVVa1pGmk5GlRQml7NY5AIBrV++K20wDSPtY6odxv9dA1zZLVwAAwH77pP26pWlkaV7XKwEA3LyubcpC7/0uAVMsPYolAIATJZjmUyz9UufmAAD4qrTR7LDA28JuAIATp7EEAMB7YgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASP3/Pk9MP42NE/OULAAC+pa5t7n7UCf2usdS1zToiftjBAAB8a6bhAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASYgkAICGWAAASh1jqh3HmRAEAHDxGxGaKpb8j4sG5AQA4KG20nWJpFRFz5wYAYD/jdl9HllbHsfRbfQEA4NaVQaRt1zZfR5bKkzoV93zrZwYAICJeImIRb+6GK6HU9cNo7RIAcLP6YSyh9Nq1zTKOY6lrm015PSKWpuMAgFtUB426iHiaDv9kn6WubfYlFRFrwQQA3JIaSuuI+L0OIu2d25RyuitOMAEAN6EfxnkNpedp+m1yt9vtzp6DfhiXNZzevQkA4BrUgaGXOu12tnkuxlL8W1mL+mv5ueza5tXVAQB8ZnXK7ak+phGl7blDSmNp0g/jUx1l+jUivpR9B8r2364SAOATua+7ck93/pd9JhfH65PO+VAsHeuHsexmOasPAIDPpIwilW0BPjboExH/ADby4Ow6Oc3YAAAAAElFTkSuQmCC'
        self.C_BOOKRETURNHOLDER = b'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'
        self.C_BOOKICON = b'iVBORw0KGgoAAAANSUhEUgAAAFcAAABmCAYAAAC+7g1kAAAACXBIWXMAAAsSAAALEgHS3X78AAAEDklEQVR4nO2dvW8cRRjGn9md3YudkNhGkBRxBAgSvs5CAiJAdEh8FCCEoAslIPEX8A+kQ6KmRKJEFFAkFJRWpEhIWARwCtMEgRIECMfJfezevmjm7ux19i4NfpSLeX4n27vvuzs3+/NoPrYZZ2YQHHwo9bfTp5ctxSfh2Dm8DOAeOFzZ6vTTXlF83cqyN0Lu0IG8B+CBcHzkkaP6lzT51cG9P//ZV+dCxgex8PjeAUu7LjUsd8s+rm7e+ODokYMxdAj5DNR/pjlusE8BnAiVTP7vNpgko+5g6c5VYd+xPH6gZNTHCgJJHLwETa6Q3LsPySUiuUQkl4jkEpFcIpJLRHKJSC4RySUiuUQkl4jkEpFcIpJLRHKJSC4RySUiuUQkl4jkEpFcIpJLRHKJSC4RySUiuUQkl4jkEpFcIpJLRHKJSC4RySUiuUQkl4jkEpFcIpJLRHKJSC4RySUiuUQkl4jkEpFcIpJLRHKJSC4RySUiuUQkl4jkEpFcIpJLRHKJSC4RySUiuUQkl4jkEpFcIpJLRHKJSC4RySUiuUQkl4jkEpFcIpJLRHL3mKoYbBcouUQkdw8Jrbbzx+Z2gXGzucoMm91+DHT7JcqqiseJMzjn0B019Y2rf6JXlhiYoX03WyBS3xjRB7F/3eyjHAwFVqPsoKpQmKHlPW72y2FuJF1M53qvtyM3iAv7UG4URQyc63SQ3HcvXn/vDBZ+WIdbvYjq+Wdizl56EW5xITb3nyV4F27rBuY/Oov6jp6+PxieftPtxr9bZnjtzNs4fPJh+Cceg3/3Hcwno65Ze4FOpcybW0hqQCPix1vTbtb602MnH0LqU2R5hryVI/dZjCdJCrh9ZmCP6P1j6NxSlJ9UdNZqIU0dvPfIUo9WPpSbeh9nD6JJ75e/G7GJcsN8IgmfJEGaeSR+eJnETqe49FMjN1luHLtcHMCS0S6g4vYMLnzXyGtA2ysmtL+pcl1otg6oYHFhUWlP9tuSPvd0I62WS2SyXJegCp+qii8jqrKMP6ZVxFSy9uON1MQBreh1kecZBmWJfprAesMOJS0HYcpwZ2o/6ywtNioY5F4Pu1YfHi1xw2Li98sbePCpJ1EkSexry2T43kENdzpl0W/kwqrgW5i9+crcXAyc73Sw+vkXWDowh8Uf11GuXkRZe3GDxYXZeJoZI764uaVKbm1l5ZSZXRhUVWzXsZ81i68c4yyhquL72+3c6Lx9/NhOQ7ad3rg+qRhHxzGrnWxfH0NWu2f4y+ol1O8PsV3n4++1CbHdZdiuUuqx5v3jujbLaz5X/frK7MoL6+snoNkCF7+ytnb5Urv9aOXch6NvehbAQQOuAfgSzp13wKsYzpPfAnD/PnXx3zG75oCPx+U40+KAA4B/AVt6WHgYmXO3AAAAAElFTkSuQmCC'

    def color_dark(self):
        self.C_BOOKS = [
            b'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',
            b'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',
            b'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',
            b'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'
        ]
        self.C_ART = b'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'
        self.C_TITLE_ICON = b'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'
        self.C_BOOKFRAME = b'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'
        self.C_BOOKHOLDER = b'iVBORw0KGgoAAAANSUhEUgAAAnkAAAA/CAYAAACcl975AAAACXBIWXMAAAsSAAALEgHS3X78AAAC5ElEQVR4nO3dvW5TdxzH4Z/fEkzjmK0dGikLisTExsDCRXABxOoFdPJWqaiby1oxICQmuA1uAIm1TA4TGSIlimX87sq0MPRFopP/5+fnkSy/TN+js3xk+RzX1ut1lK7f79+KiEcR8WA8Ht88OjrqXFxcTOv1+sHJycmosPkvTk9PXxSwAwDYYc3SD73f7x9HxNuI6G7e12q1s1qtdiMivl2tVtsf+E+vSxsEAOyeegWO+Phz4AEA8HWqEHkAAPxPIg8AICGRBwCQkMgDAEhI5AEAJCTyAAASEnkAAAmJPACAhEQeAEBCIg8AICGRBwCQkMgDAEhI5AEAJCTyAAASEnkAAAmJPACAhEQeAEBCIg8AICGRBwCQkMgDAEhI5AEAJCTyAAASEnkAAAmJPACAhEQeAEBCIg8AICGRBwCQkMgDAEhI5AEAJCTyAAASEnkAAAmJPACAhEQeAEBCIg8AICGRBwCQkMgDAEhI5AEAJCTyAAASalbhkNbrdUyn01gul+ez2aw1HA7bi8Xicn9/f3Z+fv6xgIlfNJvNG4VMAQB2WPGRN51OvxuNRrOzs4t1RKN7797tSUSs4lP8RbvRiL3tr/zT1dX1cjablzAFANhxxUfeZDKJy8vx3ps3Z3Fw0I7nz34q9puy356+3DxNtr8EANh1xf8mbz6ff+h2259e//L4h63vAQCogkpdeNHp3CxgBQBA+VxdCwCQkMgDAEioUpH3+7v3BawAAChfJe6Tt3F42L7+9cmrzv37d758Np8vNveli7291la3/c2tksYAALuptrnRcOl6vd6P9Xr9YUTcXa1W33ye22q1otvtlrb+8WAw+LmAHQDADqtE5P2bXq93t9lsft/pdKLRaIwKmjYcDAbDAnYAADusspEHAMB/c3UtAEBCIg8AICGRBwCQkMgDAEhI5AEAJCTyAAASEnkAAAmJPACAhDb/XXv81wMAgBwuN5H3ICIeOaEAAElEvP0DzxF7KvdDCG0AAAAASUVORK5CYII='
        self.C_BOOKRETURNHOLDER = b'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'
        self.C_BOOKRETURNICON = b'iVBORw0KGgoAAAANSUhEUgAAAEcAAABTCAYAAADN9xqSAAAACXBIWXMAAAsSAAALEgHS3X78AAACgklEQVR4nO3cv28SYRzH8S933B1Ffg1FjT9iN5xgqINbnVztrBMs7ejEH2Ec3DVxc/VvMNGhi2kYmrQpiY0JGjlTKtyldwf3mIf2SLXmkzgICJ9XcuG4O5Ln3iE5WL4ppZQkms3mmog8EJG1Xq9XqtVq933f/9Htdm19iWEYuUqlMpDlsJuWsyibIvJCRO4kt51KpSSKIh3kKDkex/GSdDlj+r7/VERei0jp4okgCKRcLotS6sTzvMk5fWxJHBkisrksd/u3jP9rudPFOADjAIwDMA7AOADjAIwDMA7AOADjAIwDMA7AOADjAIwDMA7AOADjAIwDMA7AOADjAIwDMA7AOADjAIwDMA7AOADjAIwDMA7AOADjAIwDMA7AOADjAIwDMA7AOADjAIwDMA7AOADjAIwDMA7AOADjAIwDMA7AOADjAIwDMA7AOADjAIwDMA7AOADjAOnkVBiGeusPh8NRHMfDOI5XW62WXJzGZNt2r91un8zXLfwbpmmG6SiKcv1+/zSO44yI5F13INmsPd5+p5QqhWFYmvpKZ8NNe553VYfZ2/sS7O9/dfQytrceyfbW5YFMQRCK+/14sYu4x/L+w8fxfno0GnVE5Pbh4bfJBfl89o8fdBxbbt64NrWFztjAUEqd6jVYltmT82/Nk8cPlyUANHlamaYxjnRv/e5cLnQW+CgHGAdgHIBxAMYBGAeYxFlZsa7o12fP30in487hUqdP//Ec//irVm+t7ux8Cg8OPtsvX72VjY3qpcVE0VAcx5FMxlnYIP2+l+xeT9Xr9dL5LGT9Z6qIPmhZlhSL8JJF8u6XSdqNRkNP0k6maWvJ+yROrlAo6EHSiz9NW2T3J+uUoU9LdX8BAAAAAElFTkSuQmCC'
        self.C_BUTTON = b'iVBORw0KGgoAAAANSUhEUgAAAUMAAAA4CAYAAABnoZqxAAAACXBIWXMAAAsSAAALEgHS3X78AAABVUlEQVR4nO3WAU1kQRRE0ZoxsCMBByBhM9/A4gAcIGGkIAEDnSABHLAOdhV88nky6hwHXXm56dO+7zls23ZJ8pTkEoAOr2utr+OlPzHctu0hyXuSXw4AKPO81no9Xa/XuyQfQggUezwneRFCoNztiOFD+wpAvftz+wIABzEE6kUMAYYYAvUihgBDDIF6EUOAIYZAvYghwBBDoF7EEGCIIVAvYggwxBCoFzEEGGII1IsYAgwxBOpFDAGGGAL1IoYAQwyBehFDgCGGQL2IIcAQQ6BexBBgiCFQL2IIMMQQqBcxBBhiCNSLGAIMMQTqRQwBhhgC9SKGAEMMgXoRQ4AhhkC9iCHAEEOgXsQQYIghUC9iCDDEEKgXMQQYRww/bAGU+zxieEvyv30JoNrtvNb6l+R3kr/tawCVntdab6d9338ev23bJcmfJHfuAShwfATf1lpfSfINitwn+oUaXz0AAAAASUVORK5CYII='
        self.C_DATEHOLDER = b'iVBORw0KGgoAAAANSUhEUgAAAksAAABICAYAAADmtrGFAAAACXBIWXMAAAsSAAALEgHS3X78AAADCUlEQVR4nO3d0W3aUBSA4ZOqA3gERvAG9QjZoIyQETICI2QEuoFHIBuwQb0BlZNj13HhNK/B3ychIkQS2fLDr3Ov4eFyucQnNRHRRUSbzwAAX80QEaeI6PPxX5+JpV1EPEfEz4h4jYhj/pPB5QEAfDG7HPw85iDokI+bXVPFUpORtM8/8hIRZ1cEAHAnumydNp8P1w7rViy1GUdDxpJIAgDuVZfdMy7LPa2nTNdiqc03v+QvAADcu2axh6lbBtO31YFPb3wWSgDAhgyLG9g+LMetJ0t9LrntXR0AwAY1eSPbtPH7Qyw95outO90AgA3r8u7/8c65YbkMd8jlN6EEAGxZv9jsPU+W2kVBAQBs3TRdaqbJ0j5fAADgfbL0tul7iqVWLAEAfHBcxtKP3PkNAMC7sY3a5QZvG7sBAP46L/csAQBwhVgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAglgCACiIJQCAwjKWGicKAGC2i4hhiqXXiGidGwCA2dhGpymW+oh4dG4AAGZjG/VTLB3FEgDArM0tSv1ysjTaO0cAAPEUES/jDw+Xy2U6HWMoPWdJDc4RALBRXa66vW3wXsZS5ITpbMIEAGzUuPR2iohDPmIdS03G0jx6AgDYkGMe6ryX+/vq2IccPfUZTgdXBwCwAU0OinbZQrNrn+B9yjc9ZV35sEoA4J61i0FRt967fevrTk6LD6k858Zv0QQA3JNdTpP6HBD9E0pxZRluacj1umnK9DsifmVI9fd0pgCAzZimR13G0jEHROdbJ2C9wbsyreG1vhoFAPjCxqHPOPyZNnPfFhF/ADE7hXXfPVwIAAAAAElFTkSuQmCC'
        self.C_ENTRY = 'iVBORw0KGgoAAAANSUhEUgAAAUQAAAA1CAYAAAA545IWAAAACXBIWXMAAAsSAAALEgHS3X78AAAB3ElEQVR4nO3asW3bQBSA4Wd1LAjb4ADWCM4GGSEbWNkg2YDawCPYG3iEjKARvAABGixYMqD8aEi2oDrRfV8lQCx01OHHHY9X0zTFOd0w3kfEzdmLAP59fVNXu3O/8mQQu2GcA9hGxI+IuPNHAxfiLSJe5r41dfX6eUhfgtgN4yYiHiPi2gwALti2qav2cHhHQeyG8SkiHswAoBDPTV1tlqGulg+5MhRDoCQP3TB+rBL3K8RuGNcRsbNNBgr1bT5wWVaIrRgCBduvEpcVYi+IQOFuV/meoRgCpbtfeekaYO/7yn0AeCeIAEkQAZIgAiRBBEiCCJAEESAJIkASRIAkiABJEAGSIAIkQQRIggiQBBEgCSJAEkSAJIgASRABkiACJEEESIIIkAQRIAkiQBJEgCSIAEkQAZIgAiRBBEiCCJAEESAJIkASRIAkiABpDmLvZgDEn6tpmqIbxjmK1+4HULDbZcv8ZBYABXtu6qpfgvgYEW9mA1CouYHvhypNXb1GxC8zASjQtqmrXRyeMjd1NW+bt2YDUJB5q9wuwz167Sa/+Gn7DBTgd1NXm8Nh7k+ZP+uG8Sa30PPFd2YGcCHmxd5LRLT5qPDIySAe6oZxHRFrswH4z/XLs8KTIuIvFc5knXMUCFUAAAAASUVORK5CYII='
        self.C_EYE = b'iVBORw0KGgoAAAANSUhEUgAAABcAAAAOCAYAAADE84fzAAAACXBIWXMAAAsSAAALEgHS3X78AAACAklEQVQ4jX2UP2gTcRTHP1YhmbybmjiYnINN/Uc7CCoE04IgOkhnB20dCp1Ml5+jzr8pToKLboIgmkFqTSt28i+0oYOWKk3q4KVTziEkYIm88+64Xi73hePxe+/3vr93v/f9vUP9fp8kKKUsQL5JwPS2vgcaWutGUm4suVJKiGaBGSCfkN/0DqporTcSyZVSU8ADoOT7DNOkeHmanGVx1DDZa9lsb33ny6cP9LrdMNeaFBT+m4BcKVUB7oZ3j2az3Lw1RyqVdtd7tu36BH+cNi+eP3N9ESxqrSsBuVLqKXA7vCeVTnNnfsGtdnV5ia+fP/73p9IUS1Ocv3DJ/Ysnjx/FXddDrXX5cKfTKQP3otHTZ85xdmKSzfo6a+9WAv/+/l92fv4gkz1GLm/xq9nAcdrR9Iu1Wq0+4t3xAOSuBZv1gT55/nXX5qwTsXGgLOTGsGgSugebGQshX4wL+MmZTDY2caww7tqW/XsY96sRr7PVaGR76xu9XpdiaZrRyAHH85bbUInvNmPfUVV4j3iLWe8xTPhRp91mdfkN12/MMDe/4JLsNnYYK5wK5Pi6+jKqdbxChW/gEUlz74d3niyMc+XqNVeSPkQhK2+Xohp3RBy+xgfIvQNkjog85fSg2aIewzBptexotTIC5J3ICDigycTB5Y0Df2CJFfjaFLsxdHgB/wAo5sx11/QClgAAAABJRU5ErkJggg=='
        self.C_GENERAL = b'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'
        self.C_HISTORY = b'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'
        self.C_HOME = b'iVBORw0KGgoAAAANSUhEUgAAADIAAAAxCAYAAACYq/ofAAAACXBIWXMAAAsSAAALEgHS3X78AAACZElEQVRoge1asU7DMBB9IGaImJBYOjHS7CzwBXRkI3wB/QCG8gedmMPEyhdAK/UDAmJhgy+gLKxGrs4oihzXd3EiA3mSpao5+/zuzuezkw2lFDrAIYDnNtVsdkBiBqAAcNamkq02BwewAHBEv+8A7AK4scgdW/57o+YHHVottEQp9arsmFr02TDhzKuN0EoBvAA4qHl+CeAeQBJSaWgiOkTmAPbXyJ3S2glGJiSRDMAjgG1P+SGtgTSE8lCLPQdwLui3Q55pjKYeSSjeJSTKZBqjiUcSsuYwxESaQuqRlOI7ChIQEsnIE0FCwoE9ljRzMxzXbF7r8KCU+mT2+VJKpb5z45DIhSTMTq4ntRT0z0IR0eXGTEiiOgk9ViEYx1bWsIikQsXa8scOw9wLxsypL5uINBQKz9ieCse2kqlTkgmUOBUF1PNmM1QoSylyPTcLgkKQ63ktP6ojkjTITGMhiXIYa0tzkVWJSLPJ0jc9emZHyRxyQ0RqjSVnw2I0SVRMIUyF2nKDFkiYxiGjDTowLuV4ZMHMTNIE4EtiFRW6aFwCGAH49CzPrqhPDBjTVdNP9VtQVfubcE0nU6BSxuuT3kXERJ5Kv28BTMoPq+eRnIQM3lufnj/GNLcnW/TYjroZHWMHdL3z4VBluyE0KGgtDaitg5Yt1sjUh79jczKZqYpyVeuCkZt4ZiB9VHBlrbpqetXqLh9iyUre6OI2vhP0RGJDTyQ2/BkiTW/j545nnabwpkRcO3un6NdIbOiJxIZ/nX65b2F9ziKgM5DJguw3vT4f1XTy1Y0HTlxvgPs1Ehv+BhEA37t9ygGgqKrSAAAAAElFTkSuQmCC'
        self.C_INFO = b'iVBORw0KGgoAAAANSUhEUgAAACwAAAAsCAYAAAAehFoBAAAACXBIWXMAAAsSAAALEgHS3X78AAAD5ElEQVRYhdWZz0obURTGT50h4sBISiCQQSEQyNYILoUKdx/cuatxpZtS+wI19AmUbtzV9gFaW9cX4hukBRUEZYIwwcDI0AmjExIs3zBj82fSJpkbEj8IIdcw+Xnuueece86Lx8dHiiLGWI6I1ogI72kiihPRkv/IChHpRGQRUZmISpzzUpTfGwnYhyxIkrSlquq8qqo0NzdHiqKQJEk937+/vyfHcbyXZVnUaDS+E9ER5/x4rMCMMViyqKrqq2QySfF4fNjf84R/4Pb2lkzTxA4UOedHQoEZY3Ef9G0qlSJYVIRarRbd3NwA/JSIdjnn5cjA2H5Zln8sLCwsJhIJIaDdgsV1XYfLvOOc748MzBgrKIryKZPJUCwWGwtsoDZrf+acF/p9ry9wAJvNZkMP0rhUrVbJMIy+0KHAk4INVKvVYO1Q6JnuBfisoigfJwULIQIlEolNxthu9986LIxoIMvyr2w2u4i4OmldXFzgIC63R49uC++mUqmpgIVw2JFg2teegBljaVVV97AdUZXP50nTtMjPQWTSNG0JZ6oHGIkBSSGqNjY2aHV1lXZ2doRAw4CyLH/oAIZ1FUXZjJrB4EoiLNsuHPxkMrkYWDmw8LoIV0DGOjw8pLOzM+/dMAwh0H6G9YC9KMEYK+dyuaVJhbFB5EeMlzMIZaqqTjUs/bXyuozCW0T1hRC0vb3dsXZ9fe25hgj5oTYHH14TEXfhrycnJz1rouQb1QOOi3AHHLhuQKyJlCRJywBG7SD0weOSoijzXlib9gPXrp5qbdrlAaPaf07AZVy/n4Ns264A2HoOFvYZdQCXRIefccj3grLnEujGTLvq9ToISzOcc8txnNNpdwvfqKUgrB2bpjlZon+o0WjAJb7DuAHwUa1Ws6eSlsjrwwV3Ow8Y5K7rfo1iZdw0cJdr18rKSs/asIKr3t3d3QSdzo47XbVajWRlPPzh4eHp1Ww2I8GSX/E1m833wefuvkRR07Q9EZdREUK4PT8/P+WcrwWP66glOOdFwzB+TkNcxm7pul4P7nKBwoqfwtXVlT3pMIdOpuM4bzjnevt6DzDaQq7r5i8vLydWFKFXbJrmQVhnPrS8xODEcZytSUD7sOhc9jQCaYCG9vrs7OyXTCajjrvf5vssMtpBP1gadGSAoI0e17iih23bVKlUbNd1X/9vsjTwFAkhLxaL7aXTaWFDGaRcHC7LsjCUKXQfsDANO/bC4LCIPlww9hrlPohCBlnVBy0OM2wcdbAI8HVYBV2jYLAI+G7rw4qu63pJAFtv2/bvVqv1jYj2BxlzCQEOgUcmCt7DBDBsN0a3Q0M+iYj+AAQ7DqSdt3L9AAAAAElFTkSuQmCC'
        self.C_INFOSMALL = b'iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAACXBIWXMAAAsSAAALEgHS3X78AAACV0lEQVRIibWWPYgaURDHJxoVP3l+ggvKqaxNCoUIwSJw8BDUKpBrkipVTLpw1aVME5IuXVIEclVIY7hOwTxIYZNU2h3IoqTxY40sCqsn6IYxCnp4Pr3z/rAo7Mz/N292mN07mqYBT5RSAgDx5TDG2E9uIgBcCUBTo9F4Qgh5arFYAkajceX+cDjE63e32/3IGDvdCZDJZN55PJ5XPp/PpNfrN1Y4Ho+h1Wr9lWX5aN2pVgBYtc1m+xEKhe5frpinwWAAjUbjfaFQOFkLQHOr1fpLFMUor+qrhG2r1WqfisXiy0WIbvHHbDZ/von53ANEUXxBKX20AqCUHgYCgcc880gkshVEEIRv88n7DyCEfLDb7VzzXC4HqVSKC8HhwAmcASilcbfbHeMlSZIEpVIJyuUyF4CdcLlczxcnOCSEcJNisRiMRiOIRqPcWJTD4XBi8XedTufRNgnJZBLC4TDIsgzVapUbP295XKdpmm0bALYI5vO+gw50u0RfR7cPmE6nf27DGHcUAFR0/X7/+2Qy2Ttg/qwq2KIzRVH2Duj3+w3GWEPHGFPa7Xael5BIJGa/giDMrk3C9vR6vTew2KaU0oNgMHju9XpN+6hekqRqPp+fvQFnU4RH6XQ6x7hubypZli8URXm2sFl54aTT6a+iKD7BjXgd9Xq9cb1ef8AYq6wFoLLZ7Gu/3//W7XZvjcApbDabo3a7nVw2XwtA4ZIihJzilt20CNEYJ7DT6XxRVfUYB+ZyzMbPFgQZDIacw+F4aDKZ7i3dulBV9VxRFPyaOMNnuNYAAP4BEcP9I1lqDsMAAAAASUVORK5CYII='
        self.C_LANGUAGE = b'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'
        self.C_LITERATURE = b'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'
        self.C_LOCK = b'iVBORw0KGgoAAAANSUhEUgAAABsAAAAkCAYAAAB4+EEtAAAACXBIWXMAAAsSAAALEgHS3X78AAABvklEQVRIibWXMVbCQBRFn9FeSzvYgewAXYG4AmAHVK+m/hV2lrgDrGmgsww70B1gwzlWeIbzyQnDxMyfhNuRZHIzM3/eDFf7/R4WSD4CuAfwKSJflrZRMpITACMAD96tHwALAHMRWTWSkey5FwUkIV5FZJIkI9kFkAO4jRAdeReRUdXN7J+GiwrRN4BfHUKfIclB1QtvQhdJhubnw82biGxLzw10mMsfNdMPje7ZNNCbE5FDRBZaOGU6+rH1Mi2Kji/3RZ5w410ODmWoZ2cPisg81LiEf/85Vtbzfq9rRNCqPUEXv1l29iKfigXdjZH58xWcqwiiZKmE1t0J5iBuQps9q6VIEJJTLfuY0I3Fpc7sWECHYSSZtyzxGbu1er3b7dy2MLygyPG0XC7fsqpoaRkX1AMn6xvf6+bhJabUPbop1TjS8J1ZG1pl61L61545msqKnIw54DSVpeZkkqwRFtkmUBRPFrlFNg+cQVZ6Pmld1hiL7CxpdOv3N9tKgufGCvokVzpvW92JTQvbIoNGmzXeCrKEjEsmS4mdRPIsJVAT2LjwznStjC8pAnA4sBanK/0/5sr7rkVRrtsRAOAPHIKV4r4QKXAAAAAASUVORK5CYII='
        self.C_PERSON = b'iVBORw0KGgoAAAANSUhEUgAAAB0AAAAiCAYAAACjv9J3AAAACXBIWXMAAAsSAAALEgHS3X78AAABpUlEQVRIicWWzXHCQAxGP5jcTSoIHYQOYjqgg5gOuKAzZ53cQUgHdBDSgVNBSAd2Bc6so/XYwftrnLwZDgzrfcharTSr6xq+EFEGYANgAWAFoABwAXBi5pPvPl5SIkoBHAE8WJZ9AMiYuRgtlehenP/shwpA6hJbpUSkXuEZQOIphYiXzFyaFswdG+SBQsj63LbAKCWiJYCnQKFmEyVVuYkUKhI5fMHS5QipFVdOx7AwPWuTGk+fJ1Gn9zxSaqxVo1QK/D1S+DqmTg8Rwsr1nFXKzOoVbwOl6v69REtFfBRx5Vj6BWDt0228WxsRqRLI5PPY+UnlXYmOtjxGSW/JlJeDkbuQxdLqFp17uZR6LH2at8aniW8kj6mjzVWd3FovFqNUukT+69D4og7XzhT9YE6JSBX3W6QQ0ofPMupccRUpEam6fI6UDbGVWm/pSQOHsBDW3Ty3UhlPioiZyIfesNbN6WEiIWTfnf7SRCpRfk4k1LTR6kgHT9mNSfSUqKXWkfGG9KSx9RhKc33O9vt9KhfBX3E/n3K+NbD6D2nT2saOmmEAl2/bYpjQW28R+gAAAABJRU5ErkJggg=='
        self.C_PHILOSOPHY = b'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'
        self.C_PLUS = b'iVBORw0KGgoAAAANSUhEUgAAADEAAAAvCAYAAABKQCL3AAAACXBIWXMAAAsSAAALEgHS3X78AAAC00lEQVRogd1asZLaMBB9Yegvf5AMfMDxB0dDffxBLhV04ZqtSavqUlLd3ReEnobrYXJ8AAz8ACQVJZn1rBxjbEuyDch5M2qwkPd5pV3tkz4cDgeUDSJqAfiYMOxaKbUu+32FSRARG9sF0Jb2yeJvCwBTbkqpcSEDipAgIjZ4AOC+oA1/ADCRYV4vOZMQ418sv7gr3gA8uJKxJkFEn8X4uzMYH8cP8cxvm85WJIioKwRuSjY2CwvxyrupY83UgYiGAH5emADjlhe+fMBMZHqCiPjrf7mU1Rn4qpR6SXuc6gmPCDCeiegh7WGiJ+QPz65vajabaDQaxn6z2Qy73c51eA7F7aQ1ckJCsu0v1zcwOp1O0EwYjUZYLpd5XrEB0IpHraTplDr3PADnpmHcjCMSEoluPSbB+CYJN0RIQvZAg6uZ5oYjb0Q9MbhCLsiLu6g3oiRSQ5inCO0NSEhEOseG7pwIM7n2RNW8wLjRWxJNop3d31sEdtfFOmNY7ff7VtnYBr1ez9hrMpkEzQBeBqjFY27FENQ2xq14FVBLUSUqA07SNT2vKowWk7CqYz3GmkkYa1ifwcrIf7Owq+wJVkRQ5yqJiDamvROXlKZqzLY8nc/n2G63mX1Wq5VxHO0AnbGnJlGASdjAtsbOWZ7GwXaHyW5axohXwBGJsagJVcKb1mwDEqIeFJbYL4xQ0IiG2BMVwWNsoopgSEJc81oREqlCgX7o+9pYxHXZIxLiDd+n1UkpXY//oJR6kkLJ+RiL9VWbJLXf712H1ni00mLxT0ibeqYGviqlEgWNxA2ghNy23pt4gFQCqSQ8I5JJAKYaO0LkWqH30UQAjqenA4lcl9BrN3LoaLWnsy6KOGpJPX5Or3CO+i4HKdab0lw3CuRMe1jimR4bzx/pyfbsOopCdzsi9zq6OfKKvg4xLnq/o9RbNpIk2UvcmGBUDtLTg5PVe2m3bQD8BUwkFtKHqripAAAAAElFTkSuQmCC'
        self.C_RELIGION = b'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'
        self.C_SCIENCE = b'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'
        self.C_SETTINGSHOLDER = b'iVBORw0KGgoAAAANSUhEUgAAAksAAABvCAYAAAD8H4QLAAAACXBIWXMAAAsSAAALEgHS3X78AAAD+UlEQVR4nO3d4W0iRxzG4b9P9z2kAzo4roJQAumAdEAJpANKcAlOBSEdOBWcU0HcAdH4Zq0F41d8OFsx+zwStoQNZsdffpqZ3b05HA51oXlVLftjfumLAAD+Z/ZVdV9Vd5d8rEtiqcXRtqp+qao/+pvv/dcBgA9odjL5c9s75/G1Q/kcjnHW36C92a6qVumNAAA+iGFGaVFVm6p66MG0O/fxX5tZWvTZo/ZYiyQA4Iot+wTR/bnuORdLQyht+gsBAK7dbLTNaDkOpk8nBz4XSgDABD32SKrT5bjTmaX7USwBAEzNrPfQboimcSyt++YmlwUAAKZs2TeBtyZ6HC/Dbc0oAQA8X4fpqYuGWFr17xddnAkA4Mpt+6rbUSzZ0A0A8N1wZtxiiKWlq3IDABxpbbQaNni3LzfGBwDg2WaYWZoZEwCAF9om7/mwDPeP8QEAeOlTv2Llg7EBAHjp9HYnAACMiCUAgEAsAQAEYgkAIBBLAACBWAIACMQSAEAglgAAArEEABCIJQCA4PMbD067Se/CPwAA+MH27zWgbx1L86ravvHfAACmZ/leR/zWsXT/ngcDAPCj2bMEABCIJQCAQCwBAARiCQAgEEsAAIFYAgAIxBIAQCCWAAACsQQAEIglAIBALAEABGIJACAQSwAAgVgCAAjEEgBAIJYAAAKxBAAQiCUAgEAsAQAEYgkAIBBLAACBWAIACMQSAEAglgAAArEEABCIJQCAQCwBAARiCQAgEEsAAIFYAgAIxBIAQCCWAAACsQQAEIglAIBALAEABGIJACAQSwAAgVgCAAjEEgBAIJYAAAKxBAAQiCUAgEAsAQAEYgkAIBBLAACBWAIACMQSAEAglgAAArEEABCIJQCAQCwBAARiCQAgEEsAAIFYAgAIxBIAQCCWAAACsQQAEIglAIBALAEABGIJACAQSwAAgVgCAAjEEgBAIJYAAAKxBAAQiCUAgEAsAQAEQywtDBIAwEtDLP1kbAAAjszqZBlubnwAAJ61lbf9EEt/WYoDADiyrKqHm8Ph0J7c9FhaGyMAgKcluH+r6uchltoS3Lf2RFU9Gh8AYOK2fSJpNcRSc9tDaTP10QEAJq3NKj20UGp7lsaxNMwufa2q+6mPEgAwWbs+q9T2LB2dDdcK6vequhtOlQMAmJj16PFkPLM0uB3VlP1LAMBUtPb5s6p+7ZNHT87d7mTdl+H2LicAAEzEuofSb+NQqnBvuHX/xX3fDQ4AcI3mo9752lfYjqQb6W77LvBhOW5npgkAuBKrHkbf+ora4rUT3M7tWTpn2WebVv1nzpYDAD6idhLbl6r6u8fSXT/J7VWXxtLY3H3kAIAPrE36XHYSW1X9B7nujFFfs9OWAAAAAElFTkSuQmCC'
        self.C_SOCIAL = b''
        self.C_STUDENTFRAME = b'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tXpVQejkLcIHrRXHi+J+FLF+jA+7PAMHDpKRo4pDr9ymr+qSq1Kpqvxayyto08l7hA/S843TWiIq8Z/jQfUsC1v9ts6Vfj+tN+kyRxLCBx3nS0fxNE+s97Prgfa48GHTQHSIrzJRbcIBY5AhABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABOEDwAThA8AE4QPABMaPrUiUsLlB9CTgvCJc9UB9IAJIvK5+PB5U0TGiMhQrjyAblbiM6elzWeliEzlqgPoZqWp4bNCROZw1QF0owm+iUfzpiV8KvznUq48gG6iBZz5IlIvKV3tZf4btP0A6GqlvtQzP3jdWCKRSP4ZFb5BiK53AF0laGSeGrT3SMggwzL/uYISEIAuEARPWXLwSEj41PtGoeAJjP8B0FmlScFTkfoaYdMr6pPCp9I3ElEKApCtuM+P+T6A2gSPZJjbVebraBP8KOgKf58gApAqnlTSqUyqOa1Id6VSG5zTKfEvrJ/H+8dUBV1mAPKWBsxxIrLVB84K/5ExG7INnzAT+HsD8p6GjJZ0OkZE/h9Hoc4MXs/kugAAAABJRU5ErkJggg=='
        self.C_STUDENTHOLDER = b'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'
        self.C_TECHNOLOGY = b'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'
        self.C_BOOKRETURNLINE = b'iVBORw0KGgoAAAANSUhEUgAAAU8AAAACCAYAAADYfF70AAAACXBIWXMAAAsSAAALEgHS3X78AAAAJUlEQVRIie3QQREAAAjDsO4O4ygfGvg3EpK2RZL0sQPEMkl6AA6KFQSEohmjngAAAABJRU5ErkJggg=='
        self.C_BOOKICON = b'iVBORw0KGgoAAAANSUhEUgAAAFYAAABlCAYAAADXuBT0AAAACXBIWXMAAAsSAAALEgHS3X78AAAC6ElEQVR4nO3dT2/ScBzH8W+hY/6gC0RYgmbJuM2bi3sC7BHMR2CAmOjRE3fjzfggPPkoZuJ5I+Gwg+5mD9vgINsAS/ajf8yPCBIEk2V8IozPK2mghZb+3iG0KYdaURTJuGq1mhGRXREpaq0f+L6f2dvbe+K6ruN5Xnf4VqWULhQKCaGp7OHCarVaEpE3IvJ0uCwej7vtdnt72opBELgiMvU1ErF/f0O/jAelu4uJSIlR58+Ezdy3QS2C2KoHQGFYEIYFYVgQhgVhWBCGBWFYEIYFYVgQhgVhWBCGBWFYEIYFYVgQhgVhWBCGBWFYEIYFYVgQhgVhWBCGBWFYEIYFYVgQhgVhWBCGBWFYEIYFYVgQhgVhWBCGBWFYEIYFYVgQhgVhWBCGBWFYEIYFYVgQhgVhWBCGBWFYEIYFYVgQhgVhWBCGBWFYEIYFYVgQhgVhWBCGBWFYEIYFYVgQhgVhWBCGBWFYEIYFYVgQhgVhWBCGBWFYEIYFYVgQe3yz5qZpvu9Lv98fzPf7/U3zWK/Xr7TW8TAMAzNvWZbvOE7UbDbd+xJi3gZhTUzP8zytdXJi+4P5brf71x2UtNY/W60Wb5Q2g621znc6HR1FUdLztDQabV8pZW9tZcVMsyQS69uXl+3FG9GCsHu9Xj6KooSJenj4VQdBOLgP4utXB1J68XzV+9zK0fGJHNdOBqvEgiD4bp6cn1/JMKrjKHn8KLckw1lMdhiGV2bPMpk/P6/v3r6U/f1nq97mTqaebm1sTB7D6LZ4HgvCsCAMC8KwIAwLwrAgDAsyNWyn492Hsf1Xo7DptBrtx/sPn6RW+7ZqLeZqdD12bS0uOzv5m9PTxvrFxQ85/HwkuU1n5meZb3Wvd7Ns44U6O2+ONm+Vy2VzrfWjiBzI4OJ2INfXPcnlZkc1stmH15YVSy9vBizL/GtgVCqVgogURWR3bJoZLpVKuUopXuieYRT2XyqVSnHyZaVUMpVK8Sg3jYj8Aipqug3bdWcMAAAAAElFTkSuQmCC'


# ======================================================================================================================
# END OF IMAGE DATA
# ======================================================================================================================


# ======================================================================================================================
# VALUES
# ======================================================================================================================
class SetupWin():
    width = 350
    height = 500
    line_length = 250
    line_height = 5
    entries = ['Full Name', 'Username', 'Create Password',
               'Confirm Password', 'Security Question', 'Answer']
    questions = ['Select Security Question',
                 'What is your mother\'s maiden name?',
                 'What is the name of your first pet?',
                 'What is your nickname?',
                 'What is the nickname of your best friend?']


class LoginWin():
    width = 343
    height = 355
    title_font = 'century gothic bold', 14
    entry_font = 'century gothic', 12
    question_font = 'century gothic', 12
    icon_width = 25
    button_font = 'century gothic bold', 12
    forgot_font = 'century gothic', 10


class MainMenuWin():
    title = 'Library Management System'
    width = 790
    height = 565


class Font():
    title_font = 'century gothic bold', 16
    title_fg = 'black'
    entry_font = 'century gothic', 12
    button_font = 'century gothic bold', 12


# ======================================================================================================================
# END OF VALUES
# ======================================================================================================================


# ======================================================================================================================
# COLOR RESOURCES
# ======================================================================================================================
class Colors():
    def __init__(self, color=None):
        color = runQuery('SELECT color FROM settings WHERE ID=1', receive=True)
        try:
            color = color[0][0]
        except:
            color = 'blue'
        if color == 'blue':
            self.color_blue()
        elif color == 'red':
            self.color_red()
        elif color == 'dark':
            self.color_black()
        else:
            self.color_blue()
        self.color = color

    def color_blue(self):
        self.color = 'blue'
        self.root_bg = 'white'

        self.foc_out_entry = '#4DC3F7'
        self.foc_in_entry = '#01579B'
        self.entry_bg = '#ECF2F6'
        self.entry_debug = 'red'
        self.entry_warning = 'red'

        self.button_fg = 'white'
        self.button_bg = '#1976D2'

        self.setup_title_fg = 'white'
        self.setup_button_fg = 'white'
        self.setup_button_bg = 'steelblue'

        self.login_title_fg = 'steelblue'
        self.login_button_bg = 'steelblue'
        self.login_button_fg = 'white'

        self.main_sf_bg = '#1976D2'
        self.main_tf_bg = '#0D47A1'
        self.main_button_clicked = '#E91E63'

        self.sf_label_clicked = 'black'
        self.sf_label_normal = 'white'

        self.search_bar_bg = '#EEEEEE'
        self.search_entry_bg = 'white'
        self.search_entry_fg = self.foc_in_entry
        self.modern_entry_fg = 'black'
        self.modern_entry_bg = '#ECF2F6'

    def color_red(self):
        self.color = 'red'
        self.root_bg = 'white'

        self.foc_out_entry = '#F8BBD0'
        self.foc_in_entry = '#E53935'
        self.entry_bg = '#ECF2F6'
        self.entry_debug = 'red'
        self.entry_warning = 'red'

        self.button_fg = 'white'
        self.button_bg = '#E53935'

        self.setup_title_fg = 'white'
        self.setup_button_fg = 'white'
        self.setup_button_bg = '#E53935'

        self.login_title_fg = '#E53935'
        self.login_button_bg = '#E53935'
        self.login_button_fg = 'white'

        self.main_sf_bg = '#EC407A'
        self.main_tf_bg = '#E53935'
        self.main_button_clicked = '#1976D2'

        self.sf_label_clicked = 'black'
        self.sf_label_normal = 'white'

        self.search_bar_bg = '#EEEEEE'
        self.search_entry_bg = 'white'
        self.search_entry_fg = self.foc_in_entry
        self.modern_entry_fg = 'black'
        self.modern_entry_bg = '#ECF2F6'

    def color_black(self):
        self.color = 'blue'
        self.root_bg = '#BDBDBD'

        self.foc_out_entry = '#9E9E9E'
        self.foc_in_entry = 'black'
        self.entry_bg = '#ECF2F6'
        self.entry_debug = 'red'
        self.entry_warning = 'red'

        self.button_fg = 'white'
        self.button_bg = '#424242'

        self.setup_title_fg = 'white'
        self.setup_button_fg = 'white'
        self.setup_button_bg = 'steelblue'

        self.login_title_fg = 'white'
        self.login_button_bg = 'steelblue'
        self.login_button_fg = 'white'

        self.main_sf_bg = '#757575'
        self.main_tf_bg = '#424242'
        self.main_button_clicked = '#FAFAFA'
        self.sf_label_clicked = 'black'
        self.sf_label_normal = '#FAFAFA'

        self.search_bar_bg = '#757575'
        self.search_entry_bg = 'white'
        self.search_entry_fg = 'black'
        self.modern_entry_fg = 'black'
        self.modern_entry_bg = '#ECF2F6'
        self.gray_entry_bg = '#5A5A5A'


# ======================================================================================================================
# END OF COLOR RESOURCES
# ======================================================================================================================


# ======================================================================================================================
# COMMON
# ======================================================================================================================
def set_geometry(root, screen_width, screen_height, win_width, win_height):
    x = int(screen_width / 2 - win_width / 2)
    y = int(screen_height / 2 - win_height / 2)
    str1 = str(win_width) + 'x' + str(win_height) + '+' + str(x) + '+' + str(y)
    root.geometry(str1)


def get_coords(canvas, line_length, line_height):
    canvas_width = int(canvas.cget('width'))
    canvas_height = int(canvas.cget('height'))
    x1 = int(canvas_width / 2 - line_length / 2)
    y1 = int(canvas_height / 2 - line_height / 2) + 3
    x2 = x1 + line_length
    y2 = y1
    return x1, y1, x2, y2


def get_image(location):
    with open(location, 'rb') as img_file:
        my_string = base64.b64encode(img_file.read())
    return tk.PhotoImage(data=my_string)


# ======================================================================================================================
from PIL import Image, ImageTk
from tkinter import PhotoImage


def set_image(location, width=0, height=0):
    if height == 0:
        height = width
    image = Image.open(location)
    if not width == 0:
        image = image.resize((width, height), Image.ANTIALIAS)
    return ImageTk.PhotoImage(image)


def place_center(widget, frame):
    width = int(frame.cget('width'))
    height = int(frame.cget('height'))
    widget_width = widget.winfo_reqwidth()
    widget_height = widget.winfo_reqheight()
    x = int(width / 2 - widget_width / 2)
    y = int(height / 2 - widget_height / 2)
    widget.place(x=x, y=y)


# ======================================================================================================================


MSG_ENTRY_EMPTY = 'Entry Empty'
MSG_ENTRY_INVALID = 'Invalid Input'
MAX_BOOK = 3


# =====================================================================================================================
class TitleFrame(tk.Frame):
    def __init__(self, master=None, title=None, width=None, height=None, bg=None):
        super().__init__(master)
        self['width'] = width
        self['height'] = height
        self['bg'] = bg
        self.Image = ImageData()
        self.master = master
        self.C = Colors()
        self.about_flag = False
        self.icon_holder = ImageLabel(self, data=self.Image.C_TITLE_ICON, bg=self.cget('bg'))
        self.title = tk.Label(self, text=title, font=('century gothic bold', 15), fg='white', bg=bg)
        self.icon_holder.place(x=38, y=0)
        self.title.place(x=120, y=18)
        self.about_icon = ImageLabel(self, data=self.Image.C_INFO, bg=self.cget('bg'), command=self.about_window)
        self.about_icon.place(x=725, y=8)

    def about_window(self, event=None):
        about = tk.Toplevel(self.master)
        about.grab_set()
        about_width = 550
        about_height = 280
        set_geometry(about, self.winfo_screenwidth(), self.winfo_screenheight(), about_width, about_height)
        # SET ICON
        icondata = base64.b64decode(LMSICO)
        temp_file = 'lms_about.ico'
        iconfile = open(temp_file, 'wb')
        iconfile.write(icondata)
        iconfile.close()
        about.wm_iconbitmap(temp_file)
        about.resizable(0, 0)
        # SETTING UP FRAME
        about.config(bg=self.C.root_bg)
        about.title('About')
        self.icon_frame = tk.Frame(about, bg=self.C.root_bg, width=206, height=253)
        self.icon = ImageLabel(self.icon_frame, data=LMSABOUTICON, bg=self.C.root_bg)
        # ==============================================================================================================
        self.text_frame = tk.Frame(about, width=about_width - 206, height=about_height, bg=self.C.root_bg, padx=10,
                                   pady=10)
        self.title_label = tk.Label(self.text_frame, text='Library Management System', font=GOTHICBOLD[16])
        self.version_label = tk.Label(self.text_frame, text='Version 1.0', font=GOTHIC[14])
        text = 'This software is not for sale and is developed as partial fulfillment of the Requirements for the Degree ' \
               'Bachelor of Science in Computer Engineering at the Bohol Island State University, Bohol, Philippines.'
        self.comment_label = tk.Label(self.text_frame, text=text, font=GOTHIC[12], wraplength=300)
        icon_comment = 'Icons used:'
        self.icon_label = tk.Label(self.text_frame, text=icon_comment, font=GOTHICBOLD[16])
        link = 'https://icons8.com'
        self.link = tk.Label(self.text_frame, text=link, font=GOTHIC[13])
        self.link.bind('<Button-1>', lambda e: self.callback(link))
        # ==============================================================================================================
        self.place_widgets()

    def callback(self, url):
        webbrowser.open_new(url)

    def place_widgets(self):
        self.icon_frame.place(x=0, y=0)
        self.icon.pack(padx=15, pady=15)
        self.text_frame.place(x=230, y=0)
        self.title_label.pack(anchor=tk.W)
        self.version_label.pack(anchor=tk.W, padx=8)
        self.comment_label.pack(anchor=tk.W)
        self.icon_label.pack(anchor=tk.W)
        self.link.pack(anchor=tk.W)
        for child in self.text_frame.winfo_children():
            child.config(fg=self.C.foc_in_entry, bg=self.C.root_bg, justify=tk.LEFT)


# =====================================================================================================================
class LabelWithImage(tk.Label):
    def __init__(self, master=None, image=None, data=None, text=None, id=None, bg=None, command=None, font=None,
                 fg=None):
        super().__init__(master)
        try:
            self['image'] = data
        except:
            self.data = tk.PhotoImage(data=data)
            self['image'] = self.data
        self['bg'] = bg
        self['text'] = text
        self['font'] = font
        self['fg'] = fg
        self.id = id
        self.command = command
        self.bind('<Button-1>', self.command)
        # ==============================================================================================================
        self.c = Colors()
        self.config(bg=self.c.main_sf_bg)
        self.bind('<Button-1>', self.command)
        # ==============================================================================================================

    def exec_command(self):
        self.after(100, self.command)

    def get_id(self):
        return self.id


# =====================================================================================================================
class Menu(tk.Frame):
    def __init__(self, master=None, image=None, text='Menu', id=None, bg='steelblue', command=None, width=None):
        super().__init__(master)
        width = master.cget('width')
        self['width'] = 120
        self['height'] = 82
        self['bg'] = bg
        # self['relief'] = 'groove'
        self['bd'] = 3
        self.id = id
        # ==============================================================================================================
        self.c = Colors()
        self.config(bg=self.c.main_sf_bg)
        # ==============================================================================================================
        self.bg = self.c.main_sf_bg
        self.command = command
        icon_width = 40
        # self.icon = set_image(image, icon_width)
        # self.icon = get_image(image)
        self.icon_holder = LabelWithImage(self, data=image, bg=bg, command=self.command, id=self.id)
        self.label = LabelWithImage(self, text=text, bg=bg, font=('century gothic bold', 10), fg='white',
                                    command=self.command, id=self.id)
        x = int(self.cget('width') / 2 - self.icon_holder.winfo_reqwidth() / 2)
        y = int(self.cget('height') * .25 - self.icon_holder.winfo_reqheight() / 2)
        self.icon_holder.place(x=x - 2, y=y + 4)
        x = int(self.cget('width') / 2 - self.label.winfo_reqwidth() / 2)
        y = int(self.cget('height') * .75 - self.label.winfo_reqheight() / 2)
        self.label.place(x=x - 2, y=y)
        self.bind('<Button-1>', self.command)
        for child in self.winfo_children():
            child.bind('<Button-1>', self.command)
        self.C = Colors()

    def exec_command(self, event=None):
        self.after(10, self.command)

    def active(self):
        self.config(bg=self.c.main_button_clicked)
        for child in self.winfo_children():
            child.config(bg=self.c.main_button_clicked, fg=self.C.sf_label_clicked)

    def normal(self):
        self.config(bg=self.bg)
        for child in self.winfo_children():
            child.config(bg=self.bg, fg=self.C.sf_label_normal)

    def get_id(self):
        return self.id


# =====================================================================================================================
class ImageLabel(tk.Frame):
    def __init__(self, master=None, image=None, data=None, bg=None, command=None):
        super().__init__(master)
        if not image == None:
            self.image = get_image(image)
        if not data == None:
            self.image = tk.PhotoImage(data=data)
        self.label = tk.Label(self, image=self.image, bg=bg)
        height = self.label.winfo_reqheight()
        width = self.label.winfo_reqwidth()
        self['height'] = height
        self['width'] = width
        self.label.pack()
        self.label.bind('<Button-1>', command)

    def test(self):
        msg.showinfo('Information', 'This is a test.')


# =====================================================================================================================


class Checkbox(tk.Frame):
    def __init__(self, master=None, command=None):
        super().__init__(master)
        self.normal = tk.PhotoImage(data=CHECKBOXB64)
        self.active = tk.PhotoImage(data=ACTIVECHECKBOXB64)
        self.is_active = False
        self.C = Colors()
        self.label = tk.Label(self, image=self.normal, bg=self.C.root_bg)
        self.command = command
        height = self.label.winfo_reqheight()
        width = self.label.winfo_reqwidth()
        self['height'] = height
        self['width'] = width
        self.label.pack()
        self.label.bind('<Button-1>', self.command)

    def is_marked(self):
        return self.is_active

    def toggle(self, event=None):
        if not self.is_active:
            self.label.config(image=self.active)
            self.is_active = True
        else:
            self.label.config(image=self.normal)
            self.is_active = False

    def mark(self, event=None):
        self.label.config(image=self.active)
        self.is_active = True

    def unmark(self, event=None):
        self.label.config(image=self.normal)
        self.is_active = False


# ======================================================================================================================
# COMMON
# ======================================================================================================================


# ======================================================================================================================
# MODIFIED WIDGETS
# ======================================================================================================================
class EntryWithPlaceHolder(tk.Entry):
    def __init__(self, master=None, placeholder='PLACEHOLDER', show=None, width=32, bg=None, font=GOTHIC[13],
                 fg=None):
        super().__init__(master)
        self.master = master
        self.C = Colors()
        self.placeholder = placeholder
        self.placeholder_color = self.C.foc_out_entry
        if fg == None:
            self.default_fg_color = self.C.foc_in_entry
        else:
            self.default_fg_color = fg
        self.bind('<FocusIn>', self.foc_in)
        self.bind('<FocusOut>', self.foc_out)
        self['font'] = font
        self['width'] = width
        self['borderwidth'] = 0
        self['bg'] = bg
        self.show = show
        self.put_placeholder()

    def put_placeholder(self):
        self.insert(0, self.placeholder)
        self['fg'] = self.placeholder_color

    def foc_in(self, *args):
        if self['fg'] == self.placeholder_color:
            self.delete('0', 'end')
            self['fg'] = self.default_fg_color
            self['show'] = self.show

    def foc_out(self, *args):
        if not self.get():
            self.put_placeholder()
            self['show'] = ''

    def is_empty(self):
        if self.get() == self.placeholder or self.get() == '':
            return True, self.placeholder
        else:
            return False

    def is_valid(self):
        user_input = self.get()
        is_valid = True
        msg = ''
        if self.placeholder == 'First Name' or self.placeholder == 'Last Name':
            if not user_input.isalpha():
                is_valid = False
                msg = 'Name should not contain integers or characters.'
        elif self.placeholder == 'Username':
            temp = ''
            temp += user_input[0]
            if not temp.isalpha():
                is_valid = False
                msg = 'Username should not start with integers or characters.'
            for char in user_input:
                if char.isspace():
                    is_valid = False
                    msg = 'Username should not contain any spaces.'
        return is_valid, msg

    def reset(self):
        self.delete(0, 50)
        self.foc_out()


class Entry(tk.Frame):
    def __init__(self, master=None, placeholder=None, icon=None, hint=None, show=None, message=None, fg=None,
                 bg=None):
        super().__init__(master)
        self.C = Colors()
        self.Image = ImageData()
        self['bg'] = self.C.root_bg
        self.message = message
        self.placeholder = placeholder
        self.entry_bg = PhotoImage(data=self.Image.C_ENTRY)
        if bg == None:
            bg = self.C.root_bg
        self.label = tk.Label(self, image=self.entry_bg, bg=self.C.root_bg)
        self['width'] = self.label.winfo_reqwidth()
        self['height'] = self.label.winfo_reqheight()
        self.label.place(x=0, y=0)
        if fg == None:
            self.fg = self.C.modern_entry_fg
            if self.C.color != 'dark':
                self.fg = self.C.foc_in_entry
        else:
            self.fg = fg
        self.entry = EntryWithPlaceHolder(self, placeholder, show=show, bg=self.C.modern_entry_bg, fg=self.fg)
        if icon:
            self.entry_icon = PhotoImage(data=icon)
            self.entry_icon_holder = tk.Label(self, image=self.entry_icon, bg=self.C.entry_bg)
            self.entry.config(width=29)
            self.entry_icon_holder.place(x=15, y=8)
            self.entry.place(x=60, y=17)
        else:
            self.entry.place(x=15, y=15)
        if hint:
            self.entry_hint = PhotoImage(data=hint)
            self.entry_hint_holder = tk.Label(self, image=self.entry_hint, bg=self.C.entry_bg)
            self.entry_hint_holder.place(x=self['width'] - 35, y=16)
            self.entry_hint_holder.bind('<Button-1>', self.execute_hint)
        self.label.bind('<Button-1>', self.foc_in)
        self.book_classes = [
            'general', 'philosophy', 'religion', 'social', 'language', 'science', 'technology', 'art', 'literature',
            'history'
        ]

    def is_class_valid(self):
        self.text = self.get()
        for book_class in self.book_classes:
            if self.text.lower() == book_class:
                return True, 'success'
        return False, 'Invalid Class\nClasses: General, Philosophy, Religion, Language, Science, Technology,' \
                      'Art, Literature, History'

    def is_id_valid(self):
        self.text = self.get()
        try:
            int(self.text)
        except:
            return False, 'ID must be integer'
        if not len(self.text) == 12:
            return False, 'ID must be 12 digits.'
        all_id = runQuery('SELECT ID FROM students', receive=True)
        for id in all_id:
            if self.text == id[0]:
                return False, 'ID is already in the database.'
        return True, 'Valid'

    def is_contact_valid(self):
        self.text = self.get()
        try:
            int(self.text)
        except:
            return False, 'Contact # must be integer'
        if not len(self.text) == 11:
            return False, 'Contact # must be 11 digits'
        return True, 'Valid'

    def execute_hint(self, event=None):
        if self.message:
            msg.showinfo('Information', self.message)
            self.focus()
        else:
            self.show = self.entry.cget('show')
            if self.show == '' and self.entry.get() != self.placeholder:
                self.entry.config(show='\u2022')
            else:
                self.entry.config(show='')

    def foc_in(self, event=None):
        self.entry.focus()

    def is_empty(self):
        if self.entry.get() == self.placeholder or self.entry.get() == '':
            return True, self.placeholder
        else:
            return False

    def get(self):
        return self.entry.get()

    def reset(self):
        self.entry.reset()
        self.entry.foc_out()

    def insert(self, text):
        self.entry.delete(0, 50)
        self.entry.foc_in()
        self.entry.insert(0, text)


class Button(tk.Frame):
    def __init__(self, master=None, text='Button', command=None):
        super().__init__(master)
        self.C = Colors()
        self['bg'] = self.C.root_bg
        self.command = command
        self.Image = ImageData()
        self.button_icon = PhotoImage(data=self.Image.C_BUTTON)
        self.label = tk.Label(self, image=self.button_icon, bg=self.C.root_bg)
        self['width'] = self.label.winfo_reqwidth()
        self['height'] = self.label.winfo_reqheight()
        self.label.place(x=0, y=0)
        self.text = tk.Label(self, text=text, font=GOTHIC[16], fg=self.C.button_fg, bg=self.C.button_bg)
        place_center(self.text, self)
        self.bind('<Button-1>', self.execute)
        self.label.bind('<Button-1>', self.execute)
        self.text.bind('<Button-1>', self.execute)

    def execute(self, event=None):
        self.after(100, self.command)


# ======================================================================================================================
# MODIFIED WIDGETS
# ======================================================================================================================


# ======================================================================================================================
# SETTINGS
# ======================================================================================================================
class EditProfile(tk.Toplevel):
    def __init__(self, master=None):
        super().__init__(master)
        self.C = Colors()
        set_geometry(self, self.winfo_screenwidth(), self.winfo_screenheight(), SetupWin.width, SetupWin.height)
        self.grab_set()
        icondata = base64.b64decode(SETUPICO)
        self.temp_file = 'login.ico'
        iconfile = open(self.temp_file, 'wb')
        iconfile.write(icondata)
        iconfile.close()
        self.wm_iconbitmap(self.temp_file)
        self.resizable(0, 0)
        self['bg'] = self.C.root_bg
        self.title('Edit Profile')
        self.master = master
        self.Image = ImageData()
        # ==============================================================================================================
        self.title_frame = tk.Canvas(self, height=50, width=SetupWin.width, bg=self.C.main_tf_bg)
        self.entry_frame = tk.Frame(self, height=210, bg=self.C.root_bg)
        self.button_frame = tk.Frame(self, height=50, bg=self.C.root_bg)
        # ==============================================================================================================
        line_coords = get_coords(self.title_frame, SetupWin.line_length, SetupWin.line_height)
        self.line = self.title_frame.create_line(line_coords, fill=self.C.setup_title_fg)
        self.title = tk.Label(self.title_frame, text='Edit Profile', font=Font.title_font, fg=self.C.setup_title_fg,
                              bg=self.title_frame.cget('bg'))

        self.fname_entry = Entry(self.entry_frame, SetupWin.entries[0])
        self.username_entry = Entry(self.entry_frame, SetupWin.entries[1])
        self.password_entry = Entry(self.entry_frame, SetupWin.entries[2], show='\u2022', hint=self.Image.C_EYE)
        self.confirm_password_entry = Entry(self.entry_frame, SetupWin.entries[3], show='\u2022', hint=self.Image.C_EYE)
        self.security_question_entry = Entry(self.entry_frame, SetupWin.entries[4], hint=self.Image.C_INFOSMALL,
                                             message='Create a question that only you know the answer.\n'
                                                     'Example: What is the name of your first pet?')
        self.answer_entry = Entry(self.entry_frame, SetupWin.entries[5])

        self.button = Button(self.button_frame, text='Confirm', command=self.edit_profile)
        # ==============================================================================================================
        self.place_widgets()
        self.bind('<Return>', self.edit_profile)
        self.after(200, self.focus)
        # ==============================================================================================================

    def edit_profile(self, event=None):
        for entry in self.entry_frame.winfo_children():
            try:
                if entry.is_empty():
                    msg.showerror(MSG_ENTRY_EMPTY, entry.is_empty()[1] + ' entry is empty.')
                    self.focus()
                    return
                if not entry.is_valid()[0]:
                    msg.showerror(MSG_ENTRY_INVALID, entry.is_valid()[1])
                    self.focus()
                    return
            except:
                if entry.get() == 'Select Security Question':
                    msg.showerror(MSG_ENTRY_EMPTY, 'Please choose a security question.')
                    self.focus()
                    return
        # ==============================================================================================================
        fname = self.fname_entry.get()
        username = self.username_entry.get()
        password = self.password_entry.get()
        password2 = self.confirm_password_entry.get()
        question = self.security_question_entry.get()
        answer = self.answer_entry.get().lower()
        if not password == password2:
            msg.showerror('Error', 'Password don\'t match.')
            self.focus()
            return
        runQuery('DROP TABLE IF EXISTS admin')
        runQuery("""CREATE TABLE admin (name TEXT NOT NULL,
                                        username TEXT NOT NULL,
                                        password TEXT NOT NULL,
                                        question TEXT NOT NULL,
                                        answer TEXT NOT NULL)""")
        runQuery("INSERT INTO admin VALUES (:name, :username, :password, :question, :answer)",
                 {
                     'name': fname,
                     'username': username,
                     'password': sha256_crypt.hash(password),
                     'question': question,
                     'answer': sha256_crypt.hash(answer)
                 })
        msg.showinfo('Information', 'Profile edited successfully.')
        self.destroy()
        # ==============================================================================================================
        self.master.name_label.config(text=fname)
        self.master.username_label.config(text=username)
        # ==============================================================================================================

    def place_widgets(self):
        self.title_frame.pack(fill=tk.X)
        self.entry_frame.pack(fill=tk.X, padx=10)
        self.button_frame.pack(fill=tk.X)
        # ==============================================================================================================
        place_center(self.title, self.title_frame)

        sticky = {'sticky': 'nsew'}
        self.fname_entry.grid()
        self.username_entry.grid(row=1, columnspan=2, **sticky)
        self.password_entry.grid(row=2, columnspan=2, **sticky)
        self.confirm_password_entry.grid(row=3, columnspan=2, **sticky)
        self.security_question_entry.grid(row=4, columnspan=2, **sticky)
        self.answer_entry.grid(row=5, columnspan=2, **sticky)
        for child in self.entry_frame.winfo_children():
            child.grid_configure(pady=3)

        self.button.pack(pady=3, padx=10, fill=tk.X)
        # ==============================================================================================================


class EnterPassword(tk.Toplevel):
    def __init__(self, master=None):
        super().__init__(master)
        self.C = Colors()
        self['bg'] = self.C.root_bg
        self.master = master
        self.edit_flag = False
        self.Image = ImageData()
        set_geometry(self, self.winfo_screenwidth(), self.winfo_screenheight(), 340, 130)
        self.grab_set()
        icondata = base64.b64decode(SETUPICO)
        self.temp_file = 'login.ico'
        iconfile = open(self.temp_file, 'wb')
        iconfile.write(icondata)
        iconfile.close()
        self.wm_iconbitmap(self.temp_file)
        self.title('Enter Password')
        self.entry = Entry(self, 'Enter Password', show='\u2022', hint=self.Image.C_EYE)
        self.button = Button(self, text='Confirm', command=self.confirm)
        self.entry.pack(padx=5, pady=5)
        self.button.pack(padx=5)
        self.bind('<Return>', self.confirm)
        self.after(200, self.focus)

    def confirm(self, event=None):
        if self.entry.is_empty():
            msg.showerror('Error', 'Password entry is emtpy.')
            self.focus()
            return
        self.password = runQuery('SELECT password FROM admin', receive=True)[0][0]
        if not sha256_crypt.verify(self.entry.get(), self.password):
            msg.showerror('Error', 'Incorrect Password.')
            self.focus()
            return
        self.destroy()
        if not self.edit_flag:
            self.edit_toplevel = EditProfile(self.master)
            self.edit_flag = True
        else:
            self.edit_toplevel.destroy()
            self.edit_toplevel = EditProfile(self.master)


class AdminFrame(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.C = Colors()
        self['width'] = master.cget('width')
        self['height'] = master.cget('height')
        self['bg'] = self.C.root_bg
        self.admin_icon = ImageLabel(self, data=ADMINSMALL, bg=self.C.root_bg)
        self.pack()
        self.password_flag = False
        # ==============================================================================================================
        self.name = runQuery('SELECT name FROM admin', receive=True)[0][0]
        self.username = runQuery('SELECT username FROM admin', receive=True)[0][0]
        # ==============================================================================================================
        self.username_label = tk.Label(self, text=self.username, font=GOTHIC[10], fg=self.C.foc_in_entry,
                                       bg=self.C.root_bg)
        self.name_label = tk.Label(self, text=self.name, font=GOTHICBOLD[13], fg=self.C.foc_in_entry, bg=self.C.root_bg)
        self.edit_button = ImageLabel(self, data=EDITPROFILE, bg=self.C.root_bg, command=self.edit_profile)
        # ==============================================================================================================
        # ==============================================================================================================
        self.place_widgets()
        # ==============================================================================================================

    def edit_profile(self, event=None):
        if not self.password_flag:
            self.ep_toplevel = EnterPassword(self)
            self.password_flag = True
        else:
            self.ep_toplevel.destroy()
            self.ep_toplevel = EnterPassword(self)

    def place_widgets(self):
        self.admin_icon.place(x=20, y=0)
        self.name_label.place(x=90, y=10)
        self.username_label.place(x=90, y=30)
        self.edit_button.place(x=460, y=11)


class Appearance(tk.Frame):
    def __init__(self, master, refresh_list=None, root=None):
        super().__init__(master)
        self.C = Colors()
        self['bg'] = self.C.root_bg
        self['width'] = master.cget('width')
        self['height'] = master.cget('height')
        self.pack()
        self.refresh_list = refresh_list
        self.root = root
        self.label1 = tk.Label(self, text='Blue', font=GOTHIC[12], fg=self.C.foc_in_entry, bg=self.C.root_bg)
        self.label2 = tk.Label(self, text='Red', font=GOTHIC[12], fg=self.C.foc_in_entry, bg=self.C.root_bg)
        self.label3 = tk.Label(self, text='Dark', font=GOTHIC[12], fg=self.C.foc_in_entry, bg=self.C.root_bg)
        self.checkbox1 = Checkbox(self, command=self.toggle1)
        self.checkbox2 = Checkbox(self, command=self.toggle2)
        self.checkbox3 = Checkbox(self, command=self.toggle3)
        self.button = ImageLabel(self, data=APPLY, bg=self.C.root_bg, command=self.change_appearance)
        # ==============================================================================================================
        self.place_widgets()
        # ==============================================================================================================

    def change_appearance(self, event=None):
        if self.checkbox1.is_marked():
            color = 'blue'
            if not runQuery('UPDATE settings SET color=:color', {'color': color}):
                msg.showerror('Error', 'Cannot change appearance at the moment.\nPlease try again later.')
                return
        elif self.checkbox2.is_marked():
            color = 'red'
            if not runQuery('UPDATE settings SET color=:color', {'color': color}):
                msg.showerror('Error', 'Cannot change appearance at the moment.\nPlease try again later.')
                return
        elif self.checkbox3.is_marked():
            color = 'dark'
            if not runQuery('UPDATE settings SET color=:color', {'color': color}):
                msg.showerror('Error', 'Cannot change appearance at the moment.\nPlease try again later.')
                return
        else:
            msg.showinfo('Information', 'No theme selected.')
            return
        if self.C.color != color:
            for root in self.refresh_list:
                root.refresh()
        else:
            msg.showinfo('Information', 'Selected color is already applied.')

    def reset_checkboxes(self):
        self.checkbox1.unmark()
        self.checkbox2.unmark()
        self.checkbox3.unmark()

    def toggle1(self, event=None):
        self.reset_checkboxes()
        self.checkbox1.mark()

    def toggle2(self, event=None):
        self.reset_checkboxes()
        self.checkbox2.mark()

    def toggle3(self, event=None):
        self.reset_checkboxes()
        self.checkbox3.mark()

    def place_widgets(self):
        self.label1.place(x=10, y=5)
        self.label2.place(x=10, y=26)
        self.label3.place(x=10, y=47)
        self.checkbox1.place(x=150, y=10)
        self.checkbox2.place(x=150, y=30)
        self.checkbox3.place(x=150, y=50)
        self.button.place(x=457, y=18)


class Settings(tk.Frame):
    def __init__(self, master=None, refresh_list=None, root=None):
        super().__init__(master)
        self.C = Colors()
        self.Image = ImageData()
        self['bg'] = self.C.root_bg
        self['height'] = master.cget('height')
        self['width'] = master.cget('width')
        self.refresh_list = refresh_list
        self.root = root
        self.master = master
        self.admin_holder = ImageLabel(self, data=self.Image.C_DATEHOLDER, bg=self.C.root_bg)
        self.appearance_holder = ImageLabel(self, data=self.Image.C_SETTINGSHOLDER, bg=self.C.root_bg)
        self.advanced_holder = ImageLabel(self, data=self.Image.C_SETTINGSHOLDER, bg=self.C.root_bg)
        self.admin_frame = tk.Frame(self, width=570, height=63, bg='black')
        self.title1 = tk.Label(self, text='Appearance', font=GOTHICBOLD[13], fg=self.C.foc_in_entry, bg=self.C.root_bg)
        self.title2 = tk.Label(self, text='Advanced Settings', font=GOTHICBOLD[13], fg=self.C.foc_in_entry,
                               bg=self.C.root_bg)
        self.appearance_frame = tk.Frame(self, width=570, height=74, bg=self.C.root_bg)
        self.view_btn = ImageLabel(self, data=VIEWHISTORY, bg=self.C.root_bg, command=self.view_history)
        # ==============================================================================================================
        self.admin = AdminFrame(self.admin_frame)
        self.appearance = Appearance(self.appearance_frame, self.refresh_list, self)
        # ==============================================================================================================
        # ==============================================================================================================
        self.place_widgets()
        # ==============================================================================================================

    def refresh(self):
        self.destroy()
        self.__init__(self.master)

    def view_history(self, event=None):
        msg.showinfo('Information', 'Not supported yet.')

    def place_widgets(self):
        self.admin_holder.place(x=40, y=40)
        self.appearance_holder.place(x=40, y=136)
        self.advanced_holder.place(x=40, y=271)
        self.admin_frame.place(x=50, y=48)
        self.appearance_frame.place(x=50, y=170)
        self.title1.place(x=63, y=140)
        self.title2.place(x=63, y=275)
        self.view_btn.place(x=63, y=312)


# ======================================================================================================================
# SETTINGS
# ======================================================================================================================


# ======================================================================================================================
# MANAGE STUDENTS
# ======================================================================================================================
STUDENTS = []
SEARCHSTUDENTS = []


class EditStudent(tk.Toplevel):
    def __init__(self, master=None, ID=None, icon=None):
        super().__init__(master)
        self.C = Colors()
        self['bg'] = self.C.root_bg
        set_geometry(self, self.winfo_screenwidth(), self.winfo_screenheight(), 400, 510)
        self.grab_set()
        self.wm_iconbitmap(icon)
        self.resizable(0, 0)
        self.title('Edit Student')
        self.icon = ImageLabel(self, data=STUDENTB64, bg=self.C.root_bg)
        self.ID = ID
        self.id_entry = Entry(self, 'ID', fg=self.C.foc_in_entry, bg=self.C.modern_entry_bg)
        self.name_entry = Entry(self, 'Full Name', fg=self.C.foc_in_entry, bg=self.C.modern_entry_bg)
        self.grade_entry = Entry(self, 'Grade & Section', fg=self.C.foc_in_entry, bg=self.C.modern_entry_bg)
        self.address_entry = Entry(self, 'Address', fg=self.C.foc_in_entry, bg=self.C.modern_entry_bg)
        self.contact_entry = Entry(self, 'Contact #', fg=self.C.foc_in_entry, bg=self.C.modern_entry_bg)
        self.button = Button(self, 'Confirm', command=self.edit_student)
        self.pack_widgets()
        # ==============================================================================================================
        self.name = runQuery('SELECT name FROM students WHERE ID=:ID', {'ID': ID}, receive=True)
        self.grade = runQuery('SELECT grade FROM students WHERE ID=:ID', {'ID': ID}, receive=True)
        self.address = runQuery('SELECT address FROM students WHERE ID=:ID', {'ID': ID}, receive=True)
        self.contact = runQuery('SELECT contact FROM students WHERE ID=:ID', {'ID': ID}, receive=True)
        self.id_entry.insert(ID)
        self.name_entry.insert(self.name[0][0])
        self.grade_entry.insert(self.grade[0][0])
        self.address_entry.insert(self.address[0][0])
        self.contact_entry.insert(self.contact[0][0])
        self.focus()
        # ==============================================================================================================

    def pack_widgets(self):
        for child in self.winfo_children():
            child.pack(pady=2)

    def edit_student(self):
        for entry in self.winfo_children():
            try:
                if entry.is_empty():
                    msg.showerror(MSG_ENTRY_EMPTY, entry.is_empty()[1] + ' entry is empty.')
                    self.focus()
                    return
                if not entry.is_valid()[0]:
                    msg.showerror(MSG_ENTRY_INVALID, entry.is_valid()[1])
                    self.focus()
                    return
            except:
                pass
        # ==============================================================================================================
        # ==============================================================================================================
        response = self.id_entry.is_id_valid()
        if not response[0]:
            msg.showerror('Error', response[1])
            self.focus()
            return
        if len(self.name_entry.get()) > 23:
            msg.showerror('Error', 'Name exceeds 23 characters.')
            self.focus()
            return
        if len(self.grade_entry.get()) > 30:
            msg.showerror('Error', 'Grade exceeds 30 characters.')
            self.focus()
            return
        if len(self.address_entry.get()) > 30:
            msg.showerror('Error', 'Address exceeds 30 characters.')
            self.focus()
            return
        response = self.contact_entry.is_contact_valid()
        if not response[0]:
            msg.showerror('Error', response[1])
            self.focus()
            return
        old_bookpass = runQuery('SELECT bookpass FROM students WHERE ID=:ID', {'ID': self.ID}, receive=True)
        if runQuery('UPDATE students SET ID=:ID, name=:name, grade=:grade, address=:address, contact=:contact,'
                    'bookpass=:bookpass WHERE ID=:old_ID',
                    {
                        'ID': self.id_entry.get(),
                        'name': self.name_entry.get(),
                        'grade': self.grade_entry.get(),
                        'address': self.address_entry.get(),
                        'contact': self.contact_entry.get(),
                        'bookpass': old_bookpass[0][0],
                        'old_ID': self.ID
                    }):
            msg.showinfo('Information', 'Student successfully updated.')
            self.master.update_details(self.id_entry.get())
            self.destroy()


class StudentDetails(tk.Toplevel):
    def __init__(self, master=None, ID=None, edit=True):
        super().__init__(master)
        self.master = master
        self.C = Colors()
        self['bg'] = self.C.root_bg
        set_geometry(self, self.winfo_screenwidth(), self.winfo_screenheight(), 400, 500)
        self.grab_set()
        icondata = base64.b64decode(LMSICO)
        self.temp_file = 'login.ico'
        iconfile = open(self.temp_file, 'wb')
        iconfile.write(icondata)
        iconfile.close()
        self.wm_iconbitmap(self.temp_file)
        self.focus()
        self.resizable(0, 0)
        self.title('Student\'s Details')
        self.icon = ImageLabel(self, data=STUDENTB64, bg=self.C.root_bg)
        self.ID = ID
        self.edit = edit
        self.Image = ImageData()
        # ==============================================================================================================
        self.name = runQuery('SELECT name FROM students WHERE ID=:ID', {'ID': ID}, receive=True)
        self.grade = runQuery('SELECT grade FROM students WHERE ID=:ID', {'ID': ID}, receive=True)
        self.address = runQuery('SELECT address FROM students WHERE ID=:ID', {'ID': ID}, receive=True)
        self.contact = runQuery('SELECT contact FROM students WHERE ID=:ID', {'ID': ID}, receive=True)
        self.bookpass = runQuery('SELECT bookpass FROM students WHERE ID=:ID', {'ID': ID}, receive=True)
        self.id_label = tk.Label(self, text='ID: ' + ID, fg=self.C.foc_in_entry, bg=self.C.root_bg, font=GOTHIC[13])
        self.name_label = tk.Label(self, text=self.name[0][0], fg=self.C.foc_in_entry, bg=self.C.root_bg,
                                   font=GOTHICBOLD[15])
        self.grade_label = tk.Label(self, text=self.grade[0][0], fg=self.C.foc_in_entry, bg=self.C.root_bg,
                                    font=GOTHIC[13])
        self.address_label = tk.Label(self, text=self.address[0][0], fg=self.C.foc_in_entry, bg=self.C.root_bg,
                                      font=GOTHIC[13])
        self.contact_label = tk.Label(self, text=self.contact[0][0], fg=self.C.foc_in_entry, bg=self.C.root_bg,
                                      font=GOTHIC[13])
        self.books = ImageLabel(self, data=self.Image.C_BOOKS[self.bookpass[0][0]], bg=self.C.root_bg)
        self.button = Button(self, text='Edit Student', command=self.edit_student)
        self.bind('<Return>', self.edit_student)
        self.pack_widgets()

    def edit_student(self, event=None):
        self.edit = EditStudent(self.master, ID=self.ID, icon=self.temp_file)
        self.destroy()

    def pack_widgets(self):
        self.icon.pack(pady=10)
        self.id_label.pack()
        self.name_label.pack()
        self.grade_label.pack()
        self.address_label.pack()
        self.contact_label.pack()
        self.books.pack(pady=10)
        if self.edit:
            self.button.pack(pady=10)


class Student(tk.Frame):
    def __init__(self, master=None, ID=None, delete=False, root=None, checkbox=True):
        super().__init__(master)
        self.C = Colors()
        self.Image = ImageData()
        self['bg'] = self.C.root_bg
        self.image = ImageLabel(self, data=self.Image.C_STUDENTHOLDER, bg=self.C.root_bg)
        height = self.image.winfo_reqheight()
        width = self.image.winfo_reqwidth()
        self['height'] = height
        self['width'] = width
        self.widget = self
        self.master = master
        self.root = root
        self.ID = ID
        self.is_active = False
        self.flag = False
        self.C = Colors()
        self.checkbox = checkbox
        self.delete = delete
        self.select = Checkbox(self, command=self.toggle)
        # ==============================================================================================================
        self.name = runQuery('SELECT name FROM students WHERE ID=:ID', {'ID': ID}, receive=True)
        self.contact = runQuery('SELECT contact FROM students WHERE ID=:ID', {'ID': ID}, receive=True)
        self.id_label = tk.Label(self, text='ID: ' + ID, font=GOTHIC[11], fg=self.C.foc_in_entry, bg=self.C.root_bg)
        self.name_label = tk.Label(self, text=self.name[0][0], font=GOTHICBOLD[13], fg=self.C.foc_in_entry,
                                   bg=self.C.root_bg)
        self.contact_label = tk.Label(self, text=self.contact[0][0], font=GOTHICBOLD[13], fg=self.C.foc_in_entry,
                                      bg=self.C.root_bg)
        self.details = ImageLabel(self, data=DETAILSB64, bg=self.C.root_bg, command=self.view_details)
        if self.delete:
            self.delete_button = ImageLabel(self, data=DELETEB64, bg=self.C.root_bg, command=self.delete_student)
            self.details.place(x=390, y=12)
            self.delete_button.place(x=480, y=13)
        else:
            self.contact_label.place(x=340, y=13)
            self.details.place(x=480, y=8)
        self.place_widgets()
        self.pack(pady=3)

    def refresh(self):
        self.destroy()
        self.__init__(self.master)

    def delete_student(self, event=None):
        if runQuery('DELETE FROM students WHERE ID=:ID', {'ID': self.ID}):
            for student in STUDENTS:
                if student.ID == self.ID:
                    student.widget.destroy()
                    STUDENTS.remove(student)
                    break
            for student in SEARCHSTUDENTS:
                if student.ID == self.ID:
                    student.widget.destroy()
                    SEARCHSTUDENTS.remove(student)
                    break
            msg.showinfo('Information', 'Student successfully deleted.')
            if len(SEARCHSTUDENTS) == 0:
                self.root.destroy()
            else:
                self.root.focus()

    def toggle(self, event=None):
        if not self.flag:
            self.mark()
        else:
            self.unmark()

    def mark(self, event=None):
        if not self.flag:
            self.flag = True
            self.select.toggle()

    def unmark(self, event=None):
        if self.flag:
            self.flag = False
            self.select.toggle()

    def is_marked(self):
        return self.flag

    def view_details(self, event=None):
        if not self.is_active:
            self.detail_window = StudentDetails(self, self.ID)
            self.is_active = True
        else:
            self.detail_window.destroy()
            self.detail_window = StudentDetails(self, self.ID)

    def update_details(self, ID):
        self.name = runQuery('SELECT name FROM students WHERE ID=:ID', {'ID': ID}, receive=True)
        self.contact = runQuery('SELECT contact FROM students WHERE ID=:ID', {'ID': ID}, receive=True)
        self.name_label.config(text=self.name[0][0])
        self.id_label.config(text='ID: ' + ID)
        self.contact_label.config(text=self.contact[0][0])

    def place_widgets(self):
        self.image.place(x=0, y=0)
        if self.checkbox:
            self.select.place(x=5, y=3)
        self.name_label.place(x=94, y=4)
        self.id_label.place(x=95, y=23)


class AddStudent(tk.Toplevel):
    def __init__(self, master=None, icon=None):
        super().__init__(master)
        set_geometry(self, self.winfo_screenwidth(), self.winfo_screenheight(), 400, 510)
        self.C = Colors()
        self['bg'] = self.C.root_bg
        self.master = master
        self.wm_iconbitmap(icon)
        self.grab_set()
        self.resizable(0, 0)
        self.title('Add Student')
        self.icon = ImageLabel(self, data=STUDENTB64, bg=self.C.root_bg)
        self.id_entry = Entry(self, 'ID')
        self.name_entry = Entry(self, 'Full Name')
        self.grade_entry = Entry(self, 'Grade & Section')
        self.address_entry = Entry(self, 'Address')
        self.contact_entry = Entry(self, 'Contact #')
        self.button = Button(self, 'Add Student', command=self.add_student)
        self.bind('<Return>', self.add_student)
        self.pack_widgets()

    def add_student(self, event=None):
        for entry in self.winfo_children():
            try:
                if entry.is_empty():
                    msg.showerror(MSG_ENTRY_EMPTY, entry.is_empty()[1] + ' entry is empty.')
                    self.focus()
                    return
                if not entry.is_valid()[0]:
                    msg.showerror(MSG_ENTRY_INVALID, entry.is_valid()[1])
                    self.focus()
                    return
            except:
                pass
        # ==============================================================================================================
        # ==============================================================================================================
        response = self.id_entry.is_id_valid()
        if not response[0]:
            msg.showerror('Error', response[1])
            self.focus()
            return
        if len(self.name_entry.get()) > 23:
            msg.showerror('Error', 'Name exceeds 23 characters.')
            self.focus()
            return
        if len(self.grade_entry.get()) > 30:
            msg.showerror('Error', 'Grade exceeds 30 characters.')
            self.focus()
            return
        if len(self.address_entry.get()) > 30:
            msg.showerror('Error', 'Address exceeds 30 characters.')
            self.focus()
            return
        response = self.contact_entry.is_contact_valid()
        if not response[0]:
            msg.showerror('Error', response[1])
            self.focus()
            return
        if runQuery('INSERT INTO students VALUES (:ID, :name, :grade, :address, :contact, :bookpass)',
                    {
                        'ID': self.id_entry.get(),
                        'name': self.name_entry.get(),
                        'grade': self.grade_entry.get(),
                        'address': self.address_entry.get(),
                        'contact': self.contact_entry.get(),
                        'bookpass': MAX_BOOK
                    }):
            msg.showinfo('Information', 'Student successfully added.')
            self.master.update_list(self.id_entry.get())
            self.focus()
            self.id_entry.reset()
            self.name_entry.reset()
            self.grade_entry.reset()
            self.address_entry.reset()
            self.contact_entry.reset()

    def pack_widgets(self):
        for child in self.winfo_children():
            child.pack(pady=2)


class ScrollableFrame(ttk.Frame):
    def __init__(self, container, *args, **kwargs):
        super().__init__(container, *args, **kwargs)
        self['width'] = container.cget('width') - 20
        self['height'] = container.cget('height')
        self.C = Colors()
        self.canvas = tk.Canvas(self, width=self['width'], height=self['height'], bg=self.C.root_bg)
        self.scrollable_frame = tk.Frame(self.canvas, width=self['width'], height=self['height'], bg=self.C.root_bg)
        self.scrollbar = ttk.Scrollbar(self, orient='vertical', command=self.canvas.yview)
        self.canvas.config(yscrollcommand=self.scrollbar.set)
        self.canvas.pack(side='left', fill='both', expand=True)
        self.scrollbar.pack(side='right', fill='y')
        self.canvas_frame = self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor='nw')

        self.bind("<Configure>", self.on_frame_configure)
        # self.bind_all("<MouseWheel>", self.mouse_scroll)
        # self.bind_all("<Button-4>", self.mouse_scroll)
        # self.bind_all("<Button-5>", self.mouse_scroll)
        self.canvas.bind("<Configure>", self.task_width)

    def on_frame_configure(self, event=None):
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def task_width(self, event):
        canvas_width = event.width
        self.canvas.itemconfig(self.canvas_frame, width=canvas_width)

    def mouse_scroll(self, event):
        if event.delta:
            self.canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
        else:
            if event.num == 5:
                move = 1
            else:
                move = -1
            self.canvas.yview_scroll(move, "units")


class ManageStudents(tk.Frame):
    def __init__(self, master=None, icon=None):
        super().__init__(master)
        self.C = Colors()
        self['bg'] = self.C.root_bg
        self['height'] = master.cget('height')
        self['width'] = master.cget('width')
        self.lms_icon = icon
        self.master = master
        self.is_active = False
        self.Image = ImageData()
        self.top_frame = tk.Frame(self, width=self['width'], height=70, bg=self.C.search_bar_bg)
        # ==============================================================================================================
        self.search_entry_icon = ImageLabel(self.top_frame, data=SEARCHENTRYB64, bg=self.top_frame.cget('bg'))
        self.search = ImageLabel(self.top_frame, data=SEARCHB64, bg=self.top_frame.cget('bg'),
                                 command=self.show_students)
        self.delete_icon = ImageLabel(self.top_frame, data=DELETEB64, bg=self.top_frame.cget('bg'),
                                      command=self.delete_students)
        self.search_entry = EntryWithPlaceHolder(self.top_frame, 'Search', width=20, bg=self.C.search_entry_bg,
                                                 fg=self.C.search_entry_fg)
        self.select_all = Checkbox(self, command=self.select_all_students)
        self.col_title = tk.Label(self, text='Student Name                                          Contact #',
                                  font=GOTHICBOLD[13], bg=self['bg'], fg=self.C.foc_in_entry)
        self.container_frame = tk.Frame(self, width=self['width'] - 40, height=385, bg=self['bg'])
        self.line = ImageLabel(self, data=LINEB64, bg=self['bg'])
        self.add_button = ImageLabel(self, data=self.Image.C_PLUS, bg=self['bg'], command=self.add_student)
        # ==============================================================================================================
        self.list_frame = ScrollableFrame(self.container_frame)
        self.list_frame.pack()
        self.place_widgets()
        # ==============================================================================================================
        self.students = []
        students_ID = runQuery('SELECT ID FROM students', receive=True)
        for ID in students_ID:
            STUDENTS.append(Student(self.list_frame.scrollable_frame, ID[0], root=self))
        # ==============================================================================================================

    def refresh(self):
        self.destroy()
        self.__init__(self.master)

    def show_students(self, event=None):
        if self.search_entry.is_empty():
            msg.showerror(MSG_ENTRY_EMPTY, 'Search entry is empty')
            return
        else:
            self.students_found = []
            search = self.search_entry.get().lower()
            names = runQuery('SELECT name FROM students', receive=True)
            for name in names:
                if name[0].lower().__contains__(search):
                    self.students_found.append(
                        (runQuery('SELECT ID FROM students WHERE name=:name', {'name': name[0]}, receive=True))[0][0])
            if len(self.students_found) == 0:
                msg.showinfo('Information', 'No match found.')
                return
            search_window = tk.Toplevel(self)
            search_window.grab_set()
            search_window.title('Search Window')
            set_geometry(search_window, self.winfo_screenwidth(), self.winfo_screenheight(), 610, 398)
            search_window.resizable(0, 0)
            icondata = base64.b64decode(LMSICO)
            self.lms_icon = 'login.ico'
            iconfile = open(self.lms_icon, 'wb')
            iconfile.write(icondata)
            iconfile.close()
            search_window.wm_iconbitmap(self.lms_icon)
            container = tk.Frame(search_window, width=610, height=398)
            container.pack()
            frame = ScrollableFrame(container)
            frame.pack()
            if len(SEARCHSTUDENTS) != 0:
                for i in range(len(SEARCHSTUDENTS)):
                    SEARCHSTUDENTS.remove(SEARCHSTUDENTS[0])
            for ID in self.students_found:
                student = Student(frame.scrollable_frame, ID, delete=True, checkbox=False, root=search_window)
                SEARCHSTUDENTS.append(student)

    def update_list(self, ID=None):
        student = Student(self.list_frame.scrollable_frame, ID, root=self)
        STUDENTS.append(student)
        if self.select_all.is_marked():
            self.select_all.toggle()
        for students in STUDENTS:
            students.unmark()

    def delete_students(self, event=None):
        flag = False
        count = 0
        self.delete_list = []
        self.count = 0
        for student in STUDENTS:
            if student.is_marked():
                self.count += 1
        if self.count == 0:
            msg.showinfo('Information', 'There are no students to delete.')
            return
        if self.count != 0:
            if not msg.askyesno('Information', 'Are you sure you want to delete ' + str(self.count) + ' students?'):
                return
        elif self.count == len(STUDENTS):
            if not msg.askyesno('Information', 'Are you sure you want to delete all students?'):
                return
        for student in STUDENTS:
            if student.is_marked():
                bookpass = runQuery('SELECT bookpass FROM students WHERE ID=:ID', {'ID': student.ID}, receive=True)
                bookpass = bookpass[0][0]
                name = runQuery('SELECT name FROM students WHERE ID=:ID', {'ID': student.ID}, receive=True)
                if bookpass < MAX_BOOK:
                    if msg.showinfo('Information', name[0][0] + ' have not returned ' + \
                                                   str(bookpass - MAX_BOOK) + '\nAre you sure you want to delete?'):
                        if runQuery('DELETE FROM students WHERE ID=:ID', {'ID': student.ID}):
                            student.widget.destroy()
                            self.delete_list.append(student)
                            count += 1
                if bookpass == MAX_BOOK:
                    if runQuery('DELETE FROM students WHERE ID=:ID', {'ID': student.ID}):
                        student.widget.destroy()
                        self.delete_list.append(student)
                        count += 1
                flag = True
        if flag:
            for item in self.delete_list:
                STUDENTS.remove(item)
            msg.showinfo('Information', 'Successfully deleted ' + str(count) + ' students.')
            if self.select_all.is_active:
                self.select_all.toggle()
        if not flag:
            msg.showinfo('Information', 'Select a student to delete')

    def select_all_students(self, event=None):
        self.select_all.toggle()
        if self.select_all.is_marked():
            for student in STUDENTS:
                student.mark()
        else:
            for student in STUDENTS:
                student.unmark()

    def add_student(self, event=None):
        if not self.is_active:
            self.add = AddStudent(self, icon=self.lms_icon)
            self.is_active = True
        else:
            self.add.destroy()
            self.add = AddStudent(self, icon=self.lms_icon)

    def place_widgets(self):
        self.top_frame.place(x=0, y=0)
        self.search_entry_icon.place(x=159, y=18)
        self.search.place(x=376, y=17)
        self.delete_icon.place(x=430, y=18)
        self.search_entry.place(x=170, y=24)
        self.select_all.place(x=45, y=75)
        self.col_title.place(x=70, y=73)
        self.line.place(x=40, y=103)
        self.container_frame.place(x=40, y=113)
        self.add_button.place(x=600, y=425)


# ======================================================================================================================
# MANAGE STUDENTS
# ======================================================================================================================


# ======================================================================================================================
# BOOKRETURN
# ======================================================================================================================
class StudentReturnee(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.C = Colors()
        self['width'] = master.cget('width')
        self['height'] = master.cget('height')
        self['bg'] = self.C.root_bg
        self.student_icon = ImageLabel(self, data=STUDENTSMALL, bg=self.C.root_bg)
        self.pack()
        self.ID = None
        # ==============================================================================================================
        self.ID_label = tk.Label(self, font=GOTHIC[11], fg=self.C.foc_in_entry)
        self.name_label = tk.Label(self, font=GOTHICBOLD[13], fg=self.C.foc_in_entry)
        self.contact_label = tk.Label(self, font=GOTHICBOLD[13], fg=self.C.foc_in_entry)
        self.details = ImageLabel(self, data=DETAILSB64, bg=self.C.root_bg, command=self.view_details)
        # ==============================================================================================================
        self.place_widgets()
        # ==============================================================================================================

    def view_details(self, event=None):
        if not self.ID:
            msg.showerror('Error', 'No student selected.')
            return
        StudentDetails(self, self.ID, edit=False)

    def place_widgets(self):
        self.student_icon.place(x=20, y=8)
        self.name_label.place(x=80, y=10)
        self.ID_label.place(x=80, y=27)
        self.contact_label.place(x=330, y=18)
        self.details.place(x=465, y=15)
        for child in self.winfo_children():
            child.config(bg=self.C.root_bg)


class BookIssued(tk.Frame):
    def __init__(self, master=None, ID=None, student_ID=None):
        super().__init__(master)
        self.C = Colors()
        self['width'] = master.cget('width')
        self['height'] = master.cget('height')
        self['bg'] = self.C.root_bg
        self.pack()
        self.ID = ID
        self.student_ID = student_ID
        self.widget = self
        self.Image = ImageData()
        if ID == None:
            return
        # ==============================================================================================================
        self.extend_title = tk.Label(self, text='Extended:', font=GOTHICBOLD[11])
        self.due_date_title = tk.Label(self, text='Due Date:', font=GOTHICBOLD[11])
        self.date_issued_title = tk.Label(self, text='Date Issued:', font=GOTHICBOLD[11])
        self.author_label = tk.Label(self, text='Bjarne Stroustrup', font=GOTHIC[10])
        self.title_label = tk.Label(self, text='C++ Programming Language', font=GOTHICBOLD[11])
        self.extend_label = tk.Label(self, text='No', font=GOTHIC[10])
        self.due_date_label = tk.Label(self, text='June 7, 2020', font=GOTHIC[10])
        self.date_issued_label = tk.Label(self, text='June 1, 2020', font=GOTHIC[10])
        self.book_icon = ImageLabel(self, data=self.Image.C_BOOKRETURNICON, bg=self.C.root_bg)
        self.line = ImageLabel(self, data=self.Image.C_BOOKRETURNLINE, bg=self.C.root_bg)
        self.return_btn = ImageLabel(self, data=RETURNBOOK, bg=self.C.root_bg, command=self.return_book)
        self.extend_btn = ImageLabel(self, data=EXTENDBOOK, bg=self.C.root_bg, command=self.extend_book)
        # ==============================================================================================================
        self.book_ID = runQuery('SELECT book_ID FROM issues WHERE ID=:ID', {'ID': ID}, receive=True)[0][0]
        self.title = \
            (runQuery('SELECT title FROM books WHERE ID=:book_ID', {'book_ID': self.book_ID}, receive=True))[0][0]
        self.author = \
            (runQuery('SELECT author FROM books WHERE ID=:book_ID', {'book_ID': self.book_ID}, receive=True))[0][0]
        self.date_issued = (runQuery('SELECT date_issued FROM issues WHERE ID=:ID', {'ID': ID}, receive=True))[0][0]
        self.due_date = (runQuery('SELECT due_date FROM issues WHERE ID=:ID', {'ID': ID}, receive=True))[0][0]
        self.extend = (runQuery('SELECT extend FROM issues WHERE ID=:ID', {'ID': ID}, receive=True))[0][0]
        self.title_label.config(text=self.title)
        self.author_label.config(text=self.author)
        self.date_issued_label.config(text=self.date_issued)
        text_color = self.C.foc_in_entry
        self.today = datetime.datetime.today().strftime('%B %d, %Y')
        text_color = self.C.foc_in_entry
        if self.due_date < self.today:
            text_color = self.C.entry_warning
        self.due_date_label.config(text=self.due_date, fg=text_color)
        self.extend_label.config(text=self.extend)
        # ==============================================================================================================
        self.place_widgets()
        # ==============================================================================================================

    def return_book(self, event=None):
        if not msg.askyesno('Information', 'Return book?'):
            return
        if not runQuery('DELETE FROM issues WHERE ID=:ID', {'ID': self.ID}):
            msg.showerror('Database Error', 'Error returning book.\nPlease try again later.')
            return
        runQuery('INSERT INTO history (student_ID, book_ID, date_issued, due_date, extend) '
                 'VALUES (:student_ID, :book_ID, :date_issued, :due_date, :extend)',
                 {
                     'student_ID': self.student_ID,
                     'book_ID': self.book_ID,
                     'date_issued': self.date_issued,
                     'due_date': self.due_date,
                     'extend': self.extend
                 })
        copies_left = runQuery('SELECT copies_left FROM books WHERE ID=:book_ID',
                               {'book_ID': self.book_ID}, receive=True)[0][0]
        bookpass = runQuery('SELECT bookpass FROM students WHERE ID=:student_ID',
                            {'student_ID': self.student_ID}, receive=True)[0][0]
        if not runQuery('UPDATE students SET bookpass=:bookpass WHERE ID=:student_ID',
                        {'bookpass': bookpass+1, 'student_ID': self.student_ID}):
            msg.showerror('Database Error', 'Error returning book.\nPlease try again later.')
            return
        if not runQuery('UPDATE books SET copies_left=:copies_left WHERE ID=:book_ID',
                        {'copies_left': copies_left+1, 'book_ID': self.book_ID}):
            msg.showerror('Database Error', 'Error returning book.\nPlease try again later.')
            return
        msg.showinfo('Information', 'Book successfully returned.')
        self.widget.destroy()

    def extend_book(self, event=None):
        if not msg.askyesno('Information', 'Extend due date of the book?'):
            return
        if self.due_date < self.today:
            self.due_date = self.today
        self.due_date = (datetime.datetime.strptime(self.due_date, '%B %d, %Y') + datetime.timedelta(days=7)).strftime(
            '%B %d, %Y')
        if not runQuery('UPDATE issues SET due_date=:due_date WHERE ID=:ID',
                        {'due_date': self.due_date, 'ID': self.ID}):
            msg.showerror('Error', 'Cannot extend due date.\nPlease try again later.')
            return
        self.extend += 1
        if runQuery('UPDATE issues SET extend=:extend WHERE ID=:ID', {'extend': self.extend, 'ID': self.ID}):
            msg.showinfo('Information', 'Successfully extended due date.')
            self.due_date_label.config(text=self.due_date, fg=self.C.foc_in_entry)
            self.extend_label.config(text=self.extend)

    def place_widgets(self):
        self.book_icon.place(x=13, y=5)
        self.title_label.place(x=100, y=0)
        self.author_label.place(x=100, y=17)
        self.date_issued_title.place(x=100, y=17 * 2 + 2)
        self.due_date_title.place(x=100, y=17 * 3 + 2)
        self.extend_title.place(x=100, y=17 * 4 + 2)
        self.date_issued_label.place(x=200, y=17 * 2 + 3)
        self.due_date_label.place(x=200, y=17 * 3 + 3)
        self.extend_label.place(x=200, y=17 * 4 + 3)
        self.line.place(x=100, y=17 * 2)
        self.return_btn.place(x=465, y=13)
        self.extend_btn.place(x=465, y=43)
        for child in self.winfo_children():
            try:
                child.config(bg=self.C.root_bg, fg=self.C.foc_in_entry)
            except:
                pass


class BookReturn(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.C = Colors()
        self.Image = ImageData()
        self['bg'] = self.C.root_bg
        self['height'] = master.cget('height')
        self['width'] = master.cget('width')
        self.master = master
        self.top_frame = tk.Frame(self, width=self['width'], height=70, bg=self.C.search_bar_bg)
        # ==============================================================================================================
        self.search_entry_icon = ImageLabel(self.top_frame, data=SEARCHENTRYB64, bg=self.top_frame.cget('bg'))
        self.search_btn = ImageLabel(self.top_frame, data=SEARCHB64, bg=self.top_frame.cget('bg'),
                                     command=self.search)
        self.search_entry = EntryWithPlaceHolder(self.top_frame, 'Search', width=21, bg=self.C.search_entry_bg,
                                                 fg=self.C.search_entry_fg)
        self.student_holder = ImageLabel(self, data=self.Image.C_DATEHOLDER, bg=self.C.root_bg)
        self.book_holder = ImageLabel(self, data=self.Image.C_BOOKRETURNHOLDER, bg=self.C.root_bg)
        self.student_frame = tk.Frame(self, bg='black', width=570, height=64)
        self.book_frames = [
            tk.Frame(self, bg=self.C.root_bg, width=575, height=88),
            tk.Frame(self, bg=self.C.root_bg, width=575, height=88),
            tk.Frame(self, bg=self.C.root_bg, width=575, height=88)
        ]
        # ==============================================================================================================
        self.student = StudentReturnee(self.student_frame)
        # ==============================================================================================================
        self.place_widgets()
        self.books = []
        # ==============================================================================================================

    def refresh(self):
        self.destroy()
        self.__init__(self.master)

    def search(self, event=None):
        if self.search_entry.is_empty():
            msg.showerror('Error', 'Search entry is emtpy.')
            return
        student_ID = self.search_entry.get()
        name = (runQuery('SELECT name FROM students WHERE ID=:ID', {'ID': student_ID}, receive=True))
        try:
            name = name[0][0]
        except:
            msg.showerror('Error', 'Student not found.\nPlease ensure that the ID is correct.')
            return
        contact = (runQuery('SELECT contact FROM students WHERE ID=:ID', {'ID': student_ID}, receive=True))[0][0]
        self.student.ID = student_ID
        self.student.name_label.config(text=name)
        self.student.ID_label.config(text='ID: ' + student_ID)
        self.student.contact_label.config(text=contact)
        issue_ID = runQuery('SELECT ID FROM issues WHERE student_ID=:student_ID', {'student_ID': student_ID},
                            receive=True)
        count = 0
        for book in self.books:
            book.widget.destroy()
        self.books = []
        for i in range(3):
            try:
                self.books.append(BookIssued(self.book_frames[i], ID=issue_ID[i][0], student_ID=self.student.ID))
            except:
                self.books.append(BookIssued(self.book_frames[i]))

    def place_widgets(self):
        self.top_frame.place(x=0, y=0)
        # self.search_entry_icon.place(x=159, y=18)
        place_center(self.search_entry_icon, self.top_frame)
        self.search_entry.place(x=210, y=24)
        self.search_btn.place(x=418, y=17)
        self.student_holder.place(x=40, y=90)
        self.student_frame.place(x=50, y=95)
        self.book_holder.place(x=40, y=175)
        self.book_frames[0].place(x=47, y=182)
        self.book_frames[1].place(x=47, y=280)
        self.book_frames[2].place(x=47, y=380)


# ======================================================================================================================
# BOOKRETURN
# ======================================================================================================================


# ======================================================================================================================
# MANAGE BOOKS
# ======================================================================================================================
SEARCHBOOKS = []


class ScrollableFrame(ttk.Frame):
    def __init__(self, container, *args, **kwargs):
        super().__init__(container, *args, **kwargs)
        self.C = Colors()
        self['width'] = container.cget('width') - 20
        self['height'] = container.cget('height')
        self.canvas = tk.Canvas(self, width=self['width'], height=self['height'], bg=self.C.root_bg)
        self.scrollable_frame = tk.Frame(self.canvas, width=self['width'], height=self['height'], bg=self.C.root_bg)
        self.scrollbar = ttk.Scrollbar(self, orient='vertical', command=self.canvas.yview)
        self.canvas.config(yscrollcommand=self.scrollbar.set)
        self.canvas.pack(side='left', fill='both', expand=True)
        self.scrollbar.pack(side='right', fill='y')
        self.canvas_frame = self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor='nw')

        self.bind("<Configure>", self.on_frame_configure)
        # self.bind_all("<MouseWheel>", self.mouse_scroll)
        # self.bind_all("<Button-4>", self.mouse_scroll)
        # self.bind_all("<Button-5>", self.mouse_scroll)
        self.canvas.bind("<Configure>", self.task_width)

    def on_frame_configure(self, event=None):
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def task_width(self, event):
        canvas_width = event.width
        self.canvas.itemconfig(self.canvas_frame, width=canvas_width)

    def mouse_scroll(self, event):
        if event.delta:
            self.canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
        else:
            if event.num == 5:
                move = 1
            else:
                move = -1
            self.canvas.yview_scroll(move, "units")


class AddBook(tk.Toplevel):
    def __init__(self, master=None, root=None, book_frame=False, book_class=None):
        super().__init__(master)
        self.C = Colors()
        self['bg'] = self.C.root_bg
        set_geometry(self, self.winfo_screenwidth(), self.winfo_screenheight(), 400, 565)
        icondata = base64.b64decode(LMSICO)
        self.lms_icon = 'login.ico'
        iconfile = open(self.lms_icon, 'wb')
        iconfile.write(icondata)
        iconfile.close()
        self.wm_iconbitmap(self.lms_icon)
        self.grab_set()
        self.resizable(0, 0)
        self.master = master
        self.root = root
        self.Image = ImageData()
        self.bookclass = None
        self.book_frame = book_frame
        self.title('Add Book')
        self.icon = ImageLabel(self, data=self.Image.C_BOOKICON, bg=self.C.root_bg)
        self.class_entry = Entry(self, 'Classification')
        self.title_entry = Entry(self, 'Title')
        self.author_entry = Entry(self, 'Author')
        self.edition_entry = Entry(self, 'Edition')
        self.year_entry = Entry(self, 'Year')
        self.copies_entry = Entry(self, 'Copies')
        self.button = Button(self, 'Confirm', command=self.add_book)
        self.pack_widgets()
        self.bind('<Return>', self.add_book)
        # ==============================================================================================================
        if self.book_frame:
            self.class_entry.insert(book_class.title())
        # ==============================================================================================================

    def add_book(self, event=None):
        for entry in self.winfo_children():
            try:
                if entry.is_empty():
                    msg.showerror(MSG_ENTRY_EMPTY, entry.is_empty()[1] + ' entry is empty.')
                    self.focus()
                    return
                if not entry.is_valid()[0]:
                    msg.showerror(MSG_ENTRY_INVALID, entry.is_valid()[1])
                    self.focus()
                    return
            except:
                pass
        # ==============================================================================================================
        # ==============================================================================================================
        response = self.class_entry.is_class_valid()
        if not response[0]:
            msg.showerror('Error', response[1])
            self.focus()
            return
        if len(self.title_entry.get()) > 40:
            msg.showerror('Error', 'Title exceeds 40 characters.')
            self.focus()
            return
        if len(self.author_entry.get()) > 40:
            msg.showerror('Error', 'Author exceeds 30 characters.')
            self.focus()
            return
        try:
            int(self.edition_entry.get())
        except:
            msg.showerror('Error', 'Edition must be integer.')
            self.focus()
            return
        if len(self.year_entry.get()) > 15:
            msg.showerror('Error', 'Year is invalid.')
            self.focus()
            return
        self.bookclass = self.class_entry.get()
        if runQuery('INSERT INTO books (class, title, author, edition, year, copies, copies_left) \
                            VALUES (:class, :title, :author, :edition, :year, :copies, :copies_left)',
                    {
                        'class': self.class_entry.get(),
                        'title': self.title_entry.get(),
                        'author': self.author_entry.get(),
                        'edition': self.edition_entry.get(),
                        'year': self.year_entry.get(),
                        'copies': int(self.copies_entry.get()),
                        'copies_left': int(self.copies_entry.get())
                    }):
            msg.showinfo('Information', 'Book successfully updated.')
            ID = runQuery('SELECT ID FROM books', receive=True)
            bookclass = self.class_entry.get()
            self.destroy()
            # ==========================================================================================================
            if self.book_frame:
                self.master.update_list(ID[len(ID) - 1][0])
            else:
                bookclass = bookclass.lower()
                if bookclass == 'general':
                    self.master.general_frame.update_books()
                elif bookclass == 'philosophy':
                    self.master.philosophy_frame.update_books()
                elif bookclass == 'religion':
                    self.master.religion_frame.update_books()
                elif bookclass == 'social':
                    self.master.social_frame.update_books()
                elif bookclass == 'language':
                    self.master.language_frame.update_books()
                elif bookclass == 'science':
                    self.master.science_frame.update_books()
                elif bookclass == 'technology':
                    self.master.technology_frame.update_books()
                elif bookclass == 'art':
                    self.master.art_frame.update_books()
                elif bookclass == 'literature':
                    self.master.literature_frame.update_books()
                elif bookclass == 'history':
                    self.master.history_frame.update_books()
            # ==========================================================================================================

    def pack_widgets(self):
        for child in self.winfo_children():
            child.pack(pady=2)


class EditBook(tk.Toplevel):
    def __init__(self, master=None, ID=None, root=None, icon=None):
        super().__init__(master)
        self.C = Colors()
        self['bg'] = self.C.root_bg
        set_geometry(self, self.winfo_screenwidth(), self.winfo_screenheight(), 400, 575)
        self.grab_set()
        icondata = base64.b64decode(LMSICO)
        self.temp_file = 'login.ico'
        iconfile = open(self.temp_file, 'wb')
        iconfile.write(icondata)
        iconfile.close()
        self.wm_iconbitmap(self.temp_file)
        self.resizable(0, 0)
        self.title('Edit Book')
        self.Image = ImageData()
        self.icon = ImageLabel(self, data=self.Image.C_BOOKICON, bg=self.C.root_bg)
        self.ID = ID
        self.root = root
        self.class_entry = Entry(self, 'Classification')
        self.title_entry = Entry(self, 'Title')
        self.author_entry = Entry(self, 'Author')
        self.edition_entry = Entry(self, 'Edition')
        self.year_entry = Entry(self, 'Year')
        self.copies_entry = Entry(self, 'Copies')
        self.button = Button(self, 'Confirm', command=self.edit_book)
        self.pack_widgets()
        self.bind('<Return>', self.edit_book)
        # ==============================================================================================================
        self.book_class = runQuery('SELECT class FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.title = runQuery('SELECT title FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.author = runQuery('SELECT author FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.edition = runQuery('SELECT edition FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.year = runQuery('SELECT year FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.copies = runQuery('SELECT copies FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.class_entry.insert(self.book_class[0][0].title())
        self.title_entry.insert(self.title[0][0])
        self.author_entry.insert(self.author[0][0])
        self.edition_entry.insert(self.edition[0][0])
        self.year_entry.insert(self.year[0][0])
        self.copies_entry.insert(self.copies[0][0])
        self.after(200, self.focus)
        # ==============================================================================================================

    def pack_widgets(self):
        for child in self.winfo_children():
            child.pack(pady=2)
        self.icon.pack_configure(pady=10)

    def edit_book(self, event=None):
        for entry in self.winfo_children():
            try:
                if entry.is_empty():
                    msg.showerror(MSG_ENTRY_EMPTY, entry.is_empty()[1] + ' entry is empty.')
                    self.focus()
                    return
                if not entry.is_valid()[0]:
                    msg.showerror(MSG_ENTRY_INVALID, entry.is_valid()[1])
                    self.focus()
                    return
            except:
                pass
        # ==============================================================================================================
        # ==============================================================================================================
        response = self.class_entry.is_class_valid()
        if not response[0]:
            msg.showerror('Error', response[1])
            self.focus()
            return
        if len(self.title_entry.get()) > 40:
            msg.showerror('Error', 'Title exceeds 40 characters.')
            self.focus()
            return
        if len(self.author_entry.get()) > 40:
            msg.showerror('Error', 'Author exceeds 30 characters.')
            self.focus()
            return
        try:
            int(self.edition_entry.get())
        except:
            msg.showerror('Error', 'Edition must be integer.')
            self.focus()
            return
        if len(self.year_entry.get()) > 15:
            msg.showerror('Error', 'Year is invalid.')
            self.focus()
            return
        copies_left = runQuery('SELECT copies_left FROM books WHERE ID=:ID', {'ID': self.ID}, receive=True)
        if runQuery('UPDATE books SET class=:class, title=:title, author=:author, edition=:edition, year=:year,'
                    'copies=:copies, copies_left=:copies_left WHERE ID=:ID',
                    {
                        'class': self.class_entry.get(),
                        'title': self.title_entry.get(),
                        'author': self.author_entry.get(),
                        'edition': self.edition_entry.get(),
                        'year': self.year_entry.get(),
                        'copies': self.copies_entry.get(),
                        'copies_left': self.copies_entry.get(),
                        'ID': self.ID
                    }):
            msg.showinfo('Information', 'Book successfully updated.')
            self.master.update_details(self.ID)
            self.destroy()
            self.root.update_books()


class BookDetails(tk.Toplevel):
    def __init__(self, master=None, ID=None, root=None, edit=True):
        super().__init__(master)
        self.master = master
        self.C = Colors()
        self['bg'] = self.C.root_bg
        set_geometry(self, self.winfo_screenwidth(), self.winfo_screenheight(), 400, 500)
        self.grab_set()
        icondata = base64.b64decode(LMSICO)
        temp_file = 'login.ico'
        iconfile = open(temp_file, 'wb')
        iconfile.write(icondata)
        iconfile.close()
        self.wm_iconbitmap(temp_file)
        self.resizable(0, 0)
        self.title('Book\'s Details')
        self.Image = ImageData()
        self.icon = ImageLabel(self, data=self.Image.C_BOOKICON, bg=self.C.root_bg)
        self.ID = ID
        self.root = root
        self.edit = edit
        # ==============================================================================================================
        self.book_class = runQuery('SELECT class FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.title = runQuery('SELECT title FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.author = runQuery('SELECT author FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.edition = runQuery('SELECT edition FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.year = runQuery('SELECT year FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.copies_left = runQuery('SELECT copies_left FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.class_label = tk.Label(self, text=self.book_class[0][0].title())
        self.title_label = tk.Label(self, text=self.title[0][0])
        self.author_label = tk.Label(self, text=self.author[0][0])
        if self.edition[0][0] == '1':
            edition = '1st'
        elif self.edition[0][0] == '2':
            edition = '2nd'
        elif self.edition[0][0] == '3':
            edition = '3rd'
        else:
            edition = self.edition[0][0] + 'th'
        self.edition_label = tk.Label(self, text=edition + ' Edition')
        self.year_label = tk.Label(self, text=self.year[0][0])
        text = str(self.copies_left[0][0]) + ' Copies Available'
        if self.copies_left[0][0] == 0:
            text = 'No Copies Available'
        self.available_label = tk.Label(self, text=text, fg=self.C.foc_in_entry, bg=self.C.root_bg, font=GOTHIC[13])
        self.button = Button(self, text='Edit Book', command=self.edit_book)
        self.bind('<Return>', self.edit_book)
        self.pack_widgets()

    def edit_book(self, event=None):
        self.edit = EditBook(self.master, ID=self.ID, root=self.root)
        self.destroy()

    def pack_widgets(self):
        for child in self.winfo_children():
            try:
                child.config(fg=self.C.foc_in_entry, bg=self.C.root_bg, wraplength=300, font=GOTHIC[13])
            except:
                pass
        self.title_label.config(font=GOTHICBOLD[15])
        self.icon.pack(pady=20)
        self.class_label.pack()
        self.title_label.pack()
        self.author_label.pack()
        self.edition_label.pack()
        self.year_label.pack()
        self.available_label.pack()
        if self.edit:
            self.button.pack(pady=10)


class Book(tk.Frame):
    def __init__(self, master=None, ID=None, delete=False, root=None, checkbox=True, edit=True, confirm=False):
        super().__init__(master)
        self.Image = ImageData()
        self.C = Colors()
        self.image = ImageLabel(self, data=self.Image.C_BOOKHOLDER, bg=self.C.root_bg)
        height = self.image.winfo_reqheight()
        width = self.image.winfo_reqwidth()
        self['height'] = height
        self['width'] = width
        self.widget = self
        self.master = master
        self.root = root
        self.ID = ID
        self.is_active = False
        self.flag = False
        self.edit = edit
        self.checkbox = checkbox
        self.delete = delete
        self.select = Checkbox(self, command=self.toggle)
        # ==============================================================================================================
        self.book_class = runQuery('SELECT class FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.title = runQuery('SELECT title FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.author = runQuery('SELECT author FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.author_label = tk.Label(self, text=self.author[0][0], font=GOTHIC[11], fg=self.C.foc_in_entry,
                                     bg=self.C.root_bg)
        self.title_label = tk.Label(self, text=self.title[0][0], font=GOTHICBOLD[13], fg=self.C.foc_in_entry,
                                    bg=self.C.root_bg)
        self.details = ImageLabel(self, data=DETAILSB64, bg=self.C.root_bg, command=self.view_details)
        if confirm:
            self.confirm = ImageLabel(self, data=CONFIRMLARGE, bg=self.C.root_bg, command=self.return_ID)
            self.confirm.place(x=390, y=12)
        if self.delete:
            self.delete_button = ImageLabel(self, data=DELETEB64, bg=self.C.root_bg, command=self.delete_book)
            self.details.place(x=390, y=11)
            self.delete_button.place(x=480, y=11)
        else:
            self.details.place(x=480, y=13)
        # ==============================================================================================================
        self.place_widgets()
        self.pack(pady=3)
        # ==============================================================================================================

    def return_ID(self, event=None):
        if msg.askokcancel('Select Book', 'Select ' + self.title[0][0] + ' ?'):
            self.root.master.select_book(self.ID)
            self.root.destroy()
            return
        self.root.focus()

    def delete_book(self, event=None):
        if runQuery('DELETE FROM books WHERE ID=:ID', {'ID': self.ID}):
            msg.showinfo('Information', 'Book successfully deleted.')
            self.root.refresh()
        else:
            msg.showerro('Error', 'Cannot delete book. Please try again later.')
            return

    def view_details(self, event=None):
        if not self.is_active:
            self.detail_window = BookDetails(self, self.ID, root=self.root, edit=self.edit)
            self.is_active = True
        else:
            self.detail_window.destroy()
            self.detail_window = BookDetails(self, self.ID, root=self.root, edit=self.edit)

    def update_details(self, ID):
        self.title = runQuery('SELECT title FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.author = runQuery('SELECT author FROM books WHERE ID=:ID', {'ID': ID}, receive=True)
        self.title_label.config(text=self.title[0][0])
        self.author_label.config(text=self.author[0][0])

    def toggle(self, event=None):
        if not self.flag:
            self.mark()
        else:
            self.unmark()

    def mark(self, event=None):
        if not self.flag:
            self.flag = True
            self.select.toggle()

    def unmark(self, event=None):
        if self.flag:
            self.flag = False
            self.select.toggle()

    def is_marked(self):
        return self.flag

    def place_widgets(self):
        self.image.place(x=0, y=0)
        if self.checkbox:
            self.select.place(x=5, y=3)
        self.title_label.place(x=94, y=4)
        self.author_label.place(x=95, y=23)


class BookFrame(tk.Frame):
    def __init__(self, master=None, book_class=None, home=None):
        super().__init__(master)
        self['width'] = master.cget('width')
        self['height'] = master.cget('height')
        self.C = Colors()
        self['bg'] = self.C.root_bg
        self.master = master
        self.home = home
        self.book_class = book_class
        self.is_active = False
        self.Image = ImageData()
        self.top_frame = tk.Frame(self, width=self['width'], height=70, bg=self.C.search_bar_bg)
        # ==============================================================================================================
        self.search_entry_icon = ImageLabel(self.top_frame, data=SEARCHENTRYB64, bg=self.top_frame.cget('bg'))
        self.search = ImageLabel(self.top_frame, data=SEARCHB64, bg=self.top_frame.cget('bg'),
                                 command=self.show_books)
        self.delete_icon = ImageLabel(self.top_frame, data=DELETEB64, bg=self.top_frame.cget('bg'),
                                      command=self.delete_books)
        self.search_entry = EntryWithPlaceHolder(self.top_frame, 'Search', width=20, bg=self.C.search_entry_bg)
        self.container_frame = tk.Frame(self, width=self['width'] - 40, height=385, bg=self['bg'])
        self.select_all = Checkbox(self, command=self.select_all_books)
        self.col_title = tk.Label(self, text=book_class + ' Books', font=GOTHICBOLD[13], bg=self['bg'],
                                  fg=self.C.foc_in_entry)
        self.line = ImageLabel(self, data=LINEB64, bg=self['bg'])
        self.add_button = ImageLabel(self, data=self.Image.C_PLUS, bg=self['bg'], command=self.add_book)
        self.home_icon = ImageLabel(self.top_frame, data=self.Image.C_HOME, bg=self.top_frame.cget('bg'),
                                    command=self.go_to_home)
        self.home_icon.place(x=600, y=7)
        # ==============================================================================================================
        self.list_frame = ScrollableFrame(self.container_frame)
        self.list_frame.pack()
        # ==============================================================================================================
        self.books = []
        ID = runQuery('SELECT ID FROM BOOKS WHERE class=:class', {'class': book_class}, receive=True)
        for book in ID:
            self.books.append(Book(self.list_frame.scrollable_frame, book[0], root=self))
        # ==============================================================================================================
        self.place_widgets()
        self.place(x=0, y=0)
        # ==============================================================================================================

    def go_to_home(self, event=None):
        self.master.manage_book_frame.tkraise()

    def update_list(self, ID=None):
        self.books.append(Book(self.list_frame.scrollable_frame, ID, root=self))
        if self.select_all.is_marked():
            self.select_all.toggle()
        for book in self.books:
            book.unmark()

    def update_books(self):
        for book in self.books:
            book.widget.destroy()
        self.books = []
        ID = runQuery('SELECT ID FROM books WHERE class=:class', {'class': self.book_class}, receive=True)
        for item in ID:
            self.books.append(Book(self.list_frame.scrollable_frame, item[0], root=self))

    def show_books(self, event=None):
        if self.search_entry.is_empty():
            msg.showerror(MSG_ENTRY_EMPTY, 'Search entry is empty')
            return
        else:
            self.books_found = []
            search = self.search_entry.get().lower()
            titles = runQuery('SELECT title FROM books', receive=True)
            for title in titles:
                if title[0].lower().__contains__(search):
                    self.books_found.append(
                        (runQuery('SELECT ID FROM books WHERE title=:title', {'title': title[0]}, receive=True))[0][0])
            if len(self.books_found) == 0:
                msg.showinfo('Information', 'No match found.')
                return
            search_window = tk.Toplevel(self)
            search_window.grab_set()
            search_window.title('Search Window')
            set_geometry(search_window, self.winfo_screenwidth(), self.winfo_screenheight(), 610, 398)
            search_window.resizable(0, 0)
            icondata = base64.b64decode(LMSICO)
            self.lms_icon = 'login.ico'
            iconfile = open(self.lms_icon, 'wb')
            iconfile.write(icondata)
            iconfile.close()
            search_window.wm_iconbitmap(self.lms_icon)
            container = tk.Frame(search_window, width=610, height=398)
            container.pack()
            frame = ScrollableFrame(container)
            frame.pack()
            if len(self.books) != 0:
                for i in range(len(self.books)):
                    self.books.remove(self.books[0])
            for ID in self.books_found:
                student = Book(frame.scrollable_frame, ID, delete=True, checkbox=False, root=search_window)
                self.books.append(student)

    def add_book(self, event=None):
        if not self.is_active:
            self.add = AddBook(self, root=self.master, book_frame=True, book_class=self.book_class)
            self.is_active = True
        else:
            self.add.destroy()
            self.add = AddBook(self, root=self.master, book_frame=True, book_class=self.book_class)
        self.update_books()

    def select_all_books(self, event=None):
        self.select_all.toggle()
        if self.select_all.is_marked():
            for student in self.books:
                student.mark()
        else:
            for student in self.books:
                student.unmark()

    def delete_books(self, event=None):
        flag = False
        count = 0
        self.delete_list = []
        self.count = 0
        for book in self.books:
            if book.is_marked():
                self.count += 1
        if self.count == 0:
            msg.showinfo('Information', 'There are no books to delete.')
            return
        if self.count != 0:
            if not msg.askyesno('Information', 'Are you sure you want to delete ' + str(self.count) + ' books?'):
                return
        elif self.count == len(self.books):
            if not msg.askyesno('Information', 'Are you sure you want to delete all books?'):
                return
        for book in self.books:
            if book.is_marked():
                copies = runQuery('SELECT copies FROM books WHERE ID=:ID', {'ID': book.ID}, receive=True)
                copies_left = runQuery('SELECT copies_left FROM books WHERE ID=:ID', {'ID': book.ID}, receive=True)
                title = runQuery('SELECT title FROM books WHERE ID=:ID', {'ID': book.ID}, receive=True)
                if not copies[0][0] == copies_left[0][0]:
                    if msg.showinfo('Information', 'A copy of ' + title[0][0] + 'has been borrowed.\n' + \
                                                   'Are you sure you want to delete?'):
                        book.widget.destroy()
                        self.delete_list.append(book)
                        count += 1
                else:
                    if runQuery('DELETE FROM books WHERE ID=:ID', {'ID': book.ID}):
                        book.widget.destroy()
                        self.delete_list.append(book)
                        count += 1
                flag = True
        if flag:
            for item in self.delete_list:
                self.books.remove(item)
            if self.book_class == 'general':
                self.books = self.books
            msg.showinfo('Information', 'Successfully deleted ' + str(count) + ' books.')
            if self.select_all.is_active:
                self.select_all.toggle()
        if not flag:
            msg.showinfo('Information', 'Select a book to delete')

    def place_widgets(self):
        self.top_frame.place(x=0, y=0)
        self.search_entry_icon.place(x=159, y=18)
        self.search.place(x=376, y=17)
        self.delete_icon.place(x=430, y=18)
        self.search_entry.place(x=170, y=24)
        self.container_frame.place(x=40, y=113)
        self.select_all.place(x=45, y=75)
        self.col_title.place(x=70, y=73)
        self.line.place(x=40, y=103)
        self.add_button.place(x=600, y=425)


class SearchWindow(tk.Toplevel):
    def __init__(self, master=None, search=None):
        super().__init__(master)
        self.grab_set()
        self.title('Search Window')
        set_geometry(self, self.winfo_screenwidth(), self.winfo_screenheight(), 610, 398)
        self.resizable(0, 0)
        icondata = base64.b64decode(LMSICO)
        self.lms_icon = 'login.ico'
        iconfile = open(self.lms_icon, 'wb')
        iconfile.write(icondata)
        iconfile.close()
        self.wm_iconbitmap(self.lms_icon)
        self.search = search
        container = tk.Frame(self, width=610, height=398)
        container.pack()
        self.frame = ScrollableFrame(container)
        self.frame.pack()
        # ==============================================================================================================
        """
        self.books = []
        ID = runQuery('SELECT ID FROM books', receive=True)
        for book in ID:
            print(book[0])
            title = runQuery('SELECT title FROM books WHERE ID=:book_ID', {'book_ID': book[0]}, receive=True)[0][0]
            if title.lower().__contains__(self.search.lower()):
                self.books.append(Book(self.frame.scrollable_frame, book[0], checkbox=False, delete=True, root=self))
        """
        self.refresh(first_time=True)
        # ==============================================================================================================

    def refresh(self, first_time=False):
        if not first_time:
            for book in self.books:
                book.widget.destroy()
        self.books = []
        self.count = 0
        ID = runQuery('SELECT ID FROM books', receive=True)
        for book in ID:
            print(book[0])
            title = runQuery('SELECT title FROM books WHERE ID=:book_ID', {'book_ID': book[0]}, receive=True)[0][0]
            if title.lower().__contains__(self.search.lower()):
                self.count += 1
                self.books.append(Book(self.frame.scrollable_frame, book[0], checkbox=False, delete=True, root=self))
        if self.count == 0 and first_time:
            msg.showerror('Error', 'Book not found.')
            self.destroy()
        elif self.count == 0:
            msg.showinfo('Information', 'No more books to be displayed.')


class ManageBooks(tk.Frame):
    def __init__(self, master=None, icon=None):
        super().__init__(master)
        self.C = Colors()
        self['bg'] = self.C.root_bg
        self['height'] = master.cget('height')
        self['width'] = master.cget('width')
        self.master = master
        self.is_active = False
        self.Image = ImageData()
        self.manage_book_frame = tk.Frame(self, width=self['width'], height=self['height'], bg=self['bg'])
        self.top_frame = tk.Frame(self.manage_book_frame, width=self['width'], height=70, bg=self.C.search_bar_bg)
        # ==============================================================================================================
        self.search_entry_icon = ImageLabel(self.top_frame, data=SEARCHENTRYB64, bg=self.top_frame.cget('bg'))
        self.search = ImageLabel(self.top_frame, data=SEARCHB64, bg=self.top_frame.cget('bg'),
                                 command=self.show_books)
        self.delete_icon = ImageLabel(self.top_frame, data=DELETEB64, bg=self.top_frame.cget('bg'),
                                      command=None)
        self.search_entry = EntryWithPlaceHolder(self.top_frame, 'Search', width=20, bg=self.C.search_entry_bg,
                                                 fg=self.C.search_entry_fg)
        self.container_frame = tk.Frame(self.manage_book_frame, width=self['width'] - 40, height=398, bg=self['bg'])
        self.add_button = ImageLabel(self.manage_book_frame, data=self.Image.C_PLUS, bg=self['bg'],
                                     command=self.add_book)
        self.classes = [
            'General', 'Philosophy', 'Religion', 'Social', 'Language',
            'Science', 'Technology', 'Art', 'Literature', 'History'
        ]
        # ==============================================================================================================
        self.general_frame = BookFrame(self, home=self.manage_book_frame, book_class=self.classes[0])
        self.philosophy_frame = BookFrame(self, home=self.manage_book_frame, book_class=self.classes[1])
        self.religion_frame = BookFrame(self, home=self.manage_book_frame, book_class=self.classes[2])
        self.social_frame = BookFrame(self, home=self.manage_book_frame, book_class=self.classes[3])
        self.language_frame = BookFrame(self, home=self.manage_book_frame, book_class=self.classes[4])
        self.science_frame = BookFrame(self, home=self.manage_book_frame, book_class=self.classes[5])
        self.technology_frame = BookFrame(self, home=self.manage_book_frame, book_class=self.classes[6])
        self.art_frame = BookFrame(self, home=self.manage_book_frame, book_class=self.classes[7])
        self.literature_frame = BookFrame(self, home=self.manage_book_frame, book_class=self.classes[8])
        self.history_frame = BookFrame(self, home=self.manage_book_frame, book_class=self.classes[9])

        self.book_class = [
            ImageLabel(self.container_frame, data=self.Image.C_GENERAL, bg=self['bg'], command=self.general),
            ImageLabel(self.container_frame, data=self.Image.C_PHILOSOPHY, bg=self['bg'], command=self.philosophy),
            ImageLabel(self.container_frame, data=self.Image.C_RELIGION, bg=self['bg'], command=self.religion),
            ImageLabel(self.container_frame, data=self.Image.C_SOCIAL, bg=self['bg'], command=self.social),
            ImageLabel(self.container_frame, data=self.Image.C_LANGUAGE, bg=self['bg'], command=self.language),
            ImageLabel(self.container_frame, data=self.Image.C_SCIENCE, bg=self['bg'], command=self.science),
            ImageLabel(self.container_frame, data=self.Image.C_TECHNOLOGY, bg=self['bg'], command=self.technology),
            ImageLabel(self.container_frame, data=self.Image.C_ART, bg=self['bg'], command=self.art),
            ImageLabel(self.container_frame, data=self.Image.C_LITERATURE, bg=self['bg'], command=self.literature),
            ImageLabel(self.container_frame, data=self.Image.C_HISTORY, bg=self['bg'], command=self.history)
        ]
        # ==============================================================================================================
        # self.list_frame = ScrollableFrame(self.container_frame)
        # ==============================================================================================================
        # self.books = []
        # ID = runQuery('SELECT ID FROM BOOKS', receive=True)
        # for book in ID:
        #     self.books.append(Book(self.list_frame.scrollable_frame, book[0], root=self))
        # ==============================================================================================================
        # ==============================================================================================================
        self.manage_book_frame.tkraise()
        self.place_widgets()
        # ==============================================================================================================

    def show_books(self, event=None):
        if self.search_entry.is_empty():
            msg.showerror(MSG_ENTRY_EMPTY, 'Search entry is empty')
            return
        else:
            search = self.search_entry.get().lower()
            """
            self.books_found = []
            titles = runQuery('SELECT title FROM books', receive=True)
            for title in titles:
                if title[0].lower().__contains__(search):
                    self.books_found.append(
                        (runQuery('SELECT ID FROM books WHERE title=:title', {'title': title[0]}, receive=True))[0][0])
            if len(self.books_found) == 0:
                msg.showinfo('Information', 'No match found.')
                return
            """
            search_window = SearchWindow(self, search=search)

    def add_book(self, event=None):
        if not self.is_active:
            self.add = AddBook(self)
            self.is_active = True
        else:
            self.add.destroy()
            self.add = AddBook(self)

    def refresh(self):
        self.destroy()
        self.__init__(self.master)

    def general(self, event=None):
        self.general_frame.update_books()
        self.general_frame.tkraise()
        home_icon = ImageLabel(self.general_frame.top_frame, data=self.Image.C_HOME, bg=self.top_frame.cget('bg'),
                               command=self.home)
        home_icon.place(x=600, y=7)

    def philosophy(self, event=None):
        self.philosophy_frame.update_books()
        self.philosophy_frame.tkraise()
        home_icon = ImageLabel(self.general_frame.top_frame, data=self.Image.C_HOME, bg=self.top_frame.cget('bg'),
                               command=self.home)
        home_icon.place(x=600, y=7)

    def religion(self, event=None):
        self.religion_frame.update_books()
        self.religion_frame.tkraise()
        home_icon = ImageLabel(self.general_frame.top_frame, data=self.Image.C_HOME, bg=self.top_frame.cget('bg'),
                               command=self.home)
        home_icon.place(x=600, y=7)

    def social(self, event=None):
        self.social_frame.update_books()
        self.social_frame.tkraise()
        home_icon = ImageLabel(self.general_frame.top_frame, data=self.Image.C_HOME, bg=self.top_frame.cget('bg'),
                               command=self.home)
        home_icon.place(x=600, y=7)

    def language(self, event=None):
        self.language_frame.update_books()
        self.language_frame.tkraise()
        home_icon = ImageLabel(self.general_frame.top_frame, data=self.Image.C_HOME, bg=self.top_frame.cget('bg'),
                               command=self.home)
        home_icon.place(x=600, y=7)

    def science(self, event=None):
        self.science_frame.update_books()
        self.science_frame.tkraise()
        home_icon = ImageLabel(self.general_frame.top_frame, data=self.Image.C_HOME, bg=self.top_frame.cget('bg'),
                               command=self.home)
        home_icon.place(x=600, y=7)

    def technology(self, event=None):
        self.technology_frame.update_books()
        self.technology_frame.tkraise()
        home_icon = ImageLabel(self.general_frame.top_frame, data=self.Image.C_HOME, bg=self.top_frame.cget('bg'),
                               command=self.home)
        home_icon.place(x=600, y=7)

    def art(self, event=None):
        self.art_frame.update_books()
        self.art_frame.tkraise()
        home_icon = ImageLabel(self.general_frame.top_frame, data=self.Image.C_HOME, bg=self.top_frame.cget('bg'),
                               command=self.home)
        home_icon.place(x=600, y=7)

    def literature(self, event=None):
        self.literature_frame.update_books()
        self.literature_frame.tkraise()
        home_icon = ImageLabel(self.general_frame.top_frame, data=self.Image.C_HOME, bg=self.top_frame.cget('bg'),
                               command=self.home)
        home_icon.place(x=600, y=7)

    def history(self, event=None):
        self.history_frame.update_books()
        self.history_frame.tkraise()
        home_icon = ImageLabel(self.general_frame.top_frame, data=self.Image.C_HOME, bg=self.top_frame.cget('bg'),
                               command=self.home)
        home_icon.place(x=600, y=7)

    def home(self, event=None):
        self.manage_book_frame.tkraise()

    def place_widgets(self):
        self.manage_book_frame.place(x=0, y=0)
        self.top_frame.place(x=0, y=0)
        self.search_entry_icon.place(x=159, y=18)
        self.search.place(x=376, y=17)
        self.delete_icon.place(x=430, y=18)
        self.search_entry.place(x=170, y=24)
        self.container_frame.place(x=40, y=105)
        x, y = 5, 0
        for i, image in enumerate(self.book_class):
            image.place(x=x, y=y)
            x += 120
            if i == 4:
                y += 150
                x = 5
        self.add_button.place(x=600, y=425)


# ======================================================================================================================
# MANAGE BOOKS
# ======================================================================================================================


# ======================================================================================================================
# BOOK ISSUE
# ======================================================================================================================
class Frame(tk.Frame):
    def __init__(self, master=None, command=None):
        super().__init__(master)
        self.C = Colors()
        self['bg'] = self.C.root_bg
        self['height'] = 180
        self['width'] = 280
        self.ID = None
        self.top_frame = tk.Frame(self, width=self['width'], height=40, bg=self.C.root_bg)
        self.frame = tk.Frame(self, width=self['width'], height=140, bg=self.C.root_bg)
        self.search_icon = ImageLabel(self.top_frame, data=SEARCHMEDIUM, bg=self.C.root_bg)
        self.search_entry = EntryWithPlaceHolder(self.top_frame, 'Search', width=20, bg=self.C.search_entry_bg,
                                                 font=GOTHIC[11], fg=self.C.search_entry_fg)
        self.search = ImageLabel(self.top_frame, data=SEARCH2, bg=self.top_frame.cget('bg'), command=command)
        self.label1 = tk.Label(self.frame, font=GOTHICBOLD[13], fg=self.C.foc_in_entry)
        self.label2 = tk.Label(self.frame, font=GOTHIC[11], fg=self.C.foc_in_entry)
        self.label3 = tk.Label(self.frame, font=GOTHIC[11], fg=self.C.foc_in_entry)
        self.label4 = tk.Label(self.frame, font=GOTHIC[11], fg=self.C.foc_in_entry)
        self.label5 = tk.Label(self.frame, font=GOTHIC[11], fg=self.C.foc_in_entry)
        self.place_widgets()

    def remove_student(self, event=None):
        if not self.ID == None:
            self.ID = None
            self.label1.config(text='')
            self.label2.config(text='')
            self.label3.config(text='')
            self.label4.config(text='')
            self.label5.config(text='')

    def remove_book(self, event=None):
        self.ID = None
        self.label1.config(text='')
        self.label2.config(text='')
        self.label3.config(text='')
        self.label4.config(text='')
        self.label5.config(text='')

    def place_widgets(self):
        self.top_frame.pack()
        self.frame.pack(pady=15)
        place_center(self.search_icon, self.top_frame)
        self.search_entry.place(x=35, y=8)
        self.search.place(x=210, y=4)
        self.label1.pack()
        self.label2.pack()
        self.label3.pack()
        self.label4.pack()
        self.label5.pack()
        for child in self.frame.winfo_children():
            child.config(bg=self.C.root_bg)


class SearchBook(tk.Toplevel):
    def __init__(self, master=None, title=None):
        super().__init__(master)
        set_geometry(self, self.winfo_screenwidth(), self.winfo_screenheight(), 610, 398)
        self.resizable(0, 0)
        icondata = base64.b64decode(LMSICO)
        self.lms_icon = 'login.ico'
        iconfile = open(self.lms_icon, 'wb')
        iconfile.write(icondata)
        iconfile.close()
        self.wm_iconbitmap(self.lms_icon)
        self.C = Colors()
        self['bg'] = self.C.root_bg
        self.title('Select Book')
        self.ID = None
        self.master = master
        self.grab_set()
        self.books_found = []
        search = title.lower()
        titles = runQuery('SELECT title FROM books', receive=True)
        for title in titles:
            if title[0].lower().__contains__(search):
                self.books_found.append(
                    (runQuery('SELECT ID FROM books WHERE title=:title', {'title': title[0]}, receive=True))[0][0])
        if len(self.books_found) == 0:
            msg.showinfo('Information', 'No match found.')
            self.destroy()
            return
        container = tk.Frame(self, width=610, height=398)
        container.pack()
        frame = ScrollableFrame(container)
        frame.pack()
        for ID in self.books_found:
            student = Book(frame.scrollable_frame, ID, edit=False, checkbox=False, root=self, confirm=True)


class BookIssue(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.C = Colors()
        self['bg'] = self.C.root_bg
        self['height'] = master.cget('height')
        self['width'] = master.cget('width')
        self.master = master
        self.Image = ImageData()
        self.student_holder = ImageLabel(self, data=self.Image.C_STUDENTFRAME, bg=self.C.root_bg)
        self.book_holder = ImageLabel(self, data=self.Image.C_BOOKFRAME, bg=self.C.root_bg)
        self.date_holder = ImageLabel(self, data=self.Image.C_DATEHOLDER, bg=self.C.root_bg)
        # ==============================================================================================================
        self.sf = Frame(self, command=self.search_student)
        self.bf = Frame(self, command=self.search_book)
        self.remove_icon1 = ImageLabel(self, data=REMOVE, bg=self.C.root_bg, command=self.sf.remove_student)
        self.remove_icon1.place(x=300, y=60)
        self.remove_icon = ImageLabel(self, data=REMOVE, bg=self.C.root_bg, command=self.bf.remove_book)
        self.remove_icon.place(x=600, y=60)
        # ==============================================================================================================
        self.date_frame = tk.Frame(self, width=570, height=60, bg=self.C.root_bg)
        self.date_issued_title = tk.Label(self.date_frame, text='Date Issued: ', fg=self.C.foc_in_entry,
                                          bg=self.C.root_bg,
                                          font=GOTHICBOLD[11])
        self.due_date_title = tk.Label(self.date_frame, text='Due Date: ', fg=self.C.foc_in_entry, bg=self.C.root_bg,
                                       font=GOTHICBOLD[11])
        self.date_issued_label = tk.Label(self.date_frame, text='May 31, 2020', fg=self.C.foc_in_entry,
                                          bg=self.C.root_bg,
                                          font=GOTHIC[11])
        self.due_date_label = tk.Label(self.date_frame, text='June 5, 2020', fg=self.C.foc_in_entry, bg=self.C.root_bg,
                                       font=GOTHIC[11])
        self.confirm = ImageLabel(self.date_frame, data=CONFIRMLARGE, bg=self.C.root_bg, command=self.confirm_issue)
        self.confirm.place(x=470, y=12)
        self.date_issued = datetime.datetime.today().strftime('%B %d, %Y')
        self.due_date = (datetime.datetime.now() + datetime.timedelta(days=7)).strftime('%B %d, %Y')
        self.date_issued_label.config(text=self.date_issued)
        self.due_date_label.config(text=self.due_date)
        # ==============================================================================================================
        self.place_widgets()
        # ==============================================================================================================

    def refresh(self):
        self.destroy()
        self.__init__(self.master)

    def confirm_issue(self, event=None):
        student_ID = self.sf.ID
        book_ID = self.bf.ID
        if not student_ID:
            msg.showerror('Error', 'No student selected.')
            return
        if not book_ID:
            msg.showerror('Error', 'No book selected.')
            return
        book_title = runQuery('SELECT title FROM books WHERE ID=:ID', {'ID': book_ID}, receive=True)[0][0]
        bookpass = runQuery('SELECT bookpass FROM students WHERE ID=:ID', {'ID': student_ID}, receive=True)[0][0]
        copies_left = runQuery('SELECT copies_left FROM books WHERE ID=:ID', {'ID': book_ID}, receive=True)[0][0]
        if bookpass == 0:
            msg.showerror('Error', 'Student has already borrowed ' + str(MAX_BOOK) + ' books.')
            return
        if copies_left == 0:
            msg.showerror('Error', book_title + ' is not available.')
            return
        if runQuery('INSERT INTO issues (student_ID, book_ID, date_issued, due_date, extend) '
                    'VALUES (:student_ID, :book_ID, :date_issued, :due_date, :extend)',
                    {
                        'student_ID': student_ID,
                        'book_ID': book_ID,
                        'date_issued': self.date_issued,
                        'due_date': self.due_date,
                        'extend': 0
                    }):
            msg.showinfo('Information', 'Book Issue successful.')
            bookpass -= 1
            copies_left -= 1
            runQuery('UPDATE students SET bookpass=:bookpass WHERE ID=:ID', {'bookpass': bookpass, 'ID': student_ID})
            runQuery('UPDATE books SET copies_left=:copies_left WHERE ID=:ID',
                     {'copies_left': copies_left, 'ID': book_ID})
            self.select_book(book_ID)
        else:
            msg.showerror('Error', 'Cannot issue book. Please try again.')
            return
        pass

    def search_student(self, event=None):
        if self.sf.search_entry.is_empty():
            msg.showerror('Error', 'Enter student name to search.')
            return
        ID = self.sf.search_entry.get()
        student = runQuery('SELECT name FROM students WHERE ID=:ID', {'ID': ID}, receive=True)
        try:
            student[0][0]
        except:
            msg.showerror('Error', 'Student not found.\nPlease ensure that the ID is correct.')
            return
        name = student[0][0]
        grade = runQuery('SELECT grade FROM students WHERE ID=:ID', {'ID': ID}, receive=True)[0][0]
        address = runQuery('SELECT address FROM students WHERE ID=:ID', {'ID': ID}, receive=True)[0][0]
        contact = runQuery('SELECT contact FROM students WHERE ID=:ID', {'ID': ID}, receive=True)[0][0]
        self.sf.label1.config(text=name)
        self.sf.label2.config(text='ID: ' + ID)
        self.sf.label3.config(text=grade)
        self.sf.label4.config(text=address)
        self.sf.label5.config(text=contact)
        self.sf.ID = ID

    def search_book(self, event=None):
        if self.bf.search_entry.is_empty():
            msg.showerror('Error', 'Enter book title to search')
            return
        search_window = SearchBook(self, self.bf.search_entry.get())

    def select_book(self, ID=None):
        title = runQuery('SELECT title FROM books WHERE ID=:ID', {'ID': ID}, receive=True)[0][0]
        author = runQuery('SELECT author FROM books WHERE ID=:ID', {'ID': ID}, receive=True)[0][0]
        edition = runQuery('SELECT edition FROM books WHERE ID=:ID', {'ID': ID}, receive=True)[0][0]
        year = runQuery('SELECT year FROM books WHERE ID=:ID', {'ID': ID}, receive=True)[0][0]
        copies_left = runQuery('SELECT copies_left FROM books WHERE ID=:ID', {'ID': ID}, receive=True)[0][0]
        self.bf.label1.config(text=title)
        self.bf.label2.config(text=author)
        if edition == '1':
            text = '1st'
        elif edition == '2':
            text = '2nd'
        elif edition == '3':
            text = '3rd'
        else:
            text = edition + 'th'
        self.bf.label3.config(text=text + ' Edition')
        self.bf.label4.config(text=year)
        text = 'Not Available'
        if copies_left != 0:
            text = str(copies_left) + ' Copies Available'
        self.bf.label5.config(text=text)
        self.bf.ID = ID

    def place_widgets(self):
        self.student_holder.place(x=40, y=50)
        self.book_holder.place(x=340, y=50)
        self.date_holder.place(x=40, y=365)
        self.date_frame.place(x=50, y=375)
        self.date_issued_title.place(x=0, y=3)
        self.due_date_title.place(x=0, y=28)
        self.date_issued_label.place(x=100, y=2)
        self.due_date_label.place(x=100, y=27)
        self.sf.place(x=45, y=146)
        self.bf.place(x=345, y=146)


# ======================================================================================================================
# BOOK ISSUE
# ======================================================================================================================


# ======================================================================================================================
# MAIN MENU
# ======================================================================================================================
class MainMenu(tk.Tk):
    def __init__(self):
        super().__init__()
        self.screen_width = self.winfo_screenwidth()
        self.screen_height = self.winfo_screenheight()
        set_geometry(self, self.screen_width, self.screen_height, MainMenuWin.width, MainMenuWin.height)
        icondata = base64.b64decode(LMSICO)
        self.lms_icon = 'login.ico'
        iconfile = open(self.lms_icon, 'wb')
        iconfile.write(icondata)
        iconfile.close()
        self.wm_iconbitmap(self.lms_icon)
        self.resizable(0, 0)
        self.title(MainMenuWin.title)
        self.protocol('WM_DELETE_WINDOW', self.main_window_closing)
        # ==============================================================================================================
        self.c = Colors()
        self.config(bg=self.c.root_bg)
        self.Image = ImageData()
        # ==============================================================================================================
        self.top_frame = TitleFrame(self, title=MainMenuWin.title, width=MainMenuWin.width,
                                    height=65, bg=self.c.main_tf_bg)

        self.side_buttons = [
            Menu(self, image=MANAGESTUDENTS, text='Manage\nStudents', id=0, bg=self.c.main_sf_bg,
                 command=self.manage_students),
            Menu(self, image=MANAGEBOOKS, text='Manage Books', id=1, bg=self.c.main_sf_bg, command=self.manage_books),
            Menu(self, image=BOOKISSUE, text='Book Issue', id=2, bg=self.c.main_sf_bg, command=self.book_issue),
            Menu(self, image=BOOKRETURN, text='Book Return', id=3, bg=self.c.main_sf_bg, command=self.book_return),
            Menu(self, image=SETTINGS, text='Settings', id=4, bg=self.c.main_sf_bg, command=self.settings),
            Menu(self, image=LOGOUT, text='Logout', id=5, bg=self.c.main_sf_bg, command=self.logout)
        ]
        y = self.top_frame.cget('height')
        for button in self.side_buttons:
            button.place(x=0, y=y)
            y += button.cget('height') + 2
        # ==============================================================================================================
        self.place_widgets()
        # ==============================================================================================================
        self.display_frame = tk.Frame(self, bg=self.c.root_bg, width=670, height=500)
        self.display_frame.place(x=120, y=65)

        # """
        self.manage_students_frame = ManageStudents(self.display_frame, icon=self.lms_icon)
        self.manage_students_frame.place(x=0, y=0)

        self.manage_books_frame = ManageBooks(self.display_frame, icon=self.lms_icon)
        self.manage_books_frame.place(x=0, y=0)

        self.book_issue_frame = BookIssue(self.display_frame)
        self.book_issue_frame.place(x=0, y=0)

        self.book_return_frame = BookReturn(self.display_frame)
        self.book_return_frame.place(x=0, y=0)
        # """
        # self.manage_students_frame = None
        # self.manage_books_frame = None
        # self.book_issue_frame = None
        # self.book_return_frame = None

        self.refresh_list = [
            self.manage_students_frame,
            self.manage_books_frame,
            self.book_issue_frame,
            self.book_return_frame,
            self
        ]

        self.settings_frame = Settings(self.display_frame, self.refresh_list, self)
        self.settings_frame.place(x=0, y=0)

        self.cover_frame = tk.Frame(self.display_frame, bg=self.c.root_bg, width=670, height=500)
        self.cover_frame.place(x=0, y=0)
        # ==============================================================================================================
        self.manage_students()
        # self.top_frame.about_window()
        self.C = Colors()
        # ==============================================================================================================

    def main_window_closing(self):
        if msg.askyesno('Log Out', 'Are you sure you want to log out?'):
            self.destroy()

    def refresh(self):
        self.destroy()
        self.__init__()

    def reset_side_button(self):
        for button in self.side_buttons:
            button.config(bg=self.c.main_sf_bg)
            for child in button.winfo_children():
                child.config(bg=self.c.main_sf_bg, fg=self.C.sf_label_normal)

    def highlight_widget(self, event=None):
        self.reset_side_button()
        index = event.widget.get_id()
        self.side_buttons[index].config(bg=self.c.main_button_clicked)
        for child in self.side_buttons[index].winfo_children():
            child.config(bg=self.c.main_button_clicked, fg=self.C.sf_label_clicked)

    def place_widgets(self):
        self.top_frame.place(x=0, y=0)

    # ==================================================================================================================

    def manage_students(self, event=None):
        try:
            self.highlight_widget(event)
        except:
            self.side_buttons[0].active()
            pass
        self.manage_students_frame.tkraise()

    def manage_books(self, event=None):
        self.highlight_widget(event)
        self.manage_books_frame.tkraise()

    def book_issue(self, event=None):
        try:
            self.highlight_widget(event)
        except:
            self.side_buttons[2].active()
            pass
        self.book_issue_frame.tkraise()

    def book_return(self, event=None):
        try:
            self.highlight_widget(event)
        except:
            self.side_buttons[3].active()
            pass
        self.book_return_frame.tkraise()

    def settings(self, event=None):
        try:
            self.highlight_widget(event)
        except:
            self.side_buttons[4].active()
            pass
        self.settings_frame.tkraise()

    def logout(self, event=None):
        self.highlight_widget(event)
        if msg.askyesno('Log Out', 'Are you sure you want to log out?'):
            self.destroy()


# ======================================================================================================================
# MAIN MENU
# ======================================================================================================================


# ======================================================================================================================
# LOGIN
# ======================================================================================================================
class Login(tk.Tk):
    def __init__(self):
        super().__init__()
        self.screen_width = self.winfo_screenwidth()
        self.screen_height = self.winfo_screenheight()
        set_geometry(self, self.screen_width, self.screen_height, LoginWin.width, LoginWin.height)
        icondata = base64.b64decode(LOGINICO)
        temp_file = 'login.ico'
        iconfile = open(temp_file, 'wb')
        iconfile.write(icondata)
        iconfile.close()
        self.wm_iconbitmap(temp_file)
        self.resizable(0, 0)
        self.title('Login')
        self.attempt = 0
        self.access = False
        # ==============================================================================================================
        # SETTING UP THEME
        # ==============================================================================================================
        self.c = Colors()
        self.config(bg=self.c.root_bg)
        self.Image = ImageData()
        # ==============================================================================================================
        self.title_frame = tk.Frame(self, bg=self.c.root_bg)
        self.entry_frame = tk.Frame(self, height=80, bg=self.c.root_bg)
        self.button_frame = tk.Frame(self, height=70, bg=self.c.root_bg)
        # ==============================================================================================================
        self.admin_icon = tk.PhotoImage(data=ADMINB64)
        self.admin_icon_holder = tk.Label(self.title_frame, image=self.admin_icon, bg=self.c.root_bg)
        self.username_entry = Entry(self.entry_frame, 'Username', icon=self.Image.C_PERSON)
        self.password_entry = Entry(self.entry_frame, 'Password', icon=self.Image.C_LOCK, show='\u2022',
                                    hint=self.Image.C_EYE)
        self.button = Button(self.button_frame, text='Login', command=self.login)
        self.forgot_label = tk.Label(self.button_frame, text='Forgot Password', font=LoginWin.forgot_font,
                                     bg=self.c.root_bg)
        # ==============================================================================================================
        self.place_widgets()
        self.bind('<Return>', self.login)
        self.forgot_label.bind('<Button-1>', self.forgot_password)
        # ==============================================================================================================
        self.fp_window_isactive = False
        self.rp_window_isactive = False
        # ==============================================================================================================
        self.mainloop()
        # ==============================================================================================================

    def place_widgets(self):
        self.title_frame.pack(fill=tk.X, pady=5)
        self.entry_frame.pack(fill=tk.X)
        self.button_frame.pack(fill=tk.X)
        sticky = {'sticky': 'nsew'}
        self.admin_icon_holder.pack(pady=5)
        self.username_entry.grid(row=0, column=1, **sticky, padx=5, pady=5)
        self.password_entry.grid(row=1, column=1, **sticky, padx=5, pady=5)
        self.button.pack(fill=tk.X, padx=5, pady=5)
        self.forgot_label.pack(fill=tk.X)

    def login(self, event=None):
        username = self.username_entry.get()
        password = self.password_entry.get()
        if username == 'Username' or username == '':
            msg.showerror(MSG_ENTRY_EMPTY, 'Username entry is empty.')
            return
        elif password == 'Password' or password == '':
            msg.showerror(MSG_ENTRY_EMPTY, 'Password entry is empty')
            return
        old_username = runQuery('SELECT username FROM admin', receive=True)
        old_password = runQuery('SELECT password FROM admin', receive=True)
        old_username = old_username[0][0]
        old_password = old_password[0][0]
        if not username == old_username:
            msg.showerror('Error', 'Incorrect Username')
            return
        elif not sha256_crypt.verify(password, old_password):
            msg.showerror('Error', 'Incorrect Password')
            if self.attempt == 2:
                self.forgot_password()
            self.attempt += 1
            return
        self.destroy()
        self.access = True
        return True

    def forgot_password(self, event=None):
        if self.fp_window_isactive:
            self.fp_window.destroy()
        self.fp_window_isactive = True
        self.fp_window = tk.Toplevel(self)
        self.fp_window.grab_set()
        set_geometry(self.fp_window, self.screen_width, self.screen_height, LoginWin.width, LoginWin.height - 80)
        self.fp_window.title('Setup')
        icondata = base64.b64decode(LOGINICO)
        temp_file = 'login.ico'
        iconfile = open(temp_file, 'wb')
        iconfile.write(icondata)
        iconfile.close()
        self.fp_window.wm_iconbitmap(temp_file)
        self.fp_window.resizable(0, 0)
        self.fp_window.config(bg=self.c.root_bg)
        # ==============================================================================================================
        self.fp_title_frame = tk.Canvas(self.fp_window, height=40, bg=self.c.main_tf_bg)
        self.fp_entry_frame = tk.Frame(self.fp_window, height=15, bg=self.c.root_bg)
        self.fp_button_frame = tk.Frame(self.fp_window, height=10, bg=self.c.root_bg)
        self.fp_title_frame.pack(fill=tk.X)
        self.fp_entry_frame.pack(fill=tk.X, padx=10, pady=10)
        self.fp_button_frame.pack(fill=tk.X)
        # ==============================================================================================================
        self.line = self.fp_title_frame.create_line(80, 25, 270, 25, width=2, fill=self.c.setup_title_fg)
        fp_title = tk.Label(self.fp_title_frame, text='Forgot Password', font=LoginWin.title_font,
                            fg=self.c.setup_title_fg, bg=self.c.main_tf_bg)
        fp_title.place(x=100, y=8)
        question = runQuery('SELECT question FROM admin', receive=True)
        fp_question = tk.Label(self.fp_entry_frame, text=question[0][0], font=LoginWin.question_font,
                               fg=self.c.foc_in_entry, bg=self.c.root_bg, wraplength=250, justify=tk.LEFT)
        fp_question.pack(anchor=tk.W)
        self.answer_entry = Entry(self.fp_entry_frame, 'Answer')
        self.answer_entry.pack(anchor=tk.W, padx=1, pady=5)
        button = Button(self.fp_button_frame, text='Confirm Answer',
                        command=self.confirm_answer)
        # button = mw.Button(self.fp_button_frame, text='Confirm Answer', font=LoginWin.button_font,
        #                   bg=self.c.login_button_bg, fg=self.c.login_button_fg, command=self.confirm_answer)
        button.pack(padx=5, pady=5, fill=tk.X)
        self.fp_window.bind('<Return>', self.confirm_answer)

    def confirm_answer(self, event=None):
        answer = self.answer_entry.get()
        if answer == '' or answer == 'Answer':
            msg.showerror(MSG_ENTRY_EMPTY, 'Answer Entry is empty.')
            self.fp_window.focus()
            return
        old_answer = runQuery('SELECT answer FROM admin', receive=True)
        old_answer = old_answer[0][0]
        if not sha256_crypt.verify(answer.lower(), old_answer):
            msg.showerror('Error', 'Incorrect Answer')
            self.fp_window.focus()
            return
        self.reset_password()
        self.fp_window.destroy()

    def reset_password(self):
        if self.rp_window_isactive:
            self.rp_window.destroy()
        self.rp_window_isactive = True
        self.rp_window = tk.Toplevel(self)
        self.rp_window.grab_set()
        set_geometry(self.rp_window, self.screen_width, self.screen_height, LoginWin.width, LoginWin.height - 60)
        icondata = base64.b64decode(LOGINICO)
        temp_file = 'login.ico'
        iconfile = open(temp_file, 'wb')
        iconfile.write(icondata)
        iconfile.close()
        self.rp_window.wm_iconbitmap(temp_file)
        self.rp_window.resizable(0, 0)
        self.rp_window.title('Setup')
        self.rp_window.config(bg=self.c.root_bg)
        self.rp_window.focus()
        # ==============================================================================================================
        self.rp_title_frame = tk.Canvas(self.rp_window, height=40, bg=self.c.main_tf_bg)
        self.rp_entry_frame = tk.Frame(self.rp_window, height=15, bg=self.c.root_bg)
        self.rp_button_frame = tk.Frame(self.rp_window, height=10, bg=self.c.root_bg)
        self.rp_title_frame.pack(fill=tk.X)
        self.rp_entry_frame.pack(fill=tk.X, padx=10, pady=10)
        self.rp_button_frame.pack(fill=tk.X)
        # ==============================================================================================================
        self.rp_line = self.rp_title_frame.create_line(70, 25, 270, 25, width=2, fill=self.c.setup_title_fg)
        rp_title = tk.Label(self.rp_title_frame, text='Reset Password', font=LoginWin.title_font,
                            fg=self.c.setup_title_fg, bg=self.c.main_tf_bg)
        rp_title.place(x=100, y=8)
        self.new_pass_entry = Entry(self.rp_entry_frame, 'New Password')
        self.confirm_new_pass_entry = Entry(self.rp_entry_frame, 'Confirm New Password')
        self.new_pass_entry.pack(pady=5)
        self.confirm_new_pass_entry.pack()
        button = Button(self.rp_button_frame, text='Confirm', command=self.confirm_reset)
        # button = tk.Button(self.rp_button_frame, text='Confirm', font=LoginWin.button_font, bg=self.c.login_button_bg,
        #                   fg=self.c.login_button_fg)
        button.pack(fill=tk.X, padx=5, pady=5)
        self.rp_window.bind('<Return>', self.confirm_reset)
        # ==============================================================================================================

    def confirm_reset(self, event=None):
        password = self.new_pass_entry.get()
        password2 = self.confirm_new_pass_entry.get()
        if password == 'New Pasword' or password == '':
            msg.showerror(MSG_ENTRY_EMPTY, 'New Password entry is empty.')
            self.rp_window.focus()
            return
        elif password2 == 'Confirm New Password' or password2 == '':
            msg.showerror(MSG_ENTRY_EMPTY, 'Confirm Password entry is empty.')
            self.rp_window.focus()
            return
        if not password == password2:
            msg.showerror('Error', 'Password don\'t match.')
            self.rp_window.focus()
            return
        self.admin = runQuery('SELECT name FROM admin', receive=True)[0][0]
        encrypted_pass = sha256_crypt.hash(password)
        runQuery('UPDATE admin SET password=:new_pass WHERE name=:admin',
                 {'new_pass': encrypted_pass,
                  'admin': self.admin})
        msg.showinfo('Information', 'Password Reset Successful')
        self.rp_window.destroy()
        self.password_entry.reset()
        self.focus()


# ======================================================================================================================
# LOGIN
# ======================================================================================================================


# ======================================================================================================================
# MAIN
# ======================================================================================================================
class Setup(tk.Tk):
    def __init__(self):
        super().__init__()
        self.screen_width = self.winfo_screenwidth()
        self.screen_height = self.winfo_screenheight()
        set_geometry(self, self.screen_width, self.screen_height, SetupWin.width, SetupWin.height)
        icondata = base64.b64decode(SETUPICO)
        temp_file = 'setup.ico'
        iconfile = open(temp_file, 'wb')
        iconfile.write(icondata)
        iconfile.close()
        self.wm_iconbitmap(temp_file)
        self.title('Setup')
        self.resizable(0, 0)
        self.access = False
        # ==============================================================================================================
        # SETTING UP THEME
        # ==============================================================================================================
        self.c = Colors()
        self.config(bg=self.c.root_bg)
        self.Image = ImageData()
        # ==============================================================================================================
        self.title_frame = tk.Canvas(self, height=50, width=SetupWin.width, bg=self.c.main_tf_bg)
        self.entry_frame = tk.Frame(self, height=210, bg=self.c.root_bg)
        self.button_frame = tk.Frame(self, height=50, bg=self.c.root_bg)
        # ==============================================================================================================
        line_coords = get_coords(self.title_frame, SetupWin.line_length, SetupWin.line_height)
        self.line = self.title_frame.create_line(line_coords, fill=self.c.setup_title_fg)
        self.title = tk.Label(self.title_frame, text='Register', font=Font.title_font, fg=self.c.setup_title_fg,
                              bg=self.title_frame.cget('bg'))

        self.fname_entry = Entry(self.entry_frame, SetupWin.entries[0], fg=self.c.foc_in_entry)
        self.username_entry = Entry(self.entry_frame, SetupWin.entries[1], fg=self.c.foc_in_entry)
        self.password_entry = Entry(self.entry_frame, SetupWin.entries[2], show='\u2022', hint=self.Image.C_EYE,
                                    fg=self.c.foc_in_entry)
        self.confirm_password_entry = Entry(self.entry_frame, SetupWin.entries[3], show='\u2022', hint=self.Image.C_EYE,
                                            fg=self.c.foc_in_entry)
        self.security_question_entry = Entry(self.entry_frame, SetupWin.entries[4], hint=self.Image.C_INFOSMALL,
                                             message='Create a question that only you know the answer.\n'
                                                     'Example: What is the name of your first pet?', fg=self.c.foc_in_entry)
        self.answer_entry = Entry(self.entry_frame, SetupWin.entries[5], fg=self.c.foc_in_entry)

        self.button = Button(self.button_frame, text='Register', command=self.register)
        # ==============================================================================================================
        self.place_widgets()
        self.bind('<Return>', self.register)
        # ==============================================================================================================

    def place_widgets(self):
        self.title_frame.pack(fill=tk.X)
        self.entry_frame.pack(fill=tk.X, padx=10)
        self.button_frame.pack(fill=tk.X)
        # ==============================================================================================================
        place_center(self.title, self.title_frame)

        sticky = {'sticky': 'nsew'}
        self.fname_entry.grid()
        self.username_entry.grid(row=1, columnspan=2, **sticky)
        self.password_entry.grid(row=2, columnspan=2, **sticky)
        self.confirm_password_entry.grid(row=3, columnspan=2, **sticky)
        self.security_question_entry.grid(row=4, columnspan=2, **sticky)
        self.answer_entry.grid(row=5, columnspan=2, **sticky)
        for child in self.entry_frame.winfo_children():
            child.grid_configure(pady=3)

        self.button.pack(pady=3, padx=10, fill=tk.X)
        # ==============================================================================================================

    def register(self, event=None):
        for entry in self.entry_frame.winfo_children():
            try:
                if entry.is_empty():
                    msg.showerror(MSG_ENTRY_EMPTY, entry.is_empty()[1] + ' entry is empty.')
                    return
                if not entry.is_valid()[0]:
                    msg.showerror(MSG_ENTRY_INVALID, entry.is_valid()[1])
                    return
            except:
                if entry.get() == 'Select Security Question':
                    msg.showerror(MSG_ENTRY_EMPTY, 'Please choose a security question.')
                    return
        # ==============================================================================================================
        fname = self.fname_entry.get()
        username = self.username_entry.get()
        password = self.password_entry.get()
        password2 = self.confirm_password_entry.get()
        question = self.security_question_entry.get()
        answer = self.answer_entry.get().lower()
        if not password == password2:
            msg.showerror('Error', 'Password don\'t match.')
            return
        runQuery('DROP TABLE IF EXISTS admin')
        runQuery("""CREATE TABLE admin (name TEXT NOT NULL,
                                        username TEXT NOT NULL,
                                        password TEXT NOT NULL,
                                        question TEXT NOT NULL,
                                        answer TEXT NOT NULL)""")
        runQuery("INSERT INTO admin VALUES (:name, :username, :password, :question, :answer)",
                 {
                     'name': fname,
                     'username': username,
                     'password': sha256_crypt.hash(password),
                     'question': question,
                     'answer': sha256_crypt.hash(answer)
                 })
        msg.showinfo('Information', 'Registered Successfully.')
        create_color_table()
        create_student_table()
        create_book_table()
        create_issue_table()
        create_history_table()
        self.access = True
        self.destroy()
        return True
        # ==============================================================================================================


def login_user():
    login = Login()
    if login.access:
        main = MainMenu()
        main.mainloop()


def setup_user():
    setup = Setup()
    setup.mainloop()
    print(setup.access)
    if setup.access:
        login_user()


def main_function():
    if not os.path.isfile('database.db'):
        setup_user()
    else:
        name = runQuery('SELECT name FROM admin', receive=True)
        if not name:
            setup_user()
        else:
            login_user()


if __name__ == '__main__':
    main_function()
# ======================================================================================================================
# MAIN
# ======================================================================================================================
